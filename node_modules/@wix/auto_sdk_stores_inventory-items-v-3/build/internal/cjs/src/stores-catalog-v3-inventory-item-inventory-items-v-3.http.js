"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkSetOrAdjustInventoryItemsByFilter = exports.bulkIncrementInventoryItemsByVariantAndLocation = exports.bulkDecrementInventoryItemsByVariantAndLocation = exports.bulkIncrementInventoryItems = exports.bulkDecrementInventoryItems = exports.searchInventoryItems = exports.queryInventoryItems = exports.bulkDeleteInventoryItems = exports.deleteInventoryItem = exports.bulkUpdateInventoryItemsByFilter = exports.bulkUpdateInventoryItems = exports.updateInventoryItem = exports.getInventoryItem = exports.bulkCreateInventoryItems = exports.createInventoryItem = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/inventory',
                destPath: '',
            },
        ],
        'api._api_base_domain_': [
            {
                srcPath: '/inventory',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/stores/v3/inventory-items',
                destPath: '/v3/inventory-items',
            },
            {
                srcPath: '/stores/v3/bulk/inventory-items',
                destPath: '/v3/bulk/inventory-items',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
        'editor.wixapps.net': [
            {
                srcPath: '/_api/inventory',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_stores_inventory-items-v-3';
/**
 * Creates an inventory item.
 * The combination of `variantId` and `locationId` is unique.
 */
function createInventoryItem(payload) {
    function __createInventoryItem({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'inventoryItem.createdDate' },
                    { path: 'inventoryItem.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.CreateInventoryItem',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'inventoryItem.createdDate' },
                        { path: 'inventoryItem.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createInventoryItem;
}
exports.createInventoryItem = createInventoryItem;
/** Creates multiple inventory items. */
function bulkCreateInventoryItems(payload) {
    function __bulkCreateInventoryItems({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'inventoryItems.createdDate' },
                    { path: 'inventoryItems.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkCreateInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/create',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkCreateInventoryItems;
}
exports.bulkCreateInventoryItems = bulkCreateInventoryItems;
/** Retrieves an inventory item. */
function getInventoryItem(payload) {
    function __getInventoryItem({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'GET',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.GetInventoryItem',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items/{inventoryItemId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'inventoryItem.createdDate' },
                        { path: 'inventoryItem.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getInventoryItem;
}
exports.getInventoryItem = getInventoryItem;
/**
 * Updates an inventory item.
 *
 *
 * Each time the inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
function updateInventoryItem(payload) {
    function __updateInventoryItem({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'inventoryItem.createdDate' },
                    { path: 'inventoryItem.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'PATCH',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.UpdateInventoryItem',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items/{inventoryItem.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'inventoryItem.createdDate' },
                        { path: 'inventoryItem.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateInventoryItem;
}
exports.updateInventoryItem = updateInventoryItem;
/**
 * Updates multiple inventory items.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
function bulkUpdateInventoryItems(payload) {
    function __bulkUpdateInventoryItems({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'inventoryItems.fieldMask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'inventoryItems.inventoryItem.createdDate' },
                    { path: 'inventoryItems.inventoryItem.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkUpdateInventoryItems;
}
exports.bulkUpdateInventoryItems = bulkUpdateInventoryItems;
/**
 * Updates multiple inventory items, given the provided filter.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
function bulkUpdateInventoryItemsByFilter(payload) {
    function __bulkUpdateInventoryItemsByFilter({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'inventoryItem.createdDate' },
                    { path: 'inventoryItem.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItemsByFilter',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/update-by-filter',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __bulkUpdateInventoryItemsByFilter;
}
exports.bulkUpdateInventoryItemsByFilter = bulkUpdateInventoryItemsByFilter;
/** Deletes an inventory item. */
function deleteInventoryItem(payload) {
    function __deleteInventoryItem({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'DELETE',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.DeleteInventoryItem',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items/{inventoryItemId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteInventoryItem;
}
exports.deleteInventoryItem = deleteInventoryItem;
/** Deletes multiple inventory items. */
function bulkDeleteInventoryItems(payload) {
    function __bulkDeleteInventoryItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDeleteInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/delete',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __bulkDeleteInventoryItems;
}
exports.bulkDeleteInventoryItems = bulkDeleteInventoryItems;
/**
 * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function queryInventoryItems(payload) {
    function __queryInventoryItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.QueryInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'inventoryItems.createdDate' },
                        { path: 'inventoryItems.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryInventoryItems;
}
exports.queryInventoryItems = queryInventoryItems;
/**
 * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
 *
 *
 * Search Inventory Items runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function searchInventoryItems(payload) {
    function __searchInventoryItems({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'search.aggregations.range.buckets.from' },
                    { path: 'search.aggregations.range.buckets.to' },
                    {
                        path: 'search.aggregations.nested.nestedAggregations.range.buckets.from',
                    },
                    {
                        path: 'search.aggregations.nested.nestedAggregations.range.buckets.to',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.SearchInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/inventory-items/search',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'inventoryItems.createdDate' },
                        { path: 'inventoryItems.updatedDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'aggregationData.results.ranges.results.from' },
                        { path: 'aggregationData.results.ranges.results.to' },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.ranges.results.from',
                        },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.ranges.results.to',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.range.from',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.range.to',
                        },
                        { path: 'aggregationData.results.scalar.value' },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.scalar.value',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.scalar.value',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __searchInventoryItems;
}
exports.searchInventoryItems = searchInventoryItems;
/**
 * Decrements quantities of multiple inventory items.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 */
function bulkDecrementInventoryItems(payload) {
    function __bulkDecrementInventoryItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/decrement',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkDecrementInventoryItems;
}
exports.bulkDecrementInventoryItems = bulkDecrementInventoryItems;
/**
 * Increments quantities of multiple inventory items.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 */
function bulkIncrementInventoryItems(payload) {
    function __bulkIncrementInventoryItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/increment',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkIncrementInventoryItems;
}
exports.bulkIncrementInventoryItems = bulkIncrementInventoryItems;
/**
 * Decrements quantities of multiple inventory items by variant and location.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 */
function bulkDecrementInventoryItemsByVariantAndLocation(payload) {
    function __bulkDecrementInventoryItemsByVariantAndLocation({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItemsByVariantAndLocation',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/decrement-by-variant-and-location',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkDecrementInventoryItemsByVariantAndLocation;
}
exports.bulkDecrementInventoryItemsByVariantAndLocation = bulkDecrementInventoryItemsByVariantAndLocation;
/**
 * Increments quantities of multiple inventory items by variant and location.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 */
function bulkIncrementInventoryItemsByVariantAndLocation(payload) {
    function __bulkIncrementInventoryItemsByVariantAndLocation({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItemsByVariantAndLocation',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/increment-by-variant-and-location',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkIncrementInventoryItemsByVariantAndLocation;
}
exports.bulkIncrementInventoryItemsByVariantAndLocation = bulkIncrementInventoryItemsByVariantAndLocation;
/**
 * Set or Adjust inventory items which satisfy the provided filter.
 * If item track quantity, adjust it's quantity,
 * In case non-tracking, updates it to track and sets quantity to `incrementBy` or `decrementBy`.
 */
function bulkSetOrAdjustInventoryItemsByFilter(payload) {
    function __bulkSetOrAdjustInventoryItemsByFilter({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v3.inventory_item',
            method: 'POST',
            methodFqn: 'com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkSetOrAdjustInventoryItemsByFilter',
            packageName: PACKAGE_NAME,
            url: resolveComWixStoresCatalogInventoryApiV3InventoryServiceUrl({
                protoPath: '/v3/bulk/inventory-items/set-or-adjust-by-filter',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __bulkSetOrAdjustInventoryItemsByFilter;
}
exports.bulkSetOrAdjustInventoryItemsByFilter = bulkSetOrAdjustInventoryItemsByFilter;
//# sourceMappingURL=stores-catalog-v3-inventory-item-inventory-items-v-3.http.js.map