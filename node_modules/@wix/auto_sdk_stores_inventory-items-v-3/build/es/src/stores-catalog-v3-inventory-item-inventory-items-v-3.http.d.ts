import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates an inventory item.
 * The combination of `variantId` and `locationId` is unique.
 */
export declare function createInventoryItem(payload: object): RequestOptionsFactory<any>;
/** Creates multiple inventory items. */
export declare function bulkCreateInventoryItems(payload: object): RequestOptionsFactory<any>;
/** Retrieves an inventory item. */
export declare function getInventoryItem(payload: object): RequestOptionsFactory<any>;
/**
 * Updates an inventory item.
 *
 *
 * Each time the inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
export declare function updateInventoryItem(payload: object): RequestOptionsFactory<any>;
/**
 * Updates multiple inventory items.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
export declare function bulkUpdateInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Updates multiple inventory items, given the provided filter.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 */
export declare function bulkUpdateInventoryItemsByFilter(payload: object): RequestOptionsFactory<any>;
/** Deletes an inventory item. */
export declare function deleteInventoryItem(payload: object): RequestOptionsFactory<any>;
/** Deletes multiple inventory items. */
export declare function bulkDeleteInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
export declare function queryInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
 *
 *
 * Search Inventory Items runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
export declare function searchInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Decrements quantities of multiple inventory items.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 */
export declare function bulkDecrementInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Increments quantities of multiple inventory items.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 */
export declare function bulkIncrementInventoryItems(payload: object): RequestOptionsFactory<any>;
/**
 * Decrements quantities of multiple inventory items by variant and location.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 */
export declare function bulkDecrementInventoryItemsByVariantAndLocation(payload: object): RequestOptionsFactory<any>;
/**
 * Increments quantities of multiple inventory items by variant and location.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 */
export declare function bulkIncrementInventoryItemsByVariantAndLocation(payload: object): RequestOptionsFactory<any>;
/**
 * Set or Adjust inventory items which satisfy the provided filter.
 * If item track quantity, adjust it's quantity,
 * In case non-tracking, updates it to track and sets quantity to `incrementBy` or `decrementBy`.
 */
export declare function bulkSetOrAdjustInventoryItemsByFilter(payload: object): RequestOptionsFactory<any>;
