import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresCatalogV3InventoryItem from './stores-catalog-v3-inventory-item-inventory-items-v-3.http.js';
export var AvailabilityStatus;
(function (AvailabilityStatus) {
    AvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** Product is out of stock. */
    AvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    AvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    AvailabilityStatus["PREORDER"] = "PREORDER";
})(AvailabilityStatus || (AvailabilityStatus = {}));
/** The reason for the inventory change. */
export var ReasonType;
(function (ReasonType) {
    ReasonType["UNKNOWN"] = "UNKNOWN";
    ReasonType["ORDER"] = "ORDER";
    ReasonType["MANUAL"] = "MANUAL";
    ReasonType["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
})(ReasonType || (ReasonType = {}));
export var Mode;
(function (Mode) {
    /** Any of the search terms must be present. */
    Mode["OR"] = "OR";
    /** All search terms must be present. */
    Mode["AND"] = "AND";
})(Mode || (Mode = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var SortType;
(function (SortType) {
    /** Sort by number of matches. */
    SortType["COUNT"] = "COUNT";
    /** Sort by value of the field alphabetically. */
    SortType["VALUE"] = "VALUE";
})(SortType || (SortType = {}));
export var SortDirection;
(function (SortDirection) {
    /** Sort in descending order. */
    SortDirection["DESC"] = "DESC";
    /** Sort in ascending order. */
    SortDirection["ASC"] = "ASC";
})(SortDirection || (SortDirection = {}));
export var MissingValues;
(function (MissingValues) {
    /** Exclude missing values from the aggregation results. */
    MissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values in the aggregation results. */
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (MissingValues = {}));
export var ScalarType;
(function (ScalarType) {
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    ScalarType["MIN"] = "MIN";
    /** Maximum value. */
    ScalarType["MAX"] = "MAX";
})(ScalarType || (ScalarType = {}));
export var NestedAggregationType;
(function (NestedAggregationType) {
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    NestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    NestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (NestedAggregationType = {}));
export var Interval;
(function (Interval) {
    Interval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    Interval["YEAR"] = "YEAR";
    /** Monthly interval */
    Interval["MONTH"] = "MONTH";
    /** Weekly interval */
    Interval["WEEK"] = "WEEK";
    /** Daily interval */
    Interval["DAY"] = "DAY";
    /** Hourly interval */
    Interval["HOUR"] = "HOUR";
    /** Minute interval */
    Interval["MINUTE"] = "MINUTE";
    /** Second interval */
    Interval["SECOND"] = "SECOND";
})(Interval || (Interval = {}));
export var AggregationType;
(function (AggregationType) {
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    AggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    AggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    AggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (AggregationType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates an inventory item.
 * The combination of `variantId` and `locationId` is unique.
 * @param inventoryItem - Inventory item to create.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItem
 * @requiredField inventoryItem.productId
 * @requiredField inventoryItem.variantId
 * @permissionId WIX_STORES.INVENTORY_CREATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created inventory item.
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.CreateInventoryItem
 */
export async function createInventoryItem(inventoryItem) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItem: inventoryItem,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.createInventoryItem(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { inventoryItem: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['inventoryItem']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates multiple inventory items.
 * @param inventoryItems - Inventory items to create.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItems
 * @requiredField inventoryItems.productId
 * @requiredField inventoryItems.variantId
 * @permissionId WIX_STORES.INVENTORY_CREATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkCreateInventoryItems
 */
export async function bulkCreateInventoryItems(inventoryItems, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItems: inventoryItems,
        returnEntity: options?.returnEntity,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkCreateInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                inventoryItems: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['inventoryItems', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves an inventory item.
 * @param inventoryItemId - Inventory item ID.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItemId
 * @permissionId WIX_STORES.INVENTORY_READ
 * @permissionScope Read inventory in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Inventory item.
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.GetInventoryItem
 */
export async function getInventoryItem(inventoryItemId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItemId: inventoryItemId,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.getInventoryItem(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { inventoryItemId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['inventoryItemId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates an inventory item.
 *
 *
 * Each time the inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 * @param _id - Inventory item ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField inventoryItem
 * @requiredField inventoryItem.revision
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated inventory item.
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.UpdateInventoryItem
 */
export async function updateInventoryItem(_id, inventoryItem, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItem: { ...inventoryItem, id: _id },
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.updateInventoryItem(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.inventoryItem;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { inventoryItem: '$[1]' },
            explicitPathsToArguments: {
                'inventoryItem.id': '$[0]',
                reason: '$[2].reason',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'inventoryItem', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple inventory items.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 * @param inventoryItems - Inventory items to update.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItems
 * @requiredField inventoryItems.inventoryItem._id
 * @requiredField inventoryItems.inventoryItem.revision
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItems
 */
export async function bulkUpdateInventoryItems(inventoryItems, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItems: inventoryItems,
        returnEntity: options?.returnEntity,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkUpdateInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                inventoryItems: '$[0]',
                returnEntity: '$[1].returnEntity',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['inventoryItems', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple inventory items, given the provided filter.
 *
 * Each time an inventory item is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an inventory item.
 * This ensures you're working with the latest inventory item and prevents unintended overwrites.
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @requiredField options.inventoryItem
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkUpdateInventoryItemsByFilter
 */
export async function bulkUpdateInventoryItemsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        inventoryItem: options?.inventoryItem,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkUpdateInventoryItemsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                inventoryItem: '$[1].inventoryItem',
                search: '$[1].search',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes an inventory item.
 * @param inventoryItemId - Inventory item ID.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItemId
 * @permissionId WIX_STORES.INVENTORY_DELETE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.DeleteInventoryItem
 */
export async function deleteInventoryItem(inventoryItemId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItemId: inventoryItemId,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.deleteInventoryItem(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { inventoryItemId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['inventoryItemId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes multiple inventory items.
 * @param inventoryItemIds - IDs of inventory items to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField inventoryItemIds
 * @permissionId WIX_STORES.INVENTORY_DELETE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDeleteInventoryItems
 */
export async function bulkDeleteInventoryItems(inventoryItemIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItemIds: inventoryItemIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkDeleteInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { inventoryItemIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['inventoryItemIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read inventory in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.INVENTORY_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.QueryInventoryItems
 */
export function queryInventoryItems() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.queryInventoryItems(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.inventoryItems,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
 *
 *
 * Search Inventory Items runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_STORES.INVENTORY_READ
 * @permissionScope Read inventory in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.SearchInventoryItems
 */
export async function searchInventoryItems(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.searchInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { search: '$[0].search' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Decrements quantities of multiple inventory items.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 * @param decrementData - Inventory item IDs and decrement data.
 * @public
 * @documentationMaturity preview
 * @requiredField decrementData
 * @requiredField decrementData.decrementBy
 * @requiredField decrementData.inventoryItemId
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItems
 */
export async function bulkDecrementInventoryItems(decrementData, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        decrementData: decrementData,
        restrictInventory: options?.restrictInventory,
        returnEntity: options?.returnEntity,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkDecrementInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                decrementData: '$[0]',
                restrictInventory: '$[1].restrictInventory',
                returnEntity: '$[1].returnEntity',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['decrementData', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Increments quantities of multiple inventory items.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 * @param incrementData - Inventory item IDs and increment data.
 * @public
 * @documentationMaturity preview
 * @requiredField incrementData
 * @requiredField incrementData.incrementBy
 * @requiredField incrementData.inventoryItemId
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItems
 */
export async function bulkIncrementInventoryItems(incrementData, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        incrementData: incrementData,
        returnEntity: options?.returnEntity,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkIncrementInventoryItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                incrementData: '$[0]',
                returnEntity: '$[1].returnEntity',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['incrementData', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Decrements quantities of multiple inventory items by variant and location.
 *
 * > **Notes:**:
 * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
 * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
 * > + Pass `restrictInventory: false` to allow for negative quantities.
 * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
 * @param decrementData - Variant and location IDs, as well as decrement data.
 * @public
 * @documentationMaturity preview
 * @requiredField decrementData
 * @requiredField decrementData.decrementBy
 * @requiredField decrementData.variantId
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkDecrementInventoryItemsByVariantAndLocation
 */
export async function bulkDecrementInventoryItemsByVariantAndLocation(decrementData, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        decrementData: decrementData,
        restrictInventory: options?.restrictInventory,
        returnEntity: options?.returnEntity,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkDecrementInventoryItemsByVariantAndLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                decrementData: '$[0]',
                restrictInventory: '$[1].restrictInventory',
                returnEntity: '$[1].returnEntity',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['decrementData', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Increments quantities of multiple inventory items by variant and location.
 *
 * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
 * @param incrementData - Variant and location IDs, as well as increment data.
 * @public
 * @documentationMaturity preview
 * @requiredField incrementData
 * @requiredField incrementData.incrementBy
 * @requiredField incrementData.variantId
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkIncrementInventoryItemsByVariantAndLocation
 */
export async function bulkIncrementInventoryItemsByVariantAndLocation(incrementData, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        incrementData: incrementData,
        returnEntity: options?.returnEntity,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkIncrementInventoryItemsByVariantAndLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                incrementData: '$[0]',
                returnEntity: '$[1].returnEntity',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['incrementData', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Set or Adjust inventory items which satisfy the provided filter.
 * If item track quantity, adjust it's quantity,
 * In case non-tracking, updates it to track and sets quantity to `incrementBy` or `decrementBy`.
 * @param filter - Filter object in the following format:
 * `"filter" : {
 * "fieldName1": "value1",
 * "fieldName2":{"$operator":"value2"}
 * }`
 * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
 * @internal
 * @documentationMaturity preview
 * @requiredField filter
 * @requiredField options.adjustedInventoryAction
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.inventory.api.v3.InventoryService.BulkSetOrAdjustInventoryItemsByFilter
 */
export async function bulkSetOrAdjustInventoryItemsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        adjustedInventoryAction: options?.adjustedInventoryAction,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InventoryItem.bulkSetOrAdjustInventoryItemsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                adjustedInventoryAction: '$[1].adjustedInventoryAction',
                search: '$[1].search',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-catalog-v3-inventory-item-inventory-items-v-3.universal.js.map