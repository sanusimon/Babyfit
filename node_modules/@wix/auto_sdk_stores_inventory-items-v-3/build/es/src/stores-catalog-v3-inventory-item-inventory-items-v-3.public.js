import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { bulkCreateInventoryItems as universalBulkCreateInventoryItems, bulkDecrementInventoryItems as universalBulkDecrementInventoryItems, bulkDecrementInventoryItemsByVariantAndLocation as universalBulkDecrementInventoryItemsByVariantAndLocation, bulkDeleteInventoryItems as universalBulkDeleteInventoryItems, bulkIncrementInventoryItems as universalBulkIncrementInventoryItems, bulkIncrementInventoryItemsByVariantAndLocation as universalBulkIncrementInventoryItemsByVariantAndLocation, bulkSetOrAdjustInventoryItemsByFilter as universalBulkSetOrAdjustInventoryItemsByFilter, bulkUpdateInventoryItems as universalBulkUpdateInventoryItems, bulkUpdateInventoryItemsByFilter as universalBulkUpdateInventoryItemsByFilter, createInventoryItem as universalCreateInventoryItem, deleteInventoryItem as universalDeleteInventoryItem, getInventoryItem as universalGetInventoryItem, queryInventoryItems as universalQueryInventoryItems, searchInventoryItems as universalSearchInventoryItems, updateInventoryItem as universalUpdateInventoryItem, } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/stores' };
export function createInventoryItem(httpClient) {
    return (inventoryItem) => universalCreateInventoryItem(inventoryItem, 
    // @ts-ignore
    { httpClient });
}
export function bulkCreateInventoryItems(httpClient) {
    return (inventoryItems, options) => universalBulkCreateInventoryItems(inventoryItems, options, 
    // @ts-ignore
    { httpClient });
}
export function getInventoryItem(httpClient) {
    return (inventoryItemId) => universalGetInventoryItem(inventoryItemId, 
    // @ts-ignore
    { httpClient });
}
export function updateInventoryItem(httpClient) {
    return (_id, inventoryItem, options) => universalUpdateInventoryItem(_id, inventoryItem, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateInventoryItems(httpClient) {
    return (inventoryItems, options) => universalBulkUpdateInventoryItems(inventoryItems, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateInventoryItemsByFilter(httpClient) {
    return (filter, options) => universalBulkUpdateInventoryItemsByFilter(filter, options, 
    // @ts-ignore
    { httpClient });
}
export function deleteInventoryItem(httpClient) {
    return (inventoryItemId) => universalDeleteInventoryItem(inventoryItemId, 
    // @ts-ignore
    { httpClient });
}
export function bulkDeleteInventoryItems(httpClient) {
    return (inventoryItemIds) => universalBulkDeleteInventoryItems(inventoryItemIds, 
    // @ts-ignore
    { httpClient });
}
export function queryInventoryItems(httpClient) {
    return () => universalQueryInventoryItems(
    // @ts-ignore
    { httpClient });
}
export function searchInventoryItems(httpClient) {
    return (options) => universalSearchInventoryItems(options, 
    // @ts-ignore
    { httpClient });
}
export function bulkDecrementInventoryItems(httpClient) {
    return (decrementData, options) => universalBulkDecrementInventoryItems(decrementData, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkIncrementInventoryItems(httpClient) {
    return (incrementData, options) => universalBulkIncrementInventoryItems(incrementData, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkDecrementInventoryItemsByVariantAndLocation(httpClient) {
    return (decrementData, options) => universalBulkDecrementInventoryItemsByVariantAndLocation(decrementData, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkIncrementInventoryItemsByVariantAndLocation(httpClient) {
    return (incrementData, options) => universalBulkIncrementInventoryItemsByVariantAndLocation(incrementData, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function bulkSetOrAdjustInventoryItemsByFilter(httpClient) {
    return (filter, options) => universalBulkSetOrAdjustInventoryItemsByFilter(filter, options, 
    // @ts-ignore
    { httpClient });
}
export const onInventoryItemCreated = EventDefinition('wix.stores.catalog.v3.inventory_item_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'metadata.eventTime' },
        ],
    },
])))();
export const onInventoryItemDeleted = EventDefinition('wix.stores.catalog.v3.inventory_item_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'metadata.eventTime' },
        ],
    },
])))();
export const onInventoryItemStockStatusUpdated = EventDefinition('wix.stores.catalog.v3.inventory_item_stock_status_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
])))();
export const onInventoryItemUpdated = EventDefinition('wix.stores.catalog.v3.inventory_item_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'metadata.eventTime' },
        ],
    },
])))();
export const onInventoryItemUpdatedWithReason = EventDefinition('wix.stores.catalog.v3.inventory_item_updated_with_reason', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.currentEntity.createdDate' },
            { path: 'data.currentEntity.updatedDate' },
            { path: 'metadata.eventTime' },
        ],
    },
])))();
export { AggregationType, AvailabilityStatus, Interval, MissingValues, Mode, NestedAggregationType, ReasonType, ScalarType, SortDirection, SortOrder, SortType, WebhookIdentityType, } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal.js';
//# sourceMappingURL=stores-catalog-v3-inventory-item-inventory-items-v-3.public.js.map