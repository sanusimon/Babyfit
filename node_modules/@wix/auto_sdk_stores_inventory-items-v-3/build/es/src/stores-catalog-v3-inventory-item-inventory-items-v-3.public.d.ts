import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { BulkCreateInventoryItemsOptions, BulkCreateInventoryItemsResponse, BulkCreateInventoryItemsResponseNonNullableFields, BulkDecrementInventoryItemsByVariantAndLocationOptions, BulkDecrementInventoryItemsByVariantAndLocationResponse, BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkDecrementInventoryItemsOptions, BulkDecrementInventoryItemsResponse, BulkDecrementInventoryItemsResponseNonNullableFields, BulkDeleteInventoryItemsResponse, BulkDeleteInventoryItemsResponseNonNullableFields, BulkIncrementInventoryItemsByVariantAndLocationOptions, BulkIncrementInventoryItemsByVariantAndLocationResponse, BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkIncrementInventoryItemsOptions, BulkIncrementInventoryItemsResponse, BulkIncrementInventoryItemsResponseNonNullableFields, BulkUpdateInventoryItemsByFilterOptions, BulkUpdateInventoryItemsByFilterResponse, BulkUpdateInventoryItemsByFilterResponseNonNullableFields, BulkUpdateInventoryItemsOptions, BulkUpdateInventoryItemsResponse, BulkUpdateInventoryItemsResponseNonNullableFields, DecrementDataById, DecrementDataByVariantAndLocation, IncrementDataById, IncrementDataByVariantAndLocation, InventoryItem, InventoryItemCreatedEnvelope, InventoryItemDeletedEnvelope, InventoryItemNonNullableFields, InventoryItemStockStatusUpdatedEnvelope, InventoryItemUpdatedEnvelope, InventoryItemUpdatedWithReasonEnvelope, InventoryItemsQueryBuilder, MaskedInventoryItem, SearchInventoryItemsOptions, SearchInventoryItemsResponse, SearchInventoryItemsResponseNonNullableFields, UpdateInventoryItem, UpdateInventoryItemOptions } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createInventoryItem(httpClient: HttpClient): CreateInventoryItemSignature;
interface CreateInventoryItemSignature {
    /**
     * Creates an inventory item.
     * The combination of `variantId` and `locationId` is unique.
     * @param - Inventory item to create.
     * @returns Created inventory item.
     */
    (inventoryItem: InventoryItem): Promise<InventoryItem & InventoryItemNonNullableFields>;
}
export declare function bulkCreateInventoryItems(httpClient: HttpClient): BulkCreateInventoryItemsSignature;
interface BulkCreateInventoryItemsSignature {
    /**
     * Creates multiple inventory items.
     * @param - Inventory items to create.
     */
    (inventoryItems: InventoryItem[], options?: BulkCreateInventoryItemsOptions | undefined): Promise<BulkCreateInventoryItemsResponse & BulkCreateInventoryItemsResponseNonNullableFields>;
}
export declare function getInventoryItem(httpClient: HttpClient): GetInventoryItemSignature;
interface GetInventoryItemSignature {
    /**
     * Retrieves an inventory item.
     * @param - Inventory item ID.
     * @returns Inventory item.
     */
    (inventoryItemId: string): Promise<InventoryItem & InventoryItemNonNullableFields>;
}
export declare function updateInventoryItem(httpClient: HttpClient): UpdateInventoryItemSignature;
interface UpdateInventoryItemSignature {
    /**
     * Updates an inventory item.
     *
     *
     * Each time the inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory item ID.
     * @returns Updated inventory item.
     */
    (_id: string | null, inventoryItem: UpdateInventoryItem, options?: UpdateInventoryItemOptions | undefined): Promise<InventoryItem & InventoryItemNonNullableFields>;
}
export declare function bulkUpdateInventoryItems(httpClient: HttpClient): BulkUpdateInventoryItemsSignature;
interface BulkUpdateInventoryItemsSignature {
    /**
     * Updates multiple inventory items.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Inventory items to update.
     */
    (inventoryItems: MaskedInventoryItem[], options?: BulkUpdateInventoryItemsOptions | undefined): Promise<BulkUpdateInventoryItemsResponse & BulkUpdateInventoryItemsResponseNonNullableFields>;
}
export declare function bulkUpdateInventoryItemsByFilter(httpClient: HttpClient): BulkUpdateInventoryItemsByFilterSignature;
interface BulkUpdateInventoryItemsByFilterSignature {
    /**
     * Updates multiple inventory items, given the provided filter.
     *
     * Each time an inventory item is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating an inventory item.
     * This ensures you're working with the latest inventory item and prevents unintended overwrites.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkUpdateInventoryItemsByFilterOptions | undefined): Promise<BulkUpdateInventoryItemsByFilterResponse & BulkUpdateInventoryItemsByFilterResponseNonNullableFields>;
}
export declare function deleteInventoryItem(httpClient: HttpClient): DeleteInventoryItemSignature;
interface DeleteInventoryItemSignature {
    /**
     * Deletes an inventory item.
     * @param - Inventory item ID.
     */
    (inventoryItemId: string): Promise<void>;
}
export declare function bulkDeleteInventoryItems(httpClient: HttpClient): BulkDeleteInventoryItemsSignature;
interface BulkDeleteInventoryItemsSignature {
    /**
     * Deletes multiple inventory items.
     * @param - IDs of inventory items to delete.
     */
    (inventoryItemIds: string[]): Promise<BulkDeleteInventoryItemsResponse & BulkDeleteInventoryItemsResponseNonNullableFields>;
}
export declare function queryInventoryItems(httpClient: HttpClient): QueryInventoryItemsSignature;
interface QueryInventoryItemsSignature {
    /**
     * Retrieves a list of up to 1,000 inventory items, given the provided filtering, sorting, and cursor paging.
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (): InventoryItemsQueryBuilder;
}
export declare function searchInventoryItems(httpClient: HttpClient): SearchInventoryItemsSignature;
interface SearchInventoryItemsSignature {
    /**
     * Retrieves a list of inventory items, given the provided filtering, sorting, and cursor paging.
     *
     *
     * Search Inventory Items runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Inventory Items: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/inventory-items-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: SearchInventoryItemsOptions | undefined): Promise<SearchInventoryItemsResponse & SearchInventoryItemsResponseNonNullableFields>;
}
export declare function bulkDecrementInventoryItems(httpClient: HttpClient): BulkDecrementInventoryItemsSignature;
interface BulkDecrementInventoryItemsSignature {
    /**
     * Decrements quantities of multiple inventory items.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Inventory item IDs and decrement data.
     */
    (decrementData: DecrementDataById[], options?: BulkDecrementInventoryItemsOptions | undefined): Promise<BulkDecrementInventoryItemsResponse & BulkDecrementInventoryItemsResponseNonNullableFields>;
}
export declare function bulkIncrementInventoryItems(httpClient: HttpClient): BulkIncrementInventoryItemsSignature;
interface BulkIncrementInventoryItemsSignature {
    /**
     * Increments quantities of multiple inventory items.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Inventory item IDs and increment data.
     */
    (incrementData: IncrementDataById[], options?: BulkIncrementInventoryItemsOptions | undefined): Promise<BulkIncrementInventoryItemsResponse & BulkIncrementInventoryItemsResponseNonNullableFields>;
}
export declare function bulkDecrementInventoryItemsByVariantAndLocation(httpClient: HttpClient): BulkDecrementInventoryItemsByVariantAndLocationSignature;
interface BulkDecrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Decrements quantities of multiple inventory items by variant and location.
     *
     * > **Notes:**:
     * > + `trackQuantity` must be `true` to allow for decrementing the quantity.
     * > + If you pass `restrictInventory: true` and the `decrementData.decrementBy` amount is greater than the current quantity in stock, the request will fail with an `INSUFFICIENT_INVENTORY` error.
     * > + Pass `restrictInventory: false` to allow for negative quantities.
     * > + If you pass `preorderRequest: true` and the item is available for preorder, the item's `preorderCounter` will increase and the item's quantity will stay the same.
     * @param - Variant and location IDs, as well as decrement data.
     */
    (decrementData: DecrementDataByVariantAndLocation[], options?: BulkDecrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkDecrementInventoryItemsByVariantAndLocationResponse & BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields>;
}
export declare function bulkIncrementInventoryItemsByVariantAndLocation(httpClient: HttpClient): BulkIncrementInventoryItemsByVariantAndLocationSignature;
interface BulkIncrementInventoryItemsByVariantAndLocationSignature {
    /**
     * Increments quantities of multiple inventory items by variant and location.
     *
     * > **Note:** `trackQuantity` must be `true` to allow for incrementing the quantity.
     * @param - Variant and location IDs, as well as increment data.
     */
    (incrementData: IncrementDataByVariantAndLocation[], options?: BulkIncrementInventoryItemsByVariantAndLocationOptions | undefined): Promise<BulkIncrementInventoryItemsByVariantAndLocationResponse & BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields>;
}
export declare const onInventoryItemCreated: EventDefinition<InventoryItemCreatedEnvelope, "wix.stores.catalog.v3.inventory_item_created">;
export declare const onInventoryItemDeleted: EventDefinition<InventoryItemDeletedEnvelope, "wix.stores.catalog.v3.inventory_item_deleted">;
export declare const onInventoryItemStockStatusUpdated: EventDefinition<InventoryItemStockStatusUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_stock_status_updated">;
export declare const onInventoryItemUpdated: EventDefinition<InventoryItemUpdatedEnvelope, "wix.stores.catalog.v3.inventory_item_updated">;
export declare const onInventoryItemUpdatedWithReason: EventDefinition<InventoryItemUpdatedWithReasonEnvelope, "wix.stores.catalog.v3.inventory_item_updated_with_reason">;
export { ActionEvent, AdjustInventoryAction, AdjustInventoryActionActionOneOf, Aggregation, AggregationData, AggregationKindOneOf, AggregationResults, AggregationResultsResultOneOf, AggregationResultsScalarResult, AggregationType, App, ApplicationError, AvailabilityStatus, BaseEventMetadata, BulkActionMetadata, BulkCreateInventoryItemsOptions, BulkCreateInventoryItemsRequest, BulkCreateInventoryItemsResponse, BulkCreateInventoryItemsResponseNonNullableFields, BulkDecrementInventoryItemsByVariantAndLocationOptions, BulkDecrementInventoryItemsByVariantAndLocationRequest, BulkDecrementInventoryItemsByVariantAndLocationResponse, BulkDecrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkDecrementInventoryItemsOptions, BulkDecrementInventoryItemsRequest, BulkDecrementInventoryItemsResponse, BulkDecrementInventoryItemsResponseNonNullableFields, BulkDeleteInventoryItemsRequest, BulkDeleteInventoryItemsResponse, BulkDeleteInventoryItemsResponseNonNullableFields, BulkIncrementInventoryItemsByVariantAndLocationOptions, BulkIncrementInventoryItemsByVariantAndLocationRequest, BulkIncrementInventoryItemsByVariantAndLocationResponse, BulkIncrementInventoryItemsByVariantAndLocationResponseNonNullableFields, BulkIncrementInventoryItemsOptions, BulkIncrementInventoryItemsRequest, BulkIncrementInventoryItemsResponse, BulkIncrementInventoryItemsResponseNonNullableFields, BulkInventoryItemAction, BulkInventoryItemResult, BulkSetOrAdjustInventoryItemsByFilterOptions, BulkSetOrAdjustInventoryItemsByFilterRequest, BulkSetOrAdjustInventoryItemsByFilterResponse, BulkSetOrAdjustInventoryItemsByFilterResponseNonNullableFields, BulkUpdateInventoryItemsByFilterOptions, BulkUpdateInventoryItemsByFilterRequest, BulkUpdateInventoryItemsByFilterResponse, BulkUpdateInventoryItemsByFilterResponseNonNullableFields, BulkUpdateInventoryItemsOptions, BulkUpdateInventoryItemsRequest, BulkUpdateInventoryItemsResponse, BulkUpdateInventoryItemsResponseNonNullableFields, CommonCursors, CreateInventoryItemRequest, CreateInventoryItemResponse, CreateInventoryItemResponseNonNullableFields, CursorPaging, CursorPagingMetadata, CursorSearch, CursorSearchPagingMethodOneOf, Cursors, DateHistogramAggregation, DateHistogramResult, DateHistogramResults, DecrementDataById, DecrementDataByVariantAndLocation, DeleteInventoryItemRequest, DeleteInventoryItemResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, File, GetInventoryItemRequest, GetInventoryItemResponse, GetInventoryItemResponseNonNullableFields, GroupByAggregation, GroupByAggregationKindOneOf, GroupByValueResults, IdentificationData, IdentificationDataIdOneOf, IncludeMissingValuesOptions, IncrementDataById, IncrementDataByVariantAndLocation, Interval, InvalidateCache, InvalidateCacheGetByOneOf, InventoryItem, InventoryItemCreatedEnvelope, InventoryItemDeletedEnvelope, InventoryItemNonNullableFields, InventoryItemStockStatusUpdatedEnvelope, InventoryItemStockStatusUpdatedEvent, InventoryItemTrackingMethodOneOf, InventoryItemUpdatedEnvelope, InventoryItemUpdatedWithReason, InventoryItemUpdatedWithReasonEnvelope, InventoryItemsQueryBuilder, InventoryItemsQueryResult, ItemMetadata, MaskedInventoryItem, MessageEnvelope, MissingValues, Mode, NestedAggregation, NestedAggregationItem, NestedAggregationItemKindOneOf, NestedAggregationResults, NestedAggregationResultsResultOneOf, NestedAggregationType, NestedResultValue, NestedResultValueResultOneOf, NestedResults, NestedValueAggregationResult, OffsetSearch, OffsetSearchPagingMethodOneOf, Page, Paging, PagingMetadata, PlatformPagingMetadataV2, PreorderInfo, Product, QueryInventoryItemsRequest, QueryInventoryItemsResponse, QueryInventoryItemsResponseNonNullableFields, QueryV2, QueryV2PagingMethodOneOf, RangeAggregation, RangeAggregationResult, RangeBucket, RangeResult, RangeResults, ReasonType, RestoreInfo, Results, ScalarAggregation, ScalarResult, ScalarType, SearchDetails, SearchInventoryItemsOptions, SearchInventoryItemsRequest, SearchInventoryItemsResponse, SearchInventoryItemsResponseNonNullableFields, SearchInventoryItemsWithOffsetRequest, SearchInventoryItemsWithOffsetResponse, SortDirection, SortOrder, SortType, Sorting, URI, UpdateInventoryItem, UpdateInventoryItemOptions, UpdateInventoryItemRequest, UpdateInventoryItemResponse, UpdateInventoryItemResponseNonNullableFields, V3BulkInventoryItemResult, ValueAggregation, ValueAggregationOptionsOneOf, ValueAggregationResult, ValueResult, ValueResults, WebhookIdentityType, } from './stores-catalog-v3-inventory-item-inventory-items-v-3.universal.js';
