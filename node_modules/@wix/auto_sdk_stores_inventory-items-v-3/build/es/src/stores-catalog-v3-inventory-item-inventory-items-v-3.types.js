export var AvailabilityStatus;
(function (AvailabilityStatus) {
    AvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** Product is out of stock. */
    AvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    AvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    AvailabilityStatus["PREORDER"] = "PREORDER";
})(AvailabilityStatus || (AvailabilityStatus = {}));
/** The reason for the inventory change. */
export var ReasonType;
(function (ReasonType) {
    ReasonType["UNKNOWN"] = "UNKNOWN";
    ReasonType["ORDER"] = "ORDER";
    ReasonType["MANUAL"] = "MANUAL";
    ReasonType["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
})(ReasonType || (ReasonType = {}));
export var Mode;
(function (Mode) {
    /** Any of the search terms must be present. */
    Mode["OR"] = "OR";
    /** All search terms must be present. */
    Mode["AND"] = "AND";
})(Mode || (Mode = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var SortType;
(function (SortType) {
    /** Sort by number of matches. */
    SortType["COUNT"] = "COUNT";
    /** Sort by value of the field alphabetically. */
    SortType["VALUE"] = "VALUE";
})(SortType || (SortType = {}));
export var SortDirection;
(function (SortDirection) {
    /** Sort in descending order. */
    SortDirection["DESC"] = "DESC";
    /** Sort in ascending order. */
    SortDirection["ASC"] = "ASC";
})(SortDirection || (SortDirection = {}));
export var MissingValues;
(function (MissingValues) {
    /** Exclude missing values from the aggregation results. */
    MissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values in the aggregation results. */
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (MissingValues = {}));
export var ScalarType;
(function (ScalarType) {
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    ScalarType["MIN"] = "MIN";
    /** Maximum value. */
    ScalarType["MAX"] = "MAX";
})(ScalarType || (ScalarType = {}));
export var NestedAggregationType;
(function (NestedAggregationType) {
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    NestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    NestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (NestedAggregationType = {}));
export var Interval;
(function (Interval) {
    Interval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    Interval["YEAR"] = "YEAR";
    /** Monthly interval */
    Interval["MONTH"] = "MONTH";
    /** Weekly interval */
    Interval["WEEK"] = "WEEK";
    /** Daily interval */
    Interval["DAY"] = "DAY";
    /** Hourly interval */
    Interval["HOUR"] = "HOUR";
    /** Minute interval */
    Interval["MINUTE"] = "MINUTE";
    /** Second interval */
    Interval["SECOND"] = "SECOND";
})(Interval || (Interval = {}));
export var AggregationType;
(function (AggregationType) {
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    AggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    AggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    AggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (AggregationType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
//# sourceMappingURL=stores-catalog-v3-inventory-item-inventory-items-v-3.types.js.map