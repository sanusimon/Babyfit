import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addActivity as universalAddActivity, aggregateOrders as universalAggregateOrders, bulkUpdateOrderTags as universalBulkUpdateOrderTags, bulkUpdateOrders as universalBulkUpdateOrders, cancelOrder as universalCancelOrder, captureAuthorizedPayments as universalCaptureAuthorizedPayments, chargeMemberships as universalChargeMemberships, commitDeltas as universalCommitDeltas, createOrder as universalCreateOrder, deleteActivity as universalDeleteActivity, getOrder as universalGetOrder, getPaymentCollectabilityStatus as universalGetPaymentCollectabilityStatus, getRefundabilityStatus as universalGetRefundabilityStatus, paymentCollectionBulkMarkOrdersAsPaid as universalPaymentCollectionBulkMarkOrdersAsPaid, paymentCollectionCreatePaymentGatewayOrder as universalPaymentCollectionCreatePaymentGatewayOrder, paymentCollectionMarkOrderAsPaid as universalPaymentCollectionMarkOrderAsPaid, preparePaymentCollection as universalPreparePaymentCollection, recordManuallyCollectedPayment as universalRecordManuallyCollectedPayment, searchOrders as universalSearchOrders, triggerRefund as universalTriggerRefund, updateActivity as universalUpdateActivity, updateOrder as universalUpdateOrder, updateOrderLineItem as universalUpdateOrderLineItem, updateOrderStatus as universalUpdateOrderStatus, voidAuthorizedPayments as universalVoidAuthorizedPayments, } from './ecom-v1-order-orders.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/ecom' };
export function preparePaymentCollection(httpClient) {
    return (ecomOrderId, amount, options) => universalPreparePaymentCollection(ecomOrderId, amount, options, 
    // @ts-ignore
    { httpClient });
}
export function getPaymentCollectabilityStatus(httpClient) {
    return (ecomOrderId) => universalGetPaymentCollectabilityStatus(ecomOrderId, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function recordManuallyCollectedPayment(httpClient) {
    return (orderId, amount) => universalRecordManuallyCollectedPayment(orderId, amount, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function paymentCollectionMarkOrderAsPaid(httpClient) {
    return (ecomOrderId) => universalPaymentCollectionMarkOrderAsPaid(ecomOrderId, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function paymentCollectionBulkMarkOrdersAsPaid(httpClient) {
    return (ecomOrderIds) => universalPaymentCollectionBulkMarkOrdersAsPaid(ecomOrderIds, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function getRefundabilityStatus(httpClient) {
    return (ecomOrderId) => universalGetRefundabilityStatus(ecomOrderId, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function paymentCollectionCreatePaymentGatewayOrder(httpClient) {
    return (ecomOrderId, options) => universalPaymentCollectionCreatePaymentGatewayOrder(ecomOrderId, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function chargeMemberships(httpClient) {
    return (ecomOrderId, memberId, options) => universalChargeMemberships(ecomOrderId, memberId, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function triggerRefund(httpClient) {
    return (ecomOrderId, payments, options) => universalTriggerRefund(ecomOrderId, payments, options, 
    // @ts-ignore
    { httpClient });
}
export function voidAuthorizedPayments(httpClient) {
    return (ecomOrderId, paymentIds) => universalVoidAuthorizedPayments(ecomOrderId, paymentIds, 
    // @ts-ignore
    { httpClient });
}
export function captureAuthorizedPayments(httpClient) {
    return (ecomOrderId, payments) => universalCaptureAuthorizedPayments(ecomOrderId, payments, 
    // @ts-ignore
    { httpClient });
}
export function getOrder(httpClient) {
    return (_id) => universalGetOrder(_id, 
    // @ts-ignore
    { httpClient });
}
export function searchOrders(httpClient) {
    return (options) => universalSearchOrders(options, 
    // @ts-ignore
    { httpClient });
}
export function createOrder(httpClient) {
    return (order, options) => universalCreateOrder(order, options, 
    // @ts-ignore
    { httpClient });
}
export function updateOrder(httpClient) {
    return (_id, order) => universalUpdateOrder(_id, order, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateOrders(httpClient) {
    return (orders, options) => universalBulkUpdateOrders(orders, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function commitDeltas(httpClient) {
    return (_id, options) => universalCommitDeltas(_id, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function updateOrderLineItem(httpClient) {
    return (identifiers, lineItem) => universalUpdateOrderLineItem(identifiers, lineItem, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function addActivity(httpClient) {
    return (_id, activity) => universalAddActivity(_id, activity, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function updateActivity(httpClient) {
    return (identifiers, activity) => universalUpdateActivity(identifiers, activity, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function deleteActivity(httpClient) {
    return (identifiers) => universalDeleteActivity(identifiers, 
    // @ts-ignore
    { httpClient });
}
export function cancelOrder(httpClient) {
    return (_id, options) => universalCancelOrder(_id, options, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function updateOrderStatus(httpClient) {
    return (orderId, status) => universalUpdateOrderStatus(orderId, status, 
    // @ts-ignore
    { httpClient });
}
/** @internal */
export function aggregateOrders(httpClient) {
    return (options) => universalAggregateOrders(options, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateOrderTags(httpClient) {
    return (orderIds, options) => universalBulkUpdateOrderTags(orderIds, options, 
    // @ts-ignore
    { httpClient });
}
export const onOrderApproved = EventDefinition('wix.ecom.v1.order_approved', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.order.createdDate' },
            { path: 'data.order.updatedDate' },
            { path: 'data.order.purchasedDate' },
            { path: 'data.order.lineItems.digitalFile.expirationDate' },
            {
                path: 'data.order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
            },
            { path: 'data.order.shippingInfo.logistics.deliverByDate' },
            { path: 'data.order.shippingInfo.logistics.deliveryTimeSlot.from' },
            { path: 'data.order.shippingInfo.logistics.deliveryTimeSlot.to' },
            { path: 'data.order.activities.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [{ path: 'data.order.lineItems.image' }],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [{ path: 'data.order.lineItems.physicalProperties.weight' }],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'data.order.billingInfo.address' },
            {
                path: 'data.order.shippingInfo.logistics.shippingDestination.address',
            },
            { path: 'data.order.shippingInfo.logistics.pickupDetails.address' },
            { path: 'data.order.recipientInfo.address' },
        ],
    },
])))();
export const onOrderUpdated = EventDefinition('wix.ecom.v1.order_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.purchasedDate' },
            { path: 'entity.lineItems.digitalFile.expirationDate' },
            {
                path: 'entity.lineItems.subscriptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.shippingInfo.logistics.deliverByDate' },
            { path: 'entity.shippingInfo.logistics.deliveryTimeSlot.from' },
            { path: 'entity.shippingInfo.logistics.deliveryTimeSlot.to' },
            { path: 'entity.activities.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [{ path: 'entity.lineItems.image' }],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [{ path: 'entity.lineItems.physicalProperties.weight' }],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.billingInfo.address' },
            {
                path: 'entity.shippingInfo.logistics.shippingDestination.address',
            },
            { path: 'entity.shippingInfo.logistics.pickupDetails.address' },
            { path: 'entity.recipientInfo.address' },
        ],
    },
])))();
export const onOrderCanceled = EventDefinition('wix.ecom.v1.order_canceled', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.order.createdDate' },
            { path: 'data.order.updatedDate' },
            { path: 'data.order.purchasedDate' },
            { path: 'data.order.lineItems.digitalFile.expirationDate' },
            {
                path: 'data.order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
            },
            { path: 'data.order.shippingInfo.logistics.deliverByDate' },
            { path: 'data.order.shippingInfo.logistics.deliveryTimeSlot.from' },
            { path: 'data.order.shippingInfo.logistics.deliveryTimeSlot.to' },
            { path: 'data.order.activities.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [{ path: 'data.order.lineItems.image' }],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [{ path: 'data.order.lineItems.physicalProperties.weight' }],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'data.order.billingInfo.address' },
            {
                path: 'data.order.shippingInfo.logistics.shippingDestination.address',
            },
            { path: 'data.order.shippingInfo.logistics.pickupDetails.address' },
            { path: 'data.order.recipientInfo.address' },
        ],
    },
])))();
export const onOrderCreated = EventDefinition('wix.ecom.v1.order_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.purchasedDate' },
            { path: 'entity.lineItems.digitalFile.expirationDate' },
            {
                path: 'entity.lineItems.subscriptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.shippingInfo.logistics.deliverByDate' },
            { path: 'entity.shippingInfo.logistics.deliveryTimeSlot.from' },
            { path: 'entity.shippingInfo.logistics.deliveryTimeSlot.to' },
            { path: 'entity.activities.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [{ path: 'entity.lineItems.image' }],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [{ path: 'entity.lineItems.physicalProperties.weight' }],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.billingInfo.address' },
            {
                path: 'entity.shippingInfo.logistics.shippingDestination.address',
            },
            { path: 'entity.shippingInfo.logistics.pickupDetails.address' },
            { path: 'entity.recipientInfo.address' },
        ],
    },
])))();
export { ActionType, ActivityType, AttributionSource, AuthorizationCaptureStatus, AuthorizationVoidStatus, ChannelType, CustomFieldGroup, DeltaPaymentOptionType, DepositType, DescriptionLineType, DiscountReason, DiscountType, DurationUnit, FulfillmentStatus, InventoryAction, InvoiceStatus, ItemTypeItemType, JurisdictionType, LineItemQuantityChangeType, ManuallyRefundableReason, MembershipPaymentStatus, Namespace, NonRefundableReason, OrderApprovalStrategy, OrderStatus, PaymentCollectabilityStatus, PaymentOptionType, PaymentStatus, PickupMethod, Placement, PreviewEmailType, Reason, RefundStatus, RefundableStatus, RestockType, ScheduledAction, SortOrder, SourceType, State, SubdivisionType, SubscriptionFrequency, TaxableAddressType, TransactionStatus, ValueType, VatType, VersioningMode, WebhookIdentityType, WeightUnit, } from './ecom-v1-order-orders.universal.js';
//# sourceMappingURL=ecom-v1-order-orders.public.js.map