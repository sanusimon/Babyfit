import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddActivityResponse, AddActivityResponseNonNullableFields, AggregateOrdersOptions, AggregateOrdersResponse, BulkMarkOrdersAsPaidResponse, BulkMarkOrdersAsPaidResponseNonNullableFields, BulkUpdateOrderTagsOptions, BulkUpdateOrderTagsResponse, BulkUpdateOrderTagsResponseNonNullableFields, BulkUpdateOrdersOptions, BulkUpdateOrdersResponse, BulkUpdateOrdersResponseNonNullableFields, CancelOrderOptions, CancelOrderResponse, CancelOrderResponseNonNullableFields, CaptureAuthorizedPaymentsResponse, CaptureAuthorizedPaymentsResponseNonNullableFields, ChargeMembershipsOptions, CommitDeltasOptions, CommitDeltasResponse, CommitDeltasResponseNonNullableFields, CreateOrderOptions, CreatePaymentGatewayOrderResponse, CreatePaymentGatewayOrderResponseNonNullableFields, DeleteActivityIdentifiers, DeleteActivityResponse, DeleteActivityResponseNonNullableFields, GetPaymentCollectabilityStatusResponse, GetPaymentCollectabilityStatusResponseNonNullableFields, GetRefundabilityStatusResponse, GetRefundabilityStatusResponseNonNullableFields, MarkOrderAsPaidResponse, MarkOrderAsPaidResponseNonNullableFields, MaskedOrder, Order, OrderApprovedEnvelope, OrderCanceledEnvelope, OrderCreatedEnvelope, OrderNonNullableFields, OrderStatus, OrderUpdatedEnvelope, PaymentCapture, PaymentCollectionCreatePaymentGatewayOrderOptions, PaymentRefund, PreparePaymentCollectionOptions, PreparePaymentCollectionResponse, PreparePaymentCollectionResponseNonNullableFields, Price, PublicActivity, SearchOrdersOptions, SearchOrdersResponse, SearchOrdersResponseNonNullableFields, TriggerRefundOptions, TriggerRefundResponse, TriggerRefundResponseNonNullableFields, UpdateActivityIdentifiers, UpdateActivityResponse, UpdateActivityResponseNonNullableFields, UpdateOrder, UpdateOrderLineItem, UpdateOrderLineItemIdentifiers, UpdateOrderLineItemResponse, UpdateOrderLineItemResponseNonNullableFields, UpdateOrderStatusResponse, UpdateOrderStatusResponseNonNullableFields, VoidAuthorizedPaymentsResponse, VoidAuthorizedPaymentsResponseNonNullableFields } from './ecom-v1-order-orders.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function preparePaymentCollection(httpClient: HttpClient): PreparePaymentCollectionSignature;
interface PreparePaymentCollectionSignature {
    /**
     * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
     * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
     * 2nd step is an actual charge of prepared payment gateway order. This could be done either
     * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
     * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
     * @param - Ecom order ID.
     * @param - Amount to collect
     */
    (ecomOrderId: string, amount: Price, options?: PreparePaymentCollectionOptions | undefined): Promise<PreparePaymentCollectionResponse & PreparePaymentCollectionResponseNonNullableFields>;
}
export declare function getPaymentCollectabilityStatus(httpClient: HttpClient): GetPaymentCollectabilityStatusSignature;
interface GetPaymentCollectabilityStatusSignature {
    /**
     * Provides payment collectability status for given order. If payment collection is possible
     * response will contain collectable amount for given ecom order. If not - response will contain
     * reason why payment collection is not possible.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<GetPaymentCollectabilityStatusResponse & GetPaymentCollectabilityStatusResponseNonNullableFields>;
}
/** @internal */
export declare function recordManuallyCollectedPayment(httpClient: HttpClient): RecordManuallyCollectedPaymentSignature;
interface RecordManuallyCollectedPaymentSignature {
    /**
     * Records and approves new manual payment with provided custom amount on given order.
     * Existing pending payments are ignored.
     * Custom amount is expected to be less or equal remaining amount to be paid on order (affected by approved payments, refunds and gift card payments)
     * @param - Order ID.
     * @param - Amount to be recorded as approved manual payment for given order
     */
    (orderId: string, amount: Price): Promise<void>;
}
/** @internal */
export declare function paymentCollectionMarkOrderAsPaid(httpClient: HttpClient): PaymentCollectionMarkOrderAsPaidSignature;
interface PaymentCollectionMarkOrderAsPaidSignature {
    /**
     * Marks the order as paid. `order.paymentStatus` field *eventually* changes to `PAID`.
     * In case the order already has an offline payment transaction associated with it
     * (usually when manual payment method is chosen at checkout) - This transaction will become approved.
     * In case the order has no payment transactions associated with it
     * (usually when the item is set to be paid offline after checkout or when an order is created from the backoffice) - A payment transaction
     * will be created and approved.
     * @param - Ecom order ID.
     */
    (ecomOrderId: string): Promise<MarkOrderAsPaidResponse & MarkOrderAsPaidResponseNonNullableFields>;
}
/** @internal */
export declare function paymentCollectionBulkMarkOrdersAsPaid(httpClient: HttpClient): PaymentCollectionBulkMarkOrdersAsPaidSignature;
interface PaymentCollectionBulkMarkOrdersAsPaidSignature {
    /**
     * Marks multiple orders as paid. `order.paymentStatus` field *eventually* changes to `PAID`.
     * @param - IDs of orders to mark as paid.
     */
    (ecomOrderIds: string[]): Promise<BulkMarkOrdersAsPaidResponse & BulkMarkOrdersAsPaidResponseNonNullableFields>;
}
/** @internal */
export declare function getRefundabilityStatus(httpClient: HttpClient): GetRefundabilityStatusSignature;
interface GetRefundabilityStatusSignature {
    /**
     * Checks whether this order can be refunded.
     * @param - Order ID.
     */
    (ecomOrderId: string): Promise<GetRefundabilityStatusResponse & GetRefundabilityStatusResponseNonNullableFields>;
}
/** @internal */
export declare function paymentCollectionCreatePaymentGatewayOrder(httpClient: HttpClient): PaymentCollectionCreatePaymentGatewayOrderSignature;
interface PaymentCollectionCreatePaymentGatewayOrderSignature {
    /**
     * Call this endpoint to create an order in the payment gateway system. The amount of the order would be either:
     * 1. An explicit amount provided in the request, or;
     * 2. If an explicit amount is not provided - the remaining amount to complete the payment of that eCom order.
     * As a result, an ID of the created payment gateway order would be returned.
     * You can then use Wix Payments APIs to approve that order or collect payment, which will eventually change the eCom order state (e.g mark it as paid).
     * @param - Ecom order ID.
     */
    (ecomOrderId: string, options?: PaymentCollectionCreatePaymentGatewayOrderOptions | undefined): Promise<CreatePaymentGatewayOrderResponse & CreatePaymentGatewayOrderResponseNonNullableFields>;
}
/** @internal */
export declare function chargeMemberships(httpClient: HttpClient): ChargeMembershipsSignature;
interface ChargeMembershipsSignature {
    /**
     * @param - Order ID.
     * @param - The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     */
    (ecomOrderId: string, memberId: string, options?: ChargeMembershipsOptions | undefined): Promise<void>;
}
/** @internal */
export declare function triggerRefund(httpClient: HttpClient): TriggerRefundSignature;
interface TriggerRefundSignature {
    /**
     * Calls corresponding payment providers and creates refund transactions for requested payments.
     * Updates order transactions based on refund results.
     * For requested payments with `TriggerRefundRequest.payments.external_refund = true` will not call payment providers and
     * will only update order transactions.
     * @param - The order this refund related to
     * @param - Refund operations information
     */
    (ecomOrderId: string, payments: PaymentRefund[], options?: TriggerRefundOptions | undefined): Promise<TriggerRefundResponse & TriggerRefundResponseNonNullableFields>;
}
export declare function voidAuthorizedPayments(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Void authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Payment IDs
     */
    (ecomOrderId: string, paymentIds: string[]): Promise<VoidAuthorizedPaymentsResponse & VoidAuthorizedPaymentsResponseNonNullableFields>;
}
export declare function captureAuthorizedPayments(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Capture authorized payments
     * Transaction statuses for related payments will be updated in async way
     * @param - Wix eCommerce order ID
     * @param - Capture payments information
     */
    (ecomOrderId: string, payments: PaymentCapture[]): Promise<CaptureAuthorizedPaymentsResponse & CaptureAuthorizedPaymentsResponseNonNullableFields>;
}
export declare function getOrder(httpClient: HttpClient): GetOrderSignature;
interface GetOrderSignature {
    /**
     * Retrieves an order.
     *
     *
     * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
     *
     * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
     * @param - ID of the order to retrieve.
     * @returns Fulfilled - The requested order.
     */
    (_id: string): Promise<Order & OrderNonNullableFields>;
}
export declare function searchOrders(httpClient: HttpClient): SearchOrdersSignature;
interface SearchOrdersSignature {
    /**
     * Retrieves a list of orders, given the provided paging, filtering, and sorting.
     *
     *
     * Search Orders runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
     *
     * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: SearchOrdersOptions | undefined): Promise<SearchOrdersResponse & SearchOrdersResponseNonNullableFields>;
}
export declare function createOrder(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order.
     *
     *
     * The `createOrder()` function returns a Promise that resolves when the order is created.
     *
     * > **Notes:**
     * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
     * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
     * @param - Order info.
     * @returns Newly created order.
     */
    (order: Order, options?: CreateOrderOptions | undefined): Promise<Order & OrderNonNullableFields>;
}
export declare function updateOrder(httpClient: HttpClient): UpdateOrderSignature;
interface UpdateOrderSignature {
    /**
     * Updates an order.
     *
     *
     * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Order ID.
     * @returns Newly created order.
     */
    (_id: string | null, order: UpdateOrder): Promise<Order & OrderNonNullableFields>;
}
export declare function bulkUpdateOrders(httpClient: HttpClient): BulkUpdateOrdersSignature;
interface BulkUpdateOrdersSignature {
    /**
     * Updates up to 100 orders.
     *
     *
     * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
     *
     * Currently, the following fields can be updated:
     * + `order.buyerInfo.email`
     * + `order.buyerLanguage`
     * + `order.weightUnit`
     * + `order.billingInfo.address`
     * + `order.billingInfo.contactDetails`
     * + `order.archived`
     * + `order.attributionSource`
     * + `order.seenByAHuman`
     * + `order.recipientInfo.address`
     * + `order.recipientInfo.contactDetails`
     * + `order.shippingInfo.logistics.shippingDestination.address`
     * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
     *
     * To update a field's value, include the new value in the `orders.order` object in the method parameters.
     * To remove a field's value, pass `null`.
     *
     * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
     *
     * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
     * @param - Orders to update.
     */
    (orders: MaskedOrder[], options?: BulkUpdateOrdersOptions | undefined): Promise<BulkUpdateOrdersResponse & BulkUpdateOrdersResponseNonNullableFields>;
}
/** @internal */
export declare function commitDeltas(httpClient: HttpClient): CommitDeltasSignature;
interface CommitDeltasSignature {
    /** @param - Order id to be updated */
    (_id: string, options?: CommitDeltasOptions | undefined): Promise<CommitDeltasResponse & CommitDeltasResponseNonNullableFields>;
}
/** @internal */
export declare function updateOrderLineItem(httpClient: HttpClient): UpdateOrderLineItemSignature;
interface UpdateOrderLineItemSignature {
    /** @deprecated */
    (identifiers: UpdateOrderLineItemIdentifiers, lineItem: UpdateOrderLineItem): Promise<UpdateOrderLineItemResponse & UpdateOrderLineItemResponseNonNullableFields>;
}
/** @internal */
export declare function addActivity(httpClient: HttpClient): AddActivitySignature;
interface AddActivitySignature {
    /**
     * Adds a merchant comment to an order.
     * > **Note:** Activities with type CustomActivity not supported
     * @param - Order ID.
     * @param - Activity info.
     * @deprecated
     */
    (_id: string, activity: PublicActivity): Promise<AddActivityResponse & AddActivityResponseNonNullableFields>;
}
/** @internal */
export declare function updateActivity(httpClient: HttpClient): UpdateActivitySignature;
interface UpdateActivitySignature {
    /**
     * Updates an order's activity.
     * @param - Activity info.
     */
    (identifiers: UpdateActivityIdentifiers, activity: PublicActivity): Promise<UpdateActivityResponse & UpdateActivityResponseNonNullableFields>;
}
/** @internal */
export declare function deleteActivity(httpClient: HttpClient): DeleteActivitySignature;
interface DeleteActivitySignature {
    /**
     * Delete's an order's activity.
     *
     * Only custom activities and merchant comments can be deleted.
     */
    (identifiers: DeleteActivityIdentifiers): Promise<DeleteActivityResponse & DeleteActivityResponseNonNullableFields>;
}
export declare function cancelOrder(httpClient: HttpClient): CancelOrderSignature;
interface CancelOrderSignature {
    /**
     * Cancels an order.
     *
     *
     * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
     * @param - Order ID.
     */
    (_id: string, options?: CancelOrderOptions | undefined): Promise<CancelOrderResponse & CancelOrderResponseNonNullableFields>;
}
/** @internal */
export declare function updateOrderStatus(httpClient: HttpClient): UpdateOrderStatusSignature;
interface UpdateOrderStatusSignature {
    /**
     * Updates order status.
     *
     * >CANCELED and REJECTED are final statuses. Update from either of those will fail.
     * >Updates into INITIALIZED are not supported.
     *
     * Approving order:
     * APPROVED status can be set while order has one of [INITIALIZED, PENDING] statuses.
     *
     * Approving an order which was created with CreateOrderRequest.settings.order_approval_strategy = PAYMENT_METHOD_SAVED
     * will cause an error.
     *
     * Setting PENDING status:
     * Only orders in INITIALIZED status can be updated into PENDING.
     * @param - Order ID.
     * @param - New order status.
     */
    (orderId: string, status: OrderStatus): Promise<UpdateOrderStatusResponse & UpdateOrderStatusResponseNonNullableFields>;
}
/** @internal */
export declare function aggregateOrders(httpClient: HttpClient): AggregateOrdersSignature;
interface AggregateOrdersSignature {
    /** */
    (options?: AggregateOrdersOptions | undefined): Promise<AggregateOrdersResponse>;
}
export declare function bulkUpdateOrderTags(httpClient: HttpClient): BulkUpdateOrderTagsSignature;
interface BulkUpdateOrderTagsSignature {
    /**
     * Synchronously update tags on multiple orders, by list of order ids
     * A tag that appears both in the list of assign and unassign tags, will be assigned
     * @param - IDs of orders to update tags for.
     */
    (orderIds: string[], options?: BulkUpdateOrderTagsOptions | undefined): Promise<BulkUpdateOrderTagsResponse & BulkUpdateOrderTagsResponseNonNullableFields>;
}
export declare const onOrderApproved: EventDefinition<OrderApprovedEnvelope, "wix.ecom.v1.order_approved">;
export declare const onOrderUpdated: EventDefinition<OrderUpdatedEnvelope, "wix.ecom.v1.order_updated">;
export declare const onOrderCanceled: EventDefinition<OrderCanceledEnvelope, "wix.ecom.v1.order_canceled">;
export declare const onOrderCreated: EventDefinition<OrderCreatedEnvelope, "wix.ecom.v1.order_created">;
export { ActionEvent, ActionType, Activity, ActivityContentOneOf, ActivityType, AddActivitiesRequest, AddActivitiesResponse, AddActivityRequest, AddActivityResponse, AddActivityResponseNonNullableFields, AddInternalActivityRequest, AddInternalActivityResponse, AdditionalFee, AdditionalFeeDelta, AdditionalFeeDeltaDeltaOneOf, AdditionalFeeRefund, Address, AddressDescription, AddressLocation, AddressWithContact, AggregateOrdersOptions, AggregateOrdersRequest, AggregateOrdersResponse, AggregatedRefundSummary, App, ApplicationError, AppliedDiscount, AppliedDiscountDelta, AppliedDiscountDeltaDeltaOneOf, AppliedDiscountDiscountSourceOneOf, ArchiveOrderRequest, ArchiveOrderResponse, AttributionSource, AuthorizationActionFailureDetails, AuthorizationCapture, AuthorizationCaptureStatus, AuthorizationDetails, AuthorizationVoid, AuthorizationVoidStatus, AuthorizedPaymentCaptured, AuthorizedPaymentCreated, AuthorizedPaymentVoided, Balance, BalanceSummary, BaseEventMetadata, BatchOfTriggerReindexOrderRequest, BigDecimalWrapper, BulkActionMetadata, BulkArchiveOrdersByFilterRequest, BulkArchiveOrdersByFilterResponse, BulkArchiveOrdersRequest, BulkArchiveOrdersResponse, BulkMarkAsFulfilledByFilterRequest, BulkMarkAsFulfilledByFilterResponse, BulkMarkAsFulfilledRequest, BulkMarkAsFulfilledResponse, BulkMarkAsUnfulfilledByFilterRequest, BulkMarkAsUnfulfilledByFilterResponse, BulkMarkAsUnfulfilledRequest, BulkMarkAsUnfulfilledResponse, BulkMarkOrdersAsPaidRequest, BulkMarkOrdersAsPaidResponse, BulkMarkOrdersAsPaidResponseNonNullableFields, BulkOrderResult, BulkSendBuyerPickupConfirmationEmailsRequest, BulkSendBuyerPickupConfirmationEmailsResponse, BulkSendBuyerShippingConfirmationEmailsRequest, BulkSendBuyerShippingConfirmationEmailsResponse, BulkSetBusinessLocationRequest, BulkSetBusinessLocationResponse, BulkSetBusinessLocationResult, BulkUnArchiveOrdersByFilterRequest, BulkUnArchiveOrdersByFilterResponse, BulkUnArchiveOrdersRequest, BulkUnArchiveOrdersResponse, BulkUpdateOrderTagsOptions, BulkUpdateOrderTagsRequest, BulkUpdateOrderTagsResponse, BulkUpdateOrderTagsResponseNonNullableFields, BulkUpdateOrderTagsResult, BulkUpdateOrdersOptions, BulkUpdateOrdersRequest, BulkUpdateOrdersResponse, BulkUpdateOrdersResponseNonNullableFields, BuyerInfo, BuyerInfoIdOneOf, BuyerInfoUpdate, CalculateRefundItemRequest, CalculateRefundItemResponse, CalculateRefundRequest, CalculateRefundResponse, CalculatedTax, CalculatedTaxes, Cancel, CancelOrderOptions, CancelOrderRequest, CancelOrderResponse, CancelOrderResponseNonNullableFields, CaptureAuthorizedPaymentsRequest, CaptureAuthorizedPaymentsResponse, CaptureAuthorizedPaymentsResponseNonNullableFields, CatalogReference, ChannelInfo, ChannelType, ChargeMembershipsOptions, ChargeMembershipsRequest, ChargeMembershipsResponse, ChargeSavedPaymentMethodRequest, ChargeSavedPaymentMethodResponse, ChargedBy, Color, CommitDeltasOptions, CommitDeltasRequest, CommitDeltasResponse, CommitDeltasResponseNonNullableFields, CommittedDiffs, CommittedDiffsShippingUpdateInfoOneOf, CommonAddress, CommonAddressStreetOneOf, Company, Complete, ContinueSideEffectsFlowInLegacyData, Coupon, CreateOrderOptions, CreateOrderRequest, CreateOrderResponse, CreateOrderResponseNonNullableFields, CreatePaymentGatewayOrderRequest, CreatePaymentGatewayOrderResponse, CreatePaymentGatewayOrderResponseNonNullableFields, CreatedBy, CreatedByStringOneOf, CreditCardDetails, CreditCardPaymentMethodDetails, CursorPaging, CursorPagingMetadata, CursorSearch, CursorSearchPagingMethodOneOf, Cursors, CustomActivity, CustomField, CustomFieldGroup, CustomFieldValue, Customer, DecrementData, DecrementItemsQuantityRequest, DecrementItemsQuantityResponse, DelayedCaptureSettings, DeleteActivityIdentifiers, DeleteActivityRequest, DeleteActivityResponse, DeleteActivityResponseNonNullableFields, DeleteByFilterOperation, DeleteByIdsOperation, DeliveryLogistics, DeliveryLogisticsAddressOneOf, DeliveryTimeSlot, DeltaPaymentOptionType, Deposit, DepositType, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, DiffmatokyPayload, DigitalFile, Discount, DiscountOneDiscountTypeOneOf, DiscountReason, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, DownloadLinkSent, DraftOrderChangesApplied, DraftOrderCommitSettings, DraftOrderDiffs, DraftOrderDiffsBillingUpdateInfoOneOf, DraftOrderDiffsBuyerUpdateInfoOneOf, DraftOrderDiffsRecipientUpdateInfoOneOf, DraftOrderDiffsShippingUpdateInfoOneOf, Duration, DurationUnit, Email, EmailEdited, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ErrorInformation, EventMetadata, ExtendedFields, ExternalReceipt, ExternalReceiptInfo, ExternalUriMapping, FocalPoint, FreeTrialPeriod, FulfillerEmailSent, FulfillmentStatus, FulfillmentStatusUpdated, FulfillmentStatusesAggregate, FullAddressContactDetails, GetMetasiteDataRequest, GetMetasiteDataResponse, GetOrderForMetasiteRequest, GetOrderForMetasiteResponse, GetOrderRequest, GetOrderResponse, GetOrderResponseNonNullableFields, GetPaymentCollectabilityStatusRequest, GetPaymentCollectabilityStatusResponse, GetPaymentCollectabilityStatusResponseNonNullableFields, GetRefundabilityStatusRequest, GetRefundabilityStatusResponse, GetRefundabilityStatusResponseNonNullableFields, GetShipmentsRequest, GetShipmentsResponse, GiftCardPaymentDetails, GiftCardPaymentRefund, HtmlApplication, IdAndVersion, IdentificationData, IdentificationDataIdOneOf, IndexingMessage, InternalActivity, InternalActivityContentOneOf, InternalDocument, InternalDocumentUpdateByFilterOperation, InternalDocumentUpdateOperation, InternalQueryOrdersRequest, InternalQueryOrdersResponse, InternalUpdateExistingOperation, InventoryAction, InventoryUpdateDetails, InvoiceAdded, InvoiceDates, InvoiceDynamicPriceTotals, InvoiceFields, InvoiceSent, InvoiceSentEvent, InvoiceStatus, InvoicesPayment, ItemChangedDetails, ItemMetadata, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, ItemizedFee, JurisdictionType, LineItem, LineItemAmount, LineItemChanges, LineItemDelta, LineItemDeltaDeltaOneOf, LineItemDiscount, LineItemExchangeData, LineItemMetaData, LineItemPriceChange, LineItemQuantityChange, LineItemQuantityChangeType, LineItemRefund, LineItemTax, LineItemTaxBreakdown, LineItemTaxInfo, LineItemUpdate, LineItems, ListOrderTransactionsForMetasiteRequest, ListOrderTransactionsForMetasiteResponse, Locale, Location, LocationAndQuantity, ManagedAdditionalFee, ManagedDiscount, ManagedLineItem, ManuallyRefundableReason, MarkAsFulfilledRequest, MarkAsFulfilledResponse, MarkAsUnfulfilledRequest, MarkAsUnfulfilledResponse, MarkOrderAsPaidRequest, MarkOrderAsPaidResponse, MarkOrderAsPaidResponseNonNullableFields, MarkOrderAsSeenByHumanRequest, MarkOrderAsSeenByHumanResponse, MaskedOrder, MaskedOrderLineItem, MembershipChargeItem, MembershipName, MembershipPaymentDetails, MembershipPaymentRefund, MembershipPaymentStatus, MerchantComment, MerchantDiscount, MerchantDiscountMerchantDiscountReasonOneOf, MessageEnvelope, MetaData, MetaSite, MetaTag, Namespace, NewExchangeOrderCreated, NonRefundableReason, Order, OrderApprovalStrategy, OrderApproved, OrderApprovedEnvelope, OrderCanceled, OrderCanceledEnvelope, OrderCanceledEventOrderCanceled, OrderChange, OrderChangeValueOneOf, OrderCreateNotifications, OrderCreatedEnvelope, OrderCreatedFromExchange, OrderCreationSettings, OrderDeltasCommitted, OrderFulfilled, OrderItemsRestocked, OrderLineItem, OrderLineItemChangedDetails, OrderNonNullableFields, OrderNotFulfilled, OrderPaid, OrderPartiallyPaid, OrderPending, OrderPlaced, OrderRefunded, OrderRejected, OrderRejectedEventOrderRejected, OrderStatus, OrderTaxBreakdown, OrderTaxInfo, OrderTransactions, OrderUpdatedEnvelope, OrdersExperiments, Payment, PaymentCanceled, PaymentCanceledPaymentDetailsOneOf, PaymentCapture, PaymentCollectabilityStatus, PaymentCollectionCreatePaymentGatewayOrderOptions, PaymentDeclined, PaymentDeclinedPaymentDetailsOneOf, PaymentOptionType, PaymentPaymentDetailsOneOf, PaymentPending, PaymentPendingPaymentDetailsOneOf, PaymentReceiptInfoOneOf, PaymentRefund, PaymentRefundFailed, PaymentRefunded, PaymentStatus, PaymentStatusUpdated, Payments, Phone, PhysicalProperties, PickupAddress, PickupDetails, PickupMethod, PickupReadyEmailSent, Placement, PlainTextValue, PlatformPaging, PlatformPagingMetadata, PlatformQuery, PlatformQueryPagingMethodOneOf, PreparePaymentCollectionOptions, PreparePaymentCollectionRequest, PreparePaymentCollectionResponse, PreparePaymentCollectionResponseNonNullableFields, PreviewBuyerConfirmationEmailRequest, PreviewBuyerConfirmationEmailResponse, PreviewBuyerPaymentsReceivedEmailRequest, PreviewBuyerPaymentsReceivedEmailResponse, PreviewBuyerPickupConfirmationEmailRequest, PreviewBuyerPickupConfirmationEmailResponse, PreviewCancelEmailRequest, PreviewCancelEmailResponse, PreviewCancelRefundEmailRequest, PreviewCancelRefundEmailResponse, PreviewEmailByTypeRequest, PreviewEmailByTypeResponse, PreviewEmailType, PreviewRefundEmailRequest, PreviewRefundEmailResponse, PreviewResendDownloadLinksEmailRequest, PreviewResendDownloadLinksEmailResponse, PreviewShippingConfirmationEmailRequest, PreviewShippingConfirmationEmailResponse, Price, PriceDescription, PriceSummary, ProductName, PublicActivity, PublicActivityContentOneOf, QueryOrderRequest, QueryOrderResponse, QueryOrdersForMetasiteRequest, QueryOrdersForMetasiteResponse, QuotesAddress, Reason, ReceiptCreated, ReceiptCreatedReceiptInfoOneOf, ReceiptSent, ReceiptSentReceiptInfoOneOf, RecordManuallyCollectedPaymentRequest, RecordManuallyCollectedPaymentResponse, RedirectUrls, Refund, RefundDetails, RefundInitiated, RefundItem, RefundSideEffects, RefundStatus, RefundStatusInfo, RefundTransaction, Refundability, RefundabilityAdditionalRefundabilityInfoOneOf, RefundableStatus, RefundedAsStoreCredit, RefundedPayment, RefundedPaymentKindOneOf, RegularPayment, RegularPaymentDetails, RegularPaymentDetailsPaymentMethodDetailsOneOf, RegularPaymentPaymentMethodDetailsOneOf, RegularPaymentRefund, Reschedule, RestockInfo, RestockItem, RestockType, RestoreInfo, SavedPaymentMethod, ScheduledAction, SearchOrdersOptions, SearchOrdersRequest, SearchOrdersResponse, SearchOrdersResponseNonNullableFields, SendBuyerConfirmationEmailRequest, SendBuyerConfirmationEmailResponse, SendBuyerPaymentsReceivedEmailRequest, SendBuyerPaymentsReceivedEmailResponse, SendBuyerPickupConfirmationEmailRequest, SendBuyerPickupConfirmationEmailResponse, SendBuyerShippingConfirmationEmailRequest, SendBuyerShippingConfirmationEmailResponse, SendCancelRefundEmailRequest, SendCancelRefundEmailResponse, SendMerchantOrderReceivedNotificationRequest, SendMerchantOrderReceivedNotificationResponse, SendMerchantOrderReceivedPushRequest, SendMerchantOrderReceivedPushResponse, SendRefundEmailRequest, SendRefundEmailResponse, SeoData, ServiceProperties, ShippingAddressEdited, ShippingConfirmationEmailSent, ShippingInformation, ShippingInformationChange, ShippingPrice, ShippingRefund, ShippingRegion, SnapshotMessage, SortOrder, Sorting, Source, SourceType, StandardDetails, State, StreetAddress, Subdivision, SubdivisionType, SubscriptionFrequency, SubscriptionInfo, SubscriptionSettings, TagList, Tags, Task, TaskAction, TaskActionActionOneOf, TaskKey, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TotalPrice, TotalPriceChange, TrackingLinkAdded, TrackingNumberAdded, TrackingNumberEdited, TransactionStatus, TranslatedValue, TriggerRefundOptions, TriggerRefundRequest, TriggerRefundResponse, TriggerRefundResponseNonNullableFields, TriggerReindexOrderRequest, TriggerReindexRequest, TriggerReindexResponse, TriggerSideEffectsFromLegacyData, UnArchiveOrderRequest, UnArchiveOrderResponse, UpdateActivityIdentifiers, UpdateActivityRequest, UpdateActivityResponse, UpdateActivityResponseNonNullableFields, UpdateBillingContactDetailsRequest, UpdateBillingContactDetailsResponse, UpdateBuyerEmailRequest, UpdateBuyerEmailResponse, UpdateBuyerInfoRequest, UpdateBuyerInfoResponse, UpdateInternalDocumentsEvent, UpdateInternalDocumentsEventOperationOneOf, UpdateLineItemsDescriptionLinesRequest, UpdateLineItemsDescriptionLinesResponse, UpdateOrder, UpdateOrderLineItem, UpdateOrderLineItemIdentifiers, UpdateOrderLineItemRequest, UpdateOrderLineItemResponse, UpdateOrderLineItemResponseNonNullableFields, UpdateOrderLineItemsRequest, UpdateOrderLineItemsResponse, UpdateOrderRequest, UpdateOrderResponse, UpdateOrderResponseNonNullableFields, UpdateOrderShippingAddressRequest, UpdateOrderShippingAddressResponse, UpdateOrderStatusRequest, UpdateOrderStatusResponse, UpdateOrderStatusResponseNonNullableFields, UpsertRefundRequest, UpsertRefundResponse, UserDataResponse, V1BulkMarkOrdersAsPaidRequest, V1BulkMarkOrdersAsPaidResponse, V1CreatePaymentGatewayOrderRequest, V1CreatePaymentGatewayOrderResponse, V1LineItemDelta, V1LineItemDeltaDeltaOneOf, V1MarkOrderAsPaidRequest, V1MarkOrderAsPaidResponse, V1RestockItem, V1ScheduledAction, V1ShippingInformation, Value, ValueType, VatId, VatType, VersionedDeleteByIdsOperation, VersionedDocumentId, VersionedDocumentUpdateOperation, VersioningMode, VoidAuthorizedPaymentsRequest, VoidAuthorizedPaymentsResponse, VoidAuthorizedPaymentsResponseNonNullableFields, WebhookIdentityType, WeightUnit, WixReceipt, WixReceiptInfo, } from './ecom-v1-order-orders.universal.js';
