import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { Brand, BrandCreatedEnvelope, BrandDeletedEnvelope, BrandNonNullableFields, BrandUpdatedEnvelope, BrandsQueryBuilder, BulkCreateBrandsOptions, BulkCreateBrandsResponse, BulkCreateBrandsResponseNonNullableFields, BulkDeleteBrandsResponse, BulkDeleteBrandsResponseNonNullableFields, BulkGetOrCreateBrandsOptions, BulkGetOrCreateBrandsResponse, BulkGetOrCreateBrandsResponseNonNullableFields, BulkUpdateBrandsOptions, BulkUpdateBrandsResponse, BulkUpdateBrandsResponseNonNullableFields, GetBrandOptions, GetOrCreateBrandOptions, GetOrCreateBrandResponse, GetOrCreateBrandResponseNonNullableFields, MaskedBrand, QueryBrandsOptions, UpdateBrand, UpdateBrandOptions } from './stores-catalog-v3-brand-brands-v-3.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createBrand(httpClient: HttpClient): CreateBrandSignature;
interface CreateBrandSignature {
    /**
     * Creates a brand.
     *
     * To assign the brand to a product, include the `brand.id` or `brand.name`
     * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
     * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Brand to create.
     * @returns Created brand.
     */
    (brand: Brand): Promise<Brand & BrandNonNullableFields>;
}
export declare function getBrand(httpClient: HttpClient): GetBrandSignature;
interface GetBrandSignature {
    /**
     * Retrieves a brand.
     * @param - Brand ID.
     * @returns Brand.
     */
    (brandId: string, options?: GetBrandOptions | undefined): Promise<Brand & BrandNonNullableFields>;
}
export declare function updateBrand(httpClient: HttpClient): UpdateBrandSignature;
interface UpdateBrandSignature {
    /**
     * Updates a brand.
     *
     * Each time the brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - Brand ID.
     * @returns Updated brand.
     */
    (_id: string | null, brand: UpdateBrand, options?: UpdateBrandOptions | undefined): Promise<Brand & BrandNonNullableFields>;
}
export declare function deleteBrand(httpClient: HttpClient): DeleteBrandSignature;
interface DeleteBrandSignature {
    /**
     * Deletes a brand.
     *
     * > **Note:** Deleting a brand will also remove it from all products it is assigned to.
     * @param - Brand ID.
     */
    (brandId: string): Promise<void>;
}
export declare function queryBrands(httpClient: HttpClient): QueryBrandsSignature;
interface QueryBrandsSignature {
    /**
     * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryBrandsOptions | undefined): BrandsQueryBuilder;
}
export declare function bulkCreateBrands(httpClient: HttpClient): BulkCreateBrandsSignature;
interface BulkCreateBrandsSignature {
    /**
     * Creates multiple brands.
     * @param - Brands to create.
     */
    (brands: Brand[], options?: BulkCreateBrandsOptions | undefined): Promise<BulkCreateBrandsResponse & BulkCreateBrandsResponseNonNullableFields>;
}
export declare function bulkUpdateBrands(httpClient: HttpClient): BulkUpdateBrandsSignature;
interface BulkUpdateBrandsSignature {
    /**
     * Updates multiple brands.
     *
     * Each time a brand is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a brand.
     * This ensures you're working with the latest brand and prevents unintended overwrites.
     * @param - List of brands to update.
     */
    (brands: MaskedBrand[], options?: BulkUpdateBrandsOptions | undefined): Promise<BulkUpdateBrandsResponse & BulkUpdateBrandsResponseNonNullableFields>;
}
export declare function getOrCreateBrand(httpClient: HttpClient): GetOrCreateBrandSignature;
interface GetOrCreateBrandSignature {
    /**
     * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.
     * @param - Brand name to retrieve or create.
     */
    (brandName: string, options?: GetOrCreateBrandOptions | undefined): Promise<GetOrCreateBrandResponse & GetOrCreateBrandResponseNonNullableFields>;
}
export declare function bulkGetOrCreateBrands(httpClient: HttpClient): BulkGetOrCreateBrandsSignature;
interface BulkGetOrCreateBrandsSignature {
    /**
     * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.
     * @param - Brand names to retrieve or create.
     */
    (brandNames: string[], options?: BulkGetOrCreateBrandsOptions | undefined): Promise<BulkGetOrCreateBrandsResponse & BulkGetOrCreateBrandsResponseNonNullableFields>;
}
export declare function bulkDeleteBrands(httpClient: HttpClient): BulkDeleteBrandsSignature;
interface BulkDeleteBrandsSignature {
    /**
     * Deletes multiple brands.
     * @param - IDs of brands to delete.
     */
    (brandIds: string[]): Promise<BulkDeleteBrandsResponse & BulkDeleteBrandsResponseNonNullableFields>;
}
export declare const onBrandCreated: EventDefinition<BrandCreatedEnvelope, "wix.stores.catalog.v3.brand_created">;
export declare const onBrandDeleted: EventDefinition<BrandDeletedEnvelope, "wix.stores.catalog.v3.brand_deleted">;
export declare const onBrandUpdated: EventDefinition<BrandUpdatedEnvelope, "wix.stores.catalog.v3.brand_updated">;
export { ActionEvent, App, ApplicationError, BaseEventMetadata, Brand, BrandCreatedEnvelope, BrandDeletedEnvelope, BrandNonNullableFields, BrandUpdatedEnvelope, BrandsQueryBuilder, BrandsQueryResult, BulkActionMetadata, BulkBrandsResult, BulkCreateBrandsOptions, BulkCreateBrandsRequest, BulkCreateBrandsResponse, BulkCreateBrandsResponseNonNullableFields, BulkDeleteBrandsRequest, BulkDeleteBrandsResponse, BulkDeleteBrandsResponseBulkBrandsResult, BulkDeleteBrandsResponseNonNullableFields, BulkGetOrCreateBrandsOptions, BulkGetOrCreateBrandsRequest, BulkGetOrCreateBrandsResponse, BulkGetOrCreateBrandsResponseNonNullableFields, BulkUpdateBrandsOptions, BulkUpdateBrandsRequest, BulkUpdateBrandsResponse, BulkUpdateBrandsResponseNonNullableFields, CreateBrandRequest, CreateBrandResponse, CreateBrandResponseNonNullableFields, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteBrandRequest, DeleteBrandResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, GetBrandOptions, GetBrandRequest, GetBrandResponse, GetBrandResponseNonNullableFields, GetOrCreateBrandOptions, GetOrCreateBrandRequest, GetOrCreateBrandResponse, GetOrCreateBrandResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MaskedBrand, MessageEnvelope, Page, QueryBrandsOptions, QueryBrandsRequest, QueryBrandsResponse, QueryBrandsResponseNonNullableFields, RequestedFields, RestoreInfo, SortOrder, Sorting, URI, UpdateBrand, UpdateBrandOptions, UpdateBrandRequest, UpdateBrandResponse, UpdateBrandResponseNonNullableFields, WebhookIdentityType, } from './stores-catalog-v3-brand-brands-v-3.universal.js';
