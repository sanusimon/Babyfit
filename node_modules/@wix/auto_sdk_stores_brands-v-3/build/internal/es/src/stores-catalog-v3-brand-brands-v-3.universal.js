import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresCatalogV3Brand from './stores-catalog-v3-brand-brands-v-3.http.js';
export var RequestedFields;
(function (RequestedFields) {
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    RequestedFields["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
})(RequestedFields || (RequestedFields = {}));
export var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a brand.
 *
 * To assign the brand to a product, include the `brand.id` or `brand.name`
 * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
 * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
 * @param brand - Brand to create.
 * @public
 * @documentationMaturity preview
 * @requiredField brand
 * @requiredField brand.name
 * @permissionId WIX_STORES.BRAND_CREATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created brand.
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.CreateBrand
 */
export async function createBrand(brand) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ brand: brand });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.createBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brand: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['brand']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a brand.
 * @param brandId - Brand ID.
 * @public
 * @documentationMaturity preview
 * @requiredField brandId
 * @permissionId WIX_STORES.BRAND_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Read brands in catalog v3
 * @permissionScopeId SCOPE.STORES.BRAND_READ
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Brand.
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.GetBrand
 */
export async function getBrand(brandId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brandId: brandId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.getBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brandId: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['brandId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a brand.
 *
 * Each time the brand is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the brand.
 * This ensures you're working with the latest brand and prevents unintended overwrites.
 * @param _id - Brand ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField brand
 * @requiredField brand.revision
 * @permissionId WIX_STORES.BRAND_UPDATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated brand.
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.UpdateBrand
 */
export async function updateBrand(_id, brand, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brand: { ...brand, id: _id },
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.updateBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.brand;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { brand: '$[1]' },
            explicitPathsToArguments: { 'brand.id': '$[0]', fields: '$[2].fields' },
            singleArgumentUnchanged: false,
        }, ['_id', 'brand', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a brand.
 *
 * > **Note:** Deleting a brand will also remove it from all products it is assigned to.
 * @param brandId - Brand ID.
 * @public
 * @documentationMaturity preview
 * @requiredField brandId
 * @permissionId WIX_STORES.BRAND_DELETE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.DeleteBrand
 */
export async function deleteBrand(brandId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ brandId: brandId });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.deleteBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brandId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['brandId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 brands, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Brands runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Brands: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/brands-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Read brands in catalog v3
 * @permissionScopeId SCOPE.STORES.BRAND_READ
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.BRAND_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.QueryBrands
 */
export function queryBrands(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3Brand.queryBrands({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.brands,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Creates multiple brands.
 * @param brands - Brands to create.
 * @public
 * @documentationMaturity preview
 * @requiredField brands
 * @requiredField brands.name
 * @permissionId WIX_STORES.BRAND_CREATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkCreateBrands
 */
export async function bulkCreateBrands(brands, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brands: brands,
        returnEntity: options?.returnEntity,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkCreateBrands(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                brands: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['brands', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple brands.
 *
 * Each time a brand is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating a brand.
 * This ensures you're working with the latest brand and prevents unintended overwrites.
 * @param brands - List of brands to update.
 * @public
 * @documentationMaturity preview
 * @requiredField brands
 * @requiredField brands.brand._id
 * @requiredField brands.brand.revision
 * @permissionId WIX_STORES.BRAND_UPDATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkUpdateBrands
 */
export async function bulkUpdateBrands(brands, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brands: brands,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkUpdateBrands(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                brands: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['brands', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a brand by name, or creates a brand if one with the passed `brandName` doesn't exist.
 * @param brandName - Brand name to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField brandName
 * @permissionId WIX_STORES.BRAND_GET_OR_CREATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.GetOrCreateBrand
 */
export async function getOrCreateBrand(brandName, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brandName: brandName,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.getOrCreateBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brandName: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['brandName', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves multiple brands by name, or creates multiple brands if those with the passed `ribbonNames` don't exist.
 * @param brandNames - Brand names to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField brandNames
 * @permissionId WIX_STORES.BRAND_GET_OR_CREATE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkGetOrCreateBrands
 */
export async function bulkGetOrCreateBrands(brandNames, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        brandNames: brandNames,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkGetOrCreateBrands(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brandNames: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['brandNames', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes multiple brands.
 * @param brandIds - IDs of brands to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField brandIds
 * @permissionId WIX_STORES.BRAND_DELETE
 * @permissionScope Brand write in v3 catalog
 * @permissionScopeId SCOPE.STORES.BRAND_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.brand.v3.BrandService.BulkDeleteBrands
 */
export async function bulkDeleteBrands(brandIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ brandIds: brandIds });
    const reqOpts = ambassadorWixStoresCatalogV3Brand.bulkDeleteBrands(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { brandIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['brandIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-catalog-v3-brand-brands-v-3.universal.js.map