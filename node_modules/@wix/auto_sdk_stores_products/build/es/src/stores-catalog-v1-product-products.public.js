import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addProductMedia as universalAddProductMedia, addProductMediaToChoices as universalAddProductMediaToChoices, addProductsToCollection as universalAddProductsToCollection, bulkAdjustProductProperty as universalBulkAdjustProductProperty, bulkUpdateProductsProperty as universalBulkUpdateProductsProperty, createCollection as universalCreateCollection, createProduct as universalCreateProduct, deleteCollection as universalDeleteCollection, deleteProduct as universalDeleteProduct, deleteProductOptions as universalDeleteProductOptions, getCollectionBySlug as universalGetCollectionBySlug, getProduct as universalGetProduct, getProductOptionsAvailability as universalGetProductOptionsAvailability, getStoreVariant as universalGetStoreVariant, queryProductVariants as universalQueryProductVariants, queryProducts as universalQueryProducts, queryStoreVariants as universalQueryStoreVariants, removeBrand as universalRemoveBrand, removeProductMedia as universalRemoveProductMedia, removeProductMediaFromChoices as universalRemoveProductMediaFromChoices, removeProductsFromCollection as universalRemoveProductsFromCollection, removeRibbon as universalRemoveRibbon, resetAllProductVariantData as universalResetAllProductVariantData, updateCollection as universalUpdateCollection, updateProduct as universalUpdateProduct, updateProductVariants as universalUpdateProductVariants, } from './stores-catalog-v1-product-products.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/stores' };
export function createProduct(httpClient) {
    return (product) => universalCreateProduct(product, 
    // @ts-ignore
    { httpClient });
}
export function updateProduct(httpClient) {
    return (_id, product) => universalUpdateProduct(_id, product, 
    // @ts-ignore
    { httpClient });
}
export function deleteProduct(httpClient) {
    return (_id) => universalDeleteProduct(_id, 
    // @ts-ignore
    { httpClient });
}
export function updateProductVariants(httpClient) {
    return (_id, variants) => universalUpdateProductVariants(_id, variants, 
    // @ts-ignore
    { httpClient });
}
export function resetAllProductVariantData(httpClient) {
    return (_id) => universalResetAllProductVariantData(_id, 
    // @ts-ignore
    { httpClient });
}
export function addProductsToCollection(httpClient) {
    return (_id, productIds) => universalAddProductsToCollection(_id, productIds, 
    // @ts-ignore
    { httpClient });
}
export function removeProductsFromCollection(httpClient) {
    return (_id, productIds) => universalRemoveProductsFromCollection(_id, productIds, 
    // @ts-ignore
    { httpClient });
}
export function addProductMedia(httpClient) {
    return (_id, media) => universalAddProductMedia(_id, media, 
    // @ts-ignore
    { httpClient });
}
export function removeProductMedia(httpClient) {
    return (_id, mediaIds) => universalRemoveProductMedia(_id, mediaIds, 
    // @ts-ignore
    { httpClient });
}
export function addProductMediaToChoices(httpClient) {
    return (_id, media) => universalAddProductMediaToChoices(_id, media, 
    // @ts-ignore
    { httpClient });
}
export function removeProductMediaFromChoices(httpClient) {
    return (_id, media) => universalRemoveProductMediaFromChoices(_id, media, 
    // @ts-ignore
    { httpClient });
}
export function deleteProductOptions(httpClient) {
    return (_id) => universalDeleteProductOptions(_id, 
    // @ts-ignore
    { httpClient });
}
export function removeBrand(httpClient) {
    return (_id) => universalRemoveBrand(_id, 
    // @ts-ignore
    { httpClient });
}
export function createCollection(httpClient) {
    return (collection) => universalCreateCollection(collection, 
    // @ts-ignore
    { httpClient });
}
export function updateCollection(httpClient) {
    return (_id, collection) => universalUpdateCollection(_id, collection, 
    // @ts-ignore
    { httpClient });
}
export function deleteCollection(httpClient) {
    return (_id) => universalDeleteCollection(_id, 
    // @ts-ignore
    { httpClient });
}
export function removeRibbon(httpClient) {
    return (_id) => universalRemoveRibbon(_id, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateProductsProperty(httpClient) {
    return (ids, set) => universalBulkUpdateProductsProperty(ids, set, 
    // @ts-ignore
    { httpClient });
}
export function bulkAdjustProductProperty(httpClient) {
    return (adjust, ids) => universalBulkAdjustProductProperty(adjust, ids, 
    // @ts-ignore
    { httpClient });
}
export function queryProducts(httpClient) {
    return () => universalQueryProducts(
    // @ts-ignore
    { httpClient });
}
export function getProduct(httpClient) {
    return (_id, options) => universalGetProduct(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function getCollectionBySlug(httpClient) {
    return (slug) => universalGetCollectionBySlug(slug, 
    // @ts-ignore
    { httpClient });
}
export function getProductOptionsAvailability(httpClient) {
    return (_id, options) => universalGetProductOptionsAvailability(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function queryProductVariants(httpClient) {
    return (_id, options) => universalQueryProductVariants(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function queryStoreVariants(httpClient) {
    return (query) => universalQueryStoreVariants(query, 
    // @ts-ignore
    { httpClient });
}
export function getStoreVariant(httpClient) {
    return (_id) => universalGetStoreVariant(_id, 
    // @ts-ignore
    { httpClient });
}
export const onProductCollectionChanged = EventDefinition('com.wix.ecommerce.catalog.api.v1.CollectionChanged', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export const onProductCollectionCreated = EventDefinition('com.wix.ecommerce.catalog.api.v1.CollectionCreated', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export const onProductCollectionDeleted = EventDefinition('com.wix.ecommerce.catalog.api.v1.CollectionDeleted', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export const onProductChanged = EventDefinition('com.wix.ecommerce.catalog.api.v1.ProductChanged', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export const onProductCreated = EventDefinition('com.wix.ecommerce.catalog.api.v1.ProductCreated', false, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'data.price.price' },
            { path: 'data.price.pricePerUnit' },
            { path: 'data.costAndProfitData.itemCost' },
            { path: 'data.price.discountedPrice' },
            { path: 'data.costAndProfitData.profit' },
            { path: 'data.costAndProfitData.profitMargin' },
        ],
    },
])))();
export const onProductDeleted = EventDefinition('com.wix.ecommerce.catalog.api.v1.ProductDeleted', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export const onProductVariantsChanged = EventDefinition('com.wix.ecommerce.catalog.api.v1.VariantsChanged', false, (event) => renameKeysFromRESTResponseToSDKResponse(event))();
export { DiscountType, FileType, InventoryStatus, MeasurementUnit, MediaItemType, OptionType, ProductType, SortOrder, Version, WebhookIdentityType, } from './stores-catalog-v1-product-products.universal.js';
//# sourceMappingURL=stores-catalog-v1-product-products.public.js.map