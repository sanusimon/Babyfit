"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStoreVariant = exports.queryStoreVariants = exports.queryProductVariants = exports.productOptionsAvailability = exports.getCollectionBySlug = exports.getProduct = exports.queryProductsPlatformized = exports.bulkAdjustProductProperties = exports.bulkUpdateProducts = exports.removeRibbon = exports.deleteCollection = exports.updateCollection = exports.createCollection = exports.removeBrand = exports.deleteProductOptions = exports.removeProductMediaFromChoices = exports.addProductMediaToChoices = exports.removeProductMedia = exports.addProductMedia = exports.removeProductsFromCollection = exports.addProductsToCollection = exports.resetAllVariantData = exports.updateVariants = exports.deleteProduct = exports.updateProduct = exports.createProduct = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixCatalogApiV1CatalogReadApiUrl(opts) {
    const domainToMappings = {
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/catalog-reader-server',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/catalog-reader-server',
                destPath: '',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/catalog-reader-server',
                destPath: '',
            },
            {
                srcPath: '/catalog-read-proxy',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/catalog-reader-server',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/stores-reader/v1/products',
                destPath: '/v1/products',
            },
            {
                srcPath: '/stores-reader/v1/variants',
                destPath: '/v1/variants',
            },
            {
                srcPath: '/stores-reader/api/v1/products',
                destPath: '/api/v1/products',
            },
        ],
        'api._api_base_domain_': [
            {
                srcPath: '/catalog-read-proxy',
                destPath: '',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/catalog-read-proxy',
                destPath: '',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/catalog-read-proxy',
                destPath: '',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/catalog-read-proxy',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
function resolveWixCatalogApiV1CatalogWriteApiUrl(opts) {
    const domainToMappings = {
        _: [
            {
                srcPath: '/_api/catalog-server',
                destPath: '',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/catalog-server',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/stores/v1/collections',
                destPath: '/v1/collections',
            },
            {
                srcPath: '/stores/v1/products',
                destPath: '/v1/products',
            },
            {
                srcPath: '/stores/v1/variants',
                destPath: '/v1/variants',
            },
            {
                srcPath: '/stores/v1/bulk/products',
                destPath: '/v1/bulk/products',
            },
            {
                srcPath: '/stores/v1/products-digital',
                destPath: '/v1/products-digital',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/catalog-server',
                destPath: '',
            },
            {
                srcPath: '/catalog-write-api-proxy',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/_api/catalog-write-api-proxy',
                destPath: '',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/_api/catalog-write-api-proxy',
                destPath: '',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/_api/catalog-write-api-proxy',
                destPath: '',
            },
        ],
        'api._api_base_domain_': [
            {
                srcPath: '/catalog-write-api-proxy',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/catalog-write-api-proxy',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_stores_products';
/** Creates a new product. */
function createProduct(payload) {
    function __createProduct({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'product.weight' },
                    { path: 'product.price.price' },
                    { path: 'product.price.pricePerUnit' },
                    { path: 'product.priceData.price' },
                    { path: 'product.priceData.pricePerUnit' },
                    { path: 'product.convertedPriceData.price' },
                    { path: 'product.convertedPriceData.pricePerUnit' },
                    { path: 'product.costAndProfitData.itemCost' },
                    { path: 'product.variants.variant.priceData.price' },
                    { path: 'product.variants.variant.priceData.pricePerUnit' },
                    { path: 'product.variants.variant.convertedPriceData.price' },
                    { path: 'product.variants.variant.convertedPriceData.pricePerUnit' },
                    { path: 'product.variants.variant.costAndProfitData.itemCost' },
                    { path: 'product.weightRange.minValue' },
                    { path: 'product.weightRange.maxValue' },
                    { path: 'product.price.discountedPrice' },
                    { path: 'product.priceData.discountedPrice' },
                    { path: 'product.convertedPriceData.discountedPrice' },
                    { path: 'product.priceRange.minValue' },
                    { path: 'product.priceRange.maxValue' },
                    { path: 'product.costAndProfitData.profit' },
                    { path: 'product.costAndProfitData.profitMargin' },
                    { path: 'product.costRange.minValue' },
                    { path: 'product.costRange.maxValue' },
                    { path: 'product.pricePerUnitData.totalQuantity' },
                    { path: 'product.pricePerUnitData.baseQuantity' },
                    { path: 'product.discount.value' },
                    { path: 'product.variants.variant.weight' },
                    { path: 'product.variants.variant.priceData.discountedPrice' },
                    {
                        path: 'product.variants.variant.convertedPriceData.discountedPrice',
                    },
                    { path: 'product.variants.variant.costAndProfitData.profit' },
                    { path: 'product.variants.variant.costAndProfitData.profitMargin' },
                ],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'product.lastUpdated' },
                    { path: 'product.createdDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.CreateProduct',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'product.weight' },
                        { path: 'product.price.price' },
                        { path: 'product.price.pricePerUnit' },
                        { path: 'product.priceData.price' },
                        { path: 'product.priceData.pricePerUnit' },
                        { path: 'product.convertedPriceData.price' },
                        { path: 'product.convertedPriceData.pricePerUnit' },
                        { path: 'product.costAndProfitData.itemCost' },
                        { path: 'product.variants.variant.priceData.price' },
                        { path: 'product.variants.variant.priceData.pricePerUnit' },
                        { path: 'product.variants.variant.convertedPriceData.price' },
                        {
                            path: 'product.variants.variant.convertedPriceData.pricePerUnit',
                        },
                        { path: 'product.variants.variant.costAndProfitData.itemCost' },
                        { path: 'product.weightRange.minValue' },
                        { path: 'product.weightRange.maxValue' },
                        { path: 'product.price.discountedPrice' },
                        { path: 'product.priceData.discountedPrice' },
                        { path: 'product.convertedPriceData.discountedPrice' },
                        { path: 'product.priceRange.minValue' },
                        { path: 'product.priceRange.maxValue' },
                        { path: 'product.costAndProfitData.profit' },
                        { path: 'product.costAndProfitData.profitMargin' },
                        { path: 'product.costRange.minValue' },
                        { path: 'product.costRange.maxValue' },
                        { path: 'product.pricePerUnitData.totalQuantity' },
                        { path: 'product.pricePerUnitData.baseQuantity' },
                        { path: 'product.discount.value' },
                        { path: 'product.variants.variant.weight' },
                        { path: 'product.variants.variant.priceData.discountedPrice' },
                        {
                            path: 'product.variants.variant.convertedPriceData.discountedPrice',
                        },
                        { path: 'product.variants.variant.costAndProfitData.profit' },
                        {
                            path: 'product.variants.variant.costAndProfitData.profitMargin',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'product.lastUpdated' },
                        { path: 'product.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createProduct;
}
exports.createProduct = createProduct;
/** Updates specified fields in a product. */
function updateProduct(payload) {
    function __updateProduct({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'product.weight' },
                    { path: 'product.price.price' },
                    { path: 'product.price.pricePerUnit' },
                    { path: 'product.priceData.price' },
                    { path: 'product.priceData.pricePerUnit' },
                    { path: 'product.convertedPriceData.price' },
                    { path: 'product.convertedPriceData.pricePerUnit' },
                    { path: 'product.costAndProfitData.itemCost' },
                    { path: 'product.variants.variant.priceData.price' },
                    { path: 'product.variants.variant.priceData.pricePerUnit' },
                    { path: 'product.variants.variant.convertedPriceData.price' },
                    { path: 'product.variants.variant.convertedPriceData.pricePerUnit' },
                    { path: 'product.variants.variant.costAndProfitData.itemCost' },
                    { path: 'product.weightRange.minValue' },
                    { path: 'product.weightRange.maxValue' },
                    { path: 'product.price.discountedPrice' },
                    { path: 'product.priceData.discountedPrice' },
                    { path: 'product.convertedPriceData.discountedPrice' },
                    { path: 'product.priceRange.minValue' },
                    { path: 'product.priceRange.maxValue' },
                    { path: 'product.costAndProfitData.profit' },
                    { path: 'product.costAndProfitData.profitMargin' },
                    { path: 'product.costRange.minValue' },
                    { path: 'product.costRange.maxValue' },
                    { path: 'product.pricePerUnitData.totalQuantity' },
                    { path: 'product.pricePerUnitData.baseQuantity' },
                    { path: 'product.discount.value' },
                    { path: 'product.variants.variant.weight' },
                    { path: 'product.variants.variant.priceData.discountedPrice' },
                    {
                        path: 'product.variants.variant.convertedPriceData.discountedPrice',
                    },
                    { path: 'product.variants.variant.costAndProfitData.profit' },
                    { path: 'product.variants.variant.costAndProfitData.profitMargin' },
                ],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'product.lastUpdated' },
                    { path: 'product.createdDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'PATCH',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.UpdateProduct',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{product.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'product.weight' },
                        { path: 'product.price.price' },
                        { path: 'product.price.pricePerUnit' },
                        { path: 'product.priceData.price' },
                        { path: 'product.priceData.pricePerUnit' },
                        { path: 'product.convertedPriceData.price' },
                        { path: 'product.convertedPriceData.pricePerUnit' },
                        { path: 'product.costAndProfitData.itemCost' },
                        { path: 'product.variants.variant.priceData.price' },
                        { path: 'product.variants.variant.priceData.pricePerUnit' },
                        { path: 'product.variants.variant.convertedPriceData.price' },
                        {
                            path: 'product.variants.variant.convertedPriceData.pricePerUnit',
                        },
                        { path: 'product.variants.variant.costAndProfitData.itemCost' },
                        { path: 'product.weightRange.minValue' },
                        { path: 'product.weightRange.maxValue' },
                        { path: 'product.price.discountedPrice' },
                        { path: 'product.priceData.discountedPrice' },
                        { path: 'product.convertedPriceData.discountedPrice' },
                        { path: 'product.priceRange.minValue' },
                        { path: 'product.priceRange.maxValue' },
                        { path: 'product.costAndProfitData.profit' },
                        { path: 'product.costAndProfitData.profitMargin' },
                        { path: 'product.costRange.minValue' },
                        { path: 'product.costRange.maxValue' },
                        { path: 'product.pricePerUnitData.totalQuantity' },
                        { path: 'product.pricePerUnitData.baseQuantity' },
                        { path: 'product.discount.value' },
                        { path: 'product.variants.variant.weight' },
                        { path: 'product.variants.variant.priceData.discountedPrice' },
                        {
                            path: 'product.variants.variant.convertedPriceData.discountedPrice',
                        },
                        { path: 'product.variants.variant.costAndProfitData.profit' },
                        {
                            path: 'product.variants.variant.costAndProfitData.profitMargin',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'product.lastUpdated' },
                        { path: 'product.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateProduct;
}
exports.updateProduct = updateProduct;
/** Deletes a product. */
function deleteProduct(payload) {
    function __deleteProduct({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'DELETE',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.DeleteProduct',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteProduct;
}
exports.deleteProduct = deleteProduct;
/** Updates variants of a specified product. */
function updateVariants(payload) {
    function __updateVariants({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'variants.price' },
                    { path: 'variants.cost' },
                    { path: 'variants.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'PATCH',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.UpdateVariants',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/variants',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'variants.variant.weight' },
                        { path: 'variants.variant.priceData.discountedPrice' },
                        { path: 'variants.variant.convertedPriceData.discountedPrice' },
                        { path: 'variants.variant.costAndProfitData.profit' },
                        { path: 'variants.variant.costAndProfitData.profitMargin' },
                        { path: 'variants.variant.priceData.price' },
                        { path: 'variants.variant.priceData.pricePerUnit' },
                        { path: 'variants.variant.convertedPriceData.price' },
                        { path: 'variants.variant.convertedPriceData.pricePerUnit' },
                        { path: 'variants.variant.costAndProfitData.itemCost' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateVariants;
}
exports.updateVariants = updateVariants;
/** Resets the data (such as the price and the weight) of all variants for a given product to their default values. */
function resetAllVariantData(payload) {
    function __resetAllVariantData({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.ResetAllVariantData',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/variants/resetToDefault',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __resetAllVariantData;
}
exports.resetAllVariantData = resetAllVariantData;
/** Adds products to a specified collection. */
function addProductsToCollection(payload) {
    function __addProductsToCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.AddProductsToCollection',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/collections/{id}/productIds',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __addProductsToCollection;
}
exports.addProductsToCollection = addProductsToCollection;
/** Deletes products from a specified collection. */
function removeProductsFromCollection(payload) {
    function __removeProductsFromCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.RemoveProductsFromCollection',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/collections/{id}/productIds/delete',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeProductsFromCollection;
}
exports.removeProductsFromCollection = removeProductsFromCollection;
/**
 * Adds media items to a specified product, either via URL or existing media ID.
 *
 * > **NOTE:** The URL is not validated and no event is triggered to indicate if the media was added successfully.
 */
function addProductMedia(payload) {
    function __addProductMedia({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.AddProductMedia',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/media',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __addProductMedia;
}
exports.addProductMedia = addProductMedia;
/**
 * Removes specified media items from a product.
 * Pass an empty array to remove all media items.
 */
function removeProductMedia(payload) {
    function __removeProductMedia({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.RemoveProductMedia',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/media/delete',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeProductMedia;
}
exports.removeProductMedia = removeProductMedia;
/**
 * Links media items that are already associated with a specific product to a choice within the same product.
 *
 * Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).
 *
 * To remove all existing media items, call the [Remove Product Media From Choices](https://dev.wix.com/api/rest/wix-stores/catalog/products/remove-product-media-from-choices) endpoint.
 */
function addProductMediaToChoices(payload) {
    function __addProductMediaToChoices({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'PATCH',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.AddProductMediaToChoices',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/choices/media',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __addProductMediaToChoices;
}
exports.addProductMediaToChoices = addProductMediaToChoices;
/**
 * Removes media items from all or some of a product's choices.
 * (Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).)
 */
function removeProductMediaFromChoices(payload) {
    function __removeProductMediaFromChoices({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.RemoveProductMediaFromChoices',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/choices/media/delete',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeProductMediaFromChoices;
}
exports.removeProductMediaFromChoices = removeProductMediaFromChoices;
/** Delete all options from a specific product. Only available when [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is disabled. */
function deleteProductOptions(payload) {
    function __deleteProductOptions({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'DELETE',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.DeleteProductOptions',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/options',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteProductOptions;
}
exports.deleteProductOptions = deleteProductOptions;
/** Deletes a product's brand. */
function removeBrand(payload) {
    function __removeBrand({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.RemoveBrand',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/remove-brand',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeBrand;
}
exports.removeBrand = removeBrand;
/** Creates a new collection. */
function createCollection(payload) {
    function __createCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.CreateCollection',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/collections',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __createCollection;
}
exports.createCollection = createCollection;
/** Updates specified properties of a collection. To add products to a collection, call the [addProductsToCollection](#addproductstocollection) function. */
function updateCollection(payload) {
    function __updateCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'PATCH',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.UpdateCollection',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/collections/{collection.id}',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __updateCollection;
}
exports.updateCollection = updateCollection;
/** Deletes a collection. */
function deleteCollection(payload) {
    function __deleteCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'DELETE',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.DeleteCollection',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/collections/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteCollection;
}
exports.deleteCollection = deleteCollection;
/** Deletes a product's ribbon. */
function removeRibbon(payload) {
    function __removeRibbon({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.RemoveRibbon',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/products/{id}/remove-ribbon',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeRibbon;
}
exports.removeRibbon = removeRibbon;
/** Updates a specified property for up to 100 products at a time. */
function bulkUpdateProducts(payload) {
    function __bulkUpdateProducts({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'set.price' },
                    { path: 'set.cost' },
                    { path: 'set.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.BulkUpdateProducts',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/bulk/products/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __bulkUpdateProducts;
}
exports.bulkUpdateProducts = bulkUpdateProducts;
/**
 * Adjusts a specified numerical property for up to 100 products at a time.
 * The property can be increased or decreased either by percentage or amount.
 */
function bulkAdjustProductProperties(payload) {
    function __bulkAdjustProductProperties({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'adjust.price.amount' },
                    { path: 'adjust.cost.amount' },
                    { path: 'adjust.weight.amount' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogWriteApi.BulkAdjustProductProperties',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogWriteApiUrl({
                protoPath: '/v1/bulk/products/adjust-properties',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __bulkAdjustProductProperties;
}
exports.bulkAdjustProductProperties = bulkAdjustProductProperties;
/** Returns a list of up to 100 products, given the provided paging, sorting and filtering. */
function queryProductsPlatformized(payload) {
    function __queryProductsPlatformized({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.QueryProductsPlatformized',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/products/query-platformized',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'products.weight' },
                        { path: 'products.price.price' },
                        { path: 'products.price.pricePerUnit' },
                        { path: 'products.priceData.price' },
                        { path: 'products.priceData.pricePerUnit' },
                        { path: 'products.convertedPriceData.price' },
                        { path: 'products.convertedPriceData.pricePerUnit' },
                        { path: 'products.costAndProfitData.itemCost' },
                        { path: 'products.variants.variant.priceData.price' },
                        { path: 'products.variants.variant.priceData.pricePerUnit' },
                        { path: 'products.variants.variant.convertedPriceData.price' },
                        {
                            path: 'products.variants.variant.convertedPriceData.pricePerUnit',
                        },
                        { path: 'products.variants.variant.costAndProfitData.itemCost' },
                        { path: 'products.weightRange.minValue' },
                        { path: 'products.weightRange.maxValue' },
                        { path: 'products.price.discountedPrice' },
                        { path: 'products.priceData.discountedPrice' },
                        { path: 'products.convertedPriceData.discountedPrice' },
                        { path: 'products.priceRange.minValue' },
                        { path: 'products.priceRange.maxValue' },
                        { path: 'products.costAndProfitData.profit' },
                        { path: 'products.costAndProfitData.profitMargin' },
                        { path: 'products.costRange.minValue' },
                        { path: 'products.costRange.maxValue' },
                        { path: 'products.pricePerUnitData.totalQuantity' },
                        { path: 'products.pricePerUnitData.baseQuantity' },
                        { path: 'products.discount.value' },
                        { path: 'products.variants.variant.weight' },
                        { path: 'products.variants.variant.priceData.discountedPrice' },
                        {
                            path: 'products.variants.variant.convertedPriceData.discountedPrice',
                        },
                        { path: 'products.variants.variant.costAndProfitData.profit' },
                        {
                            path: 'products.variants.variant.costAndProfitData.profitMargin',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'products.lastUpdated' },
                        { path: 'products.createdDate' },
                    ],
                },
            ]),
            fallback: [
                {
                    method: 'POST',
                    url: resolveWixCatalogApiV1CatalogReadApiUrl({
                        protoPath: '/v1/products/query-platformized',
                        data: payload,
                        host,
                    }),
                    data: payload,
                },
            ],
        };
        return metadata;
    }
    return __queryProductsPlatformized;
}
exports.queryProductsPlatformized = queryProductsPlatformized;
/** Retrieves a product with the provided ID. */
function getProduct(payload) {
    function __getProduct({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'GET',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.GetProduct',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/products/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'product.weight' },
                        { path: 'product.price.price' },
                        { path: 'product.price.pricePerUnit' },
                        { path: 'product.priceData.price' },
                        { path: 'product.priceData.pricePerUnit' },
                        { path: 'product.convertedPriceData.price' },
                        { path: 'product.convertedPriceData.pricePerUnit' },
                        { path: 'product.costAndProfitData.itemCost' },
                        { path: 'product.variants.variant.priceData.price' },
                        { path: 'product.variants.variant.priceData.pricePerUnit' },
                        { path: 'product.variants.variant.convertedPriceData.price' },
                        {
                            path: 'product.variants.variant.convertedPriceData.pricePerUnit',
                        },
                        { path: 'product.variants.variant.costAndProfitData.itemCost' },
                        { path: 'product.weightRange.minValue' },
                        { path: 'product.weightRange.maxValue' },
                        { path: 'product.price.discountedPrice' },
                        { path: 'product.priceData.discountedPrice' },
                        { path: 'product.convertedPriceData.discountedPrice' },
                        { path: 'product.priceRange.minValue' },
                        { path: 'product.priceRange.maxValue' },
                        { path: 'product.costAndProfitData.profit' },
                        { path: 'product.costAndProfitData.profitMargin' },
                        { path: 'product.costRange.minValue' },
                        { path: 'product.costRange.maxValue' },
                        { path: 'product.pricePerUnitData.totalQuantity' },
                        { path: 'product.pricePerUnitData.baseQuantity' },
                        { path: 'product.discount.value' },
                        { path: 'product.variants.variant.weight' },
                        { path: 'product.variants.variant.priceData.discountedPrice' },
                        {
                            path: 'product.variants.variant.convertedPriceData.discountedPrice',
                        },
                        { path: 'product.variants.variant.costAndProfitData.profit' },
                        {
                            path: 'product.variants.variant.costAndProfitData.profitMargin',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'product.lastUpdated' },
                        { path: 'product.createdDate' },
                    ],
                },
            ]),
            fallback: [
                {
                    method: 'GET',
                    url: resolveWixCatalogApiV1CatalogReadApiUrl({
                        protoPath: '/v1/products/{id}',
                        data: payload,
                        host,
                    }),
                    params: (0, rest_modules_1.toURLSearchParams)(payload),
                },
            ],
        };
        return metadata;
    }
    return __getProduct;
}
exports.getProduct = getProduct;
/** Retrieves a collection with the provided slug. */
function getCollectionBySlug(payload) {
    function __getCollectionBySlug({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'GET',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.GetCollectionBySlug',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/collections/slug/{slug}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __getCollectionBySlug;
}
exports.getCollectionBySlug = getCollectionBySlug;
/** Gets the availability of relevant product variants based on the product ID and selections provided. See [Use Cases](https://dev.wix.com/api/rest/wix-stores/catalog/use-cases) for an example. */
function productOptionsAvailability(payload) {
    function __productOptionsAvailability({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.ProductOptionsAvailability',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/products/{id}/productOptionsAvailability',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'selectedVariant.weight' },
                        { path: 'selectedVariant.price.price' },
                        { path: 'selectedVariant.price.pricePerUnit' },
                        { path: 'selectedVariant.convertedPriceData.price' },
                        { path: 'selectedVariant.convertedPriceData.pricePerUnit' },
                        { path: 'selectedVariant.price.discountedPrice' },
                        { path: 'selectedVariant.convertedPriceData.discountedPrice' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __productOptionsAvailability;
}
exports.productOptionsAvailability = productOptionsAvailability;
/**
 * Retrieves product variants, based on either choices (option-choice key-value pairs) or variant IDs.
 * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
 */
function queryProductVariants(payload) {
    function __queryProductVariants({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.QueryProductVariants',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/products/{id}/variants/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'variants.variant.weight' },
                        { path: 'variants.variant.priceData.discountedPrice' },
                        { path: 'variants.variant.convertedPriceData.discountedPrice' },
                        { path: 'variants.variant.costAndProfitData.profit' },
                        { path: 'variants.variant.costAndProfitData.profitMargin' },
                        { path: 'variants.variant.priceData.price' },
                        { path: 'variants.variant.priceData.pricePerUnit' },
                        { path: 'variants.variant.convertedPriceData.price' },
                        { path: 'variants.variant.convertedPriceData.pricePerUnit' },
                        { path: 'variants.variant.costAndProfitData.itemCost' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryProductVariants;
}
exports.queryProductVariants = queryProductVariants;
/** Retrieves up to 100 store variants, given the provided paging, filtering, and sorting. */
function queryStoreVariants(payload) {
    function __queryStoreVariants({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'POST',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.QueryStoreVariants',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/variants/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'variants.media.image.urlExpirationDate' },
                        { path: 'variants.media.video.urlExpirationDate' },
                        { path: 'variants.media.video.resolutions.urlExpirationDate' },
                        {
                            path: 'variants.media.video.resolutions.poster.urlExpirationDate',
                        },
                        { path: 'variants.media.video.posters.urlExpirationDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'variants.media.image.focalPoint.x' },
                        { path: 'variants.media.image.focalPoint.y' },
                        { path: 'variants.media.video.resolutions.poster.focalPoint.x' },
                        { path: 'variants.media.video.resolutions.poster.focalPoint.y' },
                        { path: 'variants.media.video.posters.focalPoint.x' },
                        { path: 'variants.media.video.posters.focalPoint.y' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryStoreVariants;
}
exports.queryStoreVariants = queryStoreVariants;
/** Retrieves a store variant with the provided ID. */
function getStoreVariant(payload) {
    function __getStoreVariant({ host }) {
        const metadata = {
            entityFqdn: 'wix.stores.catalog.v1.product',
            method: 'GET',
            methodFqn: 'wix.catalog.api.v1.CatalogReadApi.GetStoreVariant',
            packageName: PACKAGE_NAME,
            url: resolveWixCatalogApiV1CatalogReadApiUrl({
                protoPath: '/v1/variants/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'variant.media.image.urlExpirationDate' },
                        { path: 'variant.media.video.urlExpirationDate' },
                        { path: 'variant.media.video.resolutions.urlExpirationDate' },
                        {
                            path: 'variant.media.video.resolutions.poster.urlExpirationDate',
                        },
                        { path: 'variant.media.video.posters.urlExpirationDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'variant.media.image.focalPoint.x' },
                        { path: 'variant.media.image.focalPoint.y' },
                        { path: 'variant.media.video.resolutions.poster.focalPoint.x' },
                        { path: 'variant.media.video.resolutions.poster.focalPoint.y' },
                        { path: 'variant.media.video.posters.focalPoint.x' },
                        { path: 'variant.media.video.posters.focalPoint.y' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getStoreVariant;
}
exports.getStoreVariant = getStoreVariant;
//# sourceMappingURL=stores-catalog-v1-product-products.http.js.map