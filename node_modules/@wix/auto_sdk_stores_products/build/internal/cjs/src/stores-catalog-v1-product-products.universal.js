"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStoreVariant = exports.queryStoreVariants = exports.queryProductVariants = exports.getProductOptionsAvailability = exports.getCollectionBySlug = exports.getProduct = exports.queryProducts = exports.bulkAdjustProductProperty = exports.bulkUpdateProductsProperty = exports.removeRibbon = exports.deleteCollection = exports.updateCollection = exports.createCollection = exports.removeBrand = exports.deleteProductOptions = exports.removeProductMediaFromChoices = exports.addProductMediaToChoices = exports.removeProductMedia = exports.addProductMedia = exports.removeProductsFromCollection = exports.addProductsToCollection = exports.resetAllProductVariantData = exports.updateProductVariants = exports.deleteProduct = exports.updateProduct = exports.createProduct = exports.WebhookIdentityType = exports.SortOrder = exports.Version = exports.FileType = exports.DiscountType = exports.OptionType = exports.MediaItemType = exports.MeasurementUnit = exports.InventoryStatus = exports.ProductType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixStoresCatalogV1Product = __importStar(require("./stores-catalog-v1-product-products.http.js"));
// @ts-ignore
const image_1 = require("@wix/sdk-runtime/transformations/image");
const video_v2_1 = require("@wix/sdk-runtime/transformations/video-v2");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var ProductType;
(function (ProductType) {
    ProductType["unspecified_product_type"] = "unspecified_product_type";
    ProductType["physical"] = "physical";
    ProductType["digital"] = "digital";
})(ProductType || (exports.ProductType = ProductType = {}));
var InventoryStatus;
(function (InventoryStatus) {
    /** In stock */
    InventoryStatus["IN_STOCK"] = "IN_STOCK";
    /** Not in stock */
    InventoryStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Some of the variants are not in stock */
    InventoryStatus["PARTIALLY_OUT_OF_STOCK"] = "PARTIALLY_OUT_OF_STOCK";
})(InventoryStatus || (exports.InventoryStatus = InventoryStatus = {}));
var MeasurementUnit;
(function (MeasurementUnit) {
    MeasurementUnit["UNSPECIFIED"] = "UNSPECIFIED";
    MeasurementUnit["ML"] = "ML";
    MeasurementUnit["CL"] = "CL";
    MeasurementUnit["L"] = "L";
    MeasurementUnit["CBM"] = "CBM";
    MeasurementUnit["MG"] = "MG";
    MeasurementUnit["G"] = "G";
    MeasurementUnit["KG"] = "KG";
    MeasurementUnit["MM"] = "MM";
    MeasurementUnit["CM"] = "CM";
    MeasurementUnit["M"] = "M";
    MeasurementUnit["SQM"] = "SQM";
    MeasurementUnit["OZ"] = "OZ";
    MeasurementUnit["LB"] = "LB";
    MeasurementUnit["FLOZ"] = "FLOZ";
    MeasurementUnit["PT"] = "PT";
    MeasurementUnit["QT"] = "QT";
    MeasurementUnit["GAL"] = "GAL";
    MeasurementUnit["IN"] = "IN";
    MeasurementUnit["FT"] = "FT";
    MeasurementUnit["YD"] = "YD";
    MeasurementUnit["SQFT"] = "SQFT";
})(MeasurementUnit || (exports.MeasurementUnit = MeasurementUnit = {}));
var MediaItemType;
(function (MediaItemType) {
    MediaItemType["unspecified_media_item_type"] = "unspecified_media_item_type";
    /** Image media type. */
    MediaItemType["image"] = "image";
    /** Video media type. */
    MediaItemType["video"] = "video";
    /** Audio media type. */
    MediaItemType["audio"] = "audio";
    /** Document media type. */
    MediaItemType["document"] = "document";
    /** Zip media type. */
    MediaItemType["zip"] = "zip";
})(MediaItemType || (exports.MediaItemType = MediaItemType = {}));
var OptionType;
(function (OptionType) {
    /** Unspecified option type. */
    OptionType["unspecified_option_type"] = "unspecified_option_type";
    /** Drop down. */
    OptionType["drop_down"] = "drop_down";
    /** Color. */
    OptionType["color"] = "color";
})(OptionType || (exports.OptionType = OptionType = {}));
var DiscountType;
(function (DiscountType) {
    DiscountType["UNDEFINED"] = "UNDEFINED";
    /** No discount */
    DiscountType["NONE"] = "NONE";
    /** Discount by a fixed amount */
    DiscountType["AMOUNT"] = "AMOUNT";
    /** Discount by a percentage */
    DiscountType["PERCENT"] = "PERCENT";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
var FileType;
(function (FileType) {
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (exports.FileType = FileType = {}));
var Version;
(function (Version) {
    /** Version 1 of the catalog. */
    Version["V1_CATALOG"] = "V1_CATALOG";
    /** Version 3 of the catalog. */
    Version["V3_CATALOG"] = "V3_CATALOG";
})(Version || (exports.Version = Version = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a new product.
 * @param product - Product information.
 * @public
 * @requiredField product
 * @requiredField product.costAndProfitData.itemCost
 * @requiredField product.name
 * @requiredField product.priceData
 * @requiredField product.priceData.price
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.CreateProduct
 */
async function createProduct(product) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ product: product });
    const reqOpts = ambassadorWixStoresCatalogV1Product.createProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { product: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['product']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createProduct = createProduct;
/**
 * Updates specified fields in a product.
 * @param _id - Product ID (generated automatically by the catalog).
 * @public
 * @requiredField _id
 * @requiredField product
 * @param product - Product info to update.
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.UpdateProduct
 */
async function updateProduct(_id, product) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        product: { ...product, id: _id },
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.updateProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { product: '$[1]' },
            explicitPathsToArguments: { 'product.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'product']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateProduct = updateProduct;
/**
 * Deletes a product.
 * @param _id - ID of the product to delete.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.DeleteProduct
 */
async function deleteProduct(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.deleteProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteProduct = deleteProduct;
/**
 * Updates variants of a specified product.
 * @param _id - ID of the product with managed variants.
 * @param variants - Variant info to update.
 * @public
 * @requiredField _id
 * @requiredField variants
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.UpdateVariants
 */
async function updateProductVariants(_id, variants) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        variants: variants,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.updateVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', variants: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'variants']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateProductVariants = updateProductVariants;
/**
 * Resets the data (such as the price and the weight) of all variants for a given product to their default values.
 * @param _id - Product ID.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.ResetAllVariantData
 */
async function resetAllProductVariantData(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.resetAllVariantData(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.resetAllProductVariantData = resetAllProductVariantData;
/**
 * Adds products to a specified collection.
 * @param _id - Collection ID.
 * @param productIds - IDs of the products to add to the collection, separated by commas.
 * @public
 * @requiredField _id
 * @requiredField productIds
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.AddProductsToCollection
 */
async function addProductsToCollection(_id, productIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        productIds: productIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.addProductsToCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', productIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'productIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addProductsToCollection = addProductsToCollection;
/**
 * Deletes products from a specified collection.
 * @param _id - ID of the collection from which to remove products.
 * @param productIds - IDs of the products to remove from the collection.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField productIds
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.RemoveProductsFromCollection
 */
async function removeProductsFromCollection(_id, productIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        productIds: productIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.removeProductsFromCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', productIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'productIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeProductsFromCollection = removeProductsFromCollection;
/**
 * Adds media items to a specified product, either via URL or existing media ID.
 *
 * > **NOTE:** The URL is not validated and no event is triggered to indicate if the media was added successfully.
 * @param _id - Product ID.
 * @param media - Sources of media items already uploaded to the Wix site.
 * @public
 * @requiredField _id
 * @requiredField media
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.AddProductMedia
 */
async function addProductMedia(_id, media) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        media: media,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.addProductMedia(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', media: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'media']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addProductMedia = addProductMedia;
/**
 * Removes specified media items from a product.
 * Pass an empty array to remove all media items.
 * @param _id - Product ID.
 * @param mediaIds - List of media IDs to remove. Pass an empty array to delete all media items for the product.
 * @public
 * @requiredField _id
 * @requiredField mediaIds
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.RemoveProductMedia
 */
async function removeProductMedia(_id, mediaIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        mediaIds: mediaIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.removeProductMedia(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', mediaIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'mediaIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeProductMedia = removeProductMedia;
/**
 * Links media items that are already associated with a specific product to a choice within the same product.
 *
 * Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).
 *
 * To remove all existing media items, call the [Remove Product Media From Choices](https://dev.wix.com/api/rest/wix-stores/catalog/products/remove-product-media-from-choices) endpoint.
 * @param _id - Product ID.
 * @param media - Product media items and the choices to add the media to.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField media
 * @requiredField media.choice
 * @requiredField media.option
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.AddProductMediaToChoices
 */
async function addProductMediaToChoices(_id, media) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        media: media,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.addProductMediaToChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', media: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'media']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addProductMediaToChoices = addProductMediaToChoices;
/**
 * Removes media items from all or some of a product's choices.
 * (Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).)
 * @param _id - Product ID from whose choices to remove media items.
 * @param media - Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField media
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.RemoveProductMediaFromChoices
 */
async function removeProductMediaFromChoices(_id, media) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        media: media,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.removeProductMediaFromChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', media: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'media']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeProductMediaFromChoices = removeProductMediaFromChoices;
/**
 * Delete all options from a specific product. Only available when [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is disabled.
 * @param _id - ID of the product with options to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.DeleteProductOptions
 */
async function deleteProductOptions(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.deleteProductOptions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteProductOptions = deleteProductOptions;
/**
 * Deletes a product's brand.
 * @param _id - Product ID.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.RemoveBrand
 */
async function removeBrand(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.removeBrand(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeBrand = removeBrand;
/**
 * Creates a new collection.
 * @param collection - Collection info.
 * @public
 * @requiredField collection
 * @requiredField collection.name
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.CreateCollection
 */
async function createCollection(collection) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        collection: collection,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.createCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { collection: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['collection']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createCollection = createCollection;
/**
 * Updates specified properties of a collection. To add products to a collection, call the [addProductsToCollection](#addproductstocollection) function.
 * @param _id - Collection ID (generated automatically by the catalog).
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField collection
 * @param collection - Collection info to update.
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.UpdateCollection
 */
async function updateCollection(_id, collection) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        collection: { ...collection, id: _id },
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.updateCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { collection: '$[1]' },
            explicitPathsToArguments: { 'collection.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'collection']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCollection = updateCollection;
/**
 * Deletes a collection.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @param _id - ID of the collection to delete.
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.DeleteCollection
 */
async function deleteCollection(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.deleteCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteCollection = deleteCollection;
/**
 * Deletes a product's ribbon.
 * @param _id - Product ID.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.RemoveRibbon
 */
async function removeRibbon(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.removeRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeRibbon = removeRibbon;
/**
 * Updates a specified property for up to 100 products at a time.
 * @param ids - Product IDs.
 * @param set - Field to update.
 * @public
 * @documentationMaturity preview
 * @requiredField ids
 * @requiredField set
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.BulkUpdateProducts
 */
async function bulkUpdateProductsProperty(ids, set) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ ids: ids, set: set });
    const reqOpts = ambassadorWixStoresCatalogV1Product.bulkUpdateProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ids: '$[0]', set: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['ids', 'set']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdateProductsProperty = bulkUpdateProductsProperty;
/**
 * Adjusts a specified numerical property for up to 100 products at a time.
 * The property can be increased or decreased either by percentage or amount.
 * @param adjust - Numerical property to adjust.
 * @param ids - Product IDs.
 * @public
 * @documentationMaturity preview
 * @requiredField adjust
 * @requiredField ids
 * @permissionId WIX_STORES.MODIFY_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.catalog.api.v1.CatalogWriteApi.BulkAdjustProductProperties
 */
async function bulkAdjustProductProperty(adjust, ids) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        adjust: adjust,
        ids: ids,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.bulkAdjustProductProperties(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { adjust: '$[0]', ids: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['adjust', 'ids']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkAdjustProductProperty = bulkAdjustProductProperty;
/**
 * Returns a list of up to 100 products, given the provided paging, sorting and filtering.
 * @public
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.QueryProductsPlatformized
 */
function queryProducts() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV1Product.queryProductsPlatformized(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.products,
                pagingMetadata: transformedData?.metadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
exports.queryProducts = queryProducts;
/**
 * Retrieves a product with the provided ID.
 * @param _id - Requested product ID.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.GetProduct
 */
async function getProduct(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        includeMerchantSpecificData: options?.includeMerchantSpecificData,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.getProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                includeMerchantSpecificData: '$[1].includeMerchantSpecificData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getProduct = getProduct;
/**
 * Retrieves a collection with the provided slug.
 * @param slug - Slug of the collection to retrieve.
 * @public
 * @requiredField slug
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.GetCollectionBySlug
 */
async function getCollectionBySlug(slug) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ slug: slug });
    const reqOpts = ambassadorWixStoresCatalogV1Product.getCollectionBySlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { slug: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['slug']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getCollectionBySlug = getCollectionBySlug;
/**
 * Gets the availability of relevant product variants based on the product ID and selections provided. See [Use Cases](https://dev.wix.com/api/rest/wix-stores/catalog/use-cases) for an example.
 * @param _id - Requested product ID.
 * @param options - Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`.
 * @public
 * @requiredField _id
 * @requiredField options
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.ProductOptionsAvailability
 */
async function getProductOptionsAvailability(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        options: options,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.productOptionsAvailability(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', options: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getProductOptionsAvailability = getProductOptionsAvailability;
/**
 * Retrieves product variants, based on either choices (option-choice key-value pairs) or variant IDs.
 * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
 * @param _id - Requested product ID.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.QueryProductVariants
 */
async function queryProductVariants(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        choices: options?.choices,
        variantIds: options?.variantIds,
        paging: options?.paging,
        includeMerchantSpecificData: options?.includeMerchantSpecificData,
    });
    const reqOpts = ambassadorWixStoresCatalogV1Product.queryProductVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                choices: '$[1].choices',
                variantIds: '$[1].variantIds',
                paging: '$[1].paging',
                includeMerchantSpecificData: '$[1].includeMerchantSpecificData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryProductVariants = queryProductVariants;
/**
 * Retrieves up to 100 store variants, given the provided paging, filtering, and sorting.
 * @param query - Query options.
 * @public
 * @requiredField query
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.QueryStoreVariants
 */
async function queryStoreVariants(query) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ query: query });
    const reqOpts = ambassadorWixStoresCatalogV1Product.queryStoreVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_1.transformRESTImageToSDKImage,
                paths: [{ path: 'variants.media.image' }],
            },
            {
                transformFn: video_v2_1.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'variants.media.video' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { query: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['query']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryStoreVariants = queryStoreVariants;
/**
 * Retrieves a store variant with the provided ID.
 * @param _id - Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`.
 * @public
 * @requiredField _id
 * @permissionId WIX_STORES.READ_PRODUCTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.catalog.api.v1.CatalogReadApi.GetStoreVariant
 */
async function getStoreVariant(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixStoresCatalogV1Product.getStoreVariant(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_1.transformRESTImageToSDKImage,
                paths: [{ path: 'variant.media.image' }],
            },
            {
                transformFn: video_v2_1.transformRESTVideoV2ToSDKVideoV2,
                paths: [{ path: 'variant.media.video' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getStoreVariant = getStoreVariant;
//# sourceMappingURL=stores-catalog-v1-product-products.universal.js.map