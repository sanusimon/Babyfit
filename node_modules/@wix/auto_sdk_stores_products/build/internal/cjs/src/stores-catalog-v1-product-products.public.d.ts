import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AdjustValue, BulkAdjustProductPropertiesResponse, BulkAdjustProductPropertiesResponseNonNullableFields, BulkUpdateProductsResponse, BulkUpdateProductsResponseNonNullableFields, Collection, CreateCollectionResponse, CreateCollectionResponseNonNullableFields, CreateProductResponse, CreateProductResponseNonNullableFields, GetCollectionBySlugResponse, GetCollectionBySlugResponseNonNullableFields, GetProductOptions, GetProductResponse, GetProductResponseNonNullableFields, GetStoreVariantResponse, GetStoreVariantResponseNonNullableFields, MediaAssignmentToChoice, MediaDataForWrite, PlatformQuery, Product, ProductChangedEnvelope, ProductCollectionChangedEnvelope, ProductCollectionCreatedEnvelope, ProductCollectionDeletedEnvelope, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductOptionsAvailabilityResponse, ProductOptionsAvailabilityResponseNonNullableFields, ProductVariantsChangedEnvelope, ProductsQueryBuilder, QueryProductVariantsOptions, QueryProductVariantsResponse, QueryProductVariantsResponseNonNullableFields, QueryStoreVariantsResponse, QueryStoreVariantsResponseNonNullableFields, SetValue, UpdateCollection, UpdateCollectionResponse, UpdateCollectionResponseNonNullableFields, UpdateProduct, UpdateProductResponse, UpdateProductResponseNonNullableFields, UpdateVariantsResponse, UpdateVariantsResponseNonNullableFields, VariantOverride } from './stores-catalog-v1-product-products.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createProduct(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     * @param - Product information.
     */
    (product: Product): Promise<CreateProductResponse & CreateProductResponseNonNullableFields>;
}
export declare function updateProduct(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates specified fields in a product.
     * @param - Product ID (generated automatically by the catalog).
     * @param - Product info to update.
     */
    (_id: string, product: UpdateProduct): Promise<UpdateProductResponse & UpdateProductResponseNonNullableFields>;
}
export declare function deleteProduct(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product.
     * @param - ID of the product to delete.
     */
    (_id: string): Promise<void>;
}
export declare function updateProductVariants(httpClient: HttpClient): UpdateProductVariantsSignature;
interface UpdateProductVariantsSignature {
    /**
     * Updates variants of a specified product.
     * @param - ID of the product with managed variants.
     * @param - Variant info to update.
     */
    (_id: string, variants: VariantOverride[]): Promise<UpdateVariantsResponse & UpdateVariantsResponseNonNullableFields>;
}
export declare function resetAllProductVariantData(httpClient: HttpClient): ResetAllProductVariantDataSignature;
interface ResetAllProductVariantDataSignature {
    /**
     * Resets the data (such as the price and the weight) of all variants for a given product to their default values.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
export declare function addProductsToCollection(httpClient: HttpClient): AddProductsToCollectionSignature;
interface AddProductsToCollectionSignature {
    /**
     * Adds products to a specified collection.
     * @param - Collection ID.
     * @param - IDs of the products to add to the collection, separated by commas.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
export declare function removeProductsFromCollection(httpClient: HttpClient): RemoveProductsFromCollectionSignature;
interface RemoveProductsFromCollectionSignature {
    /**
     * Deletes products from a specified collection.
     * @param - ID of the collection from which to remove products.
     * @param - IDs of the products to remove from the collection.
     */
    (_id: string, productIds: string[]): Promise<void>;
}
export declare function addProductMedia(httpClient: HttpClient): AddProductMediaSignature;
interface AddProductMediaSignature {
    /**
     * Adds media items to a specified product, either via URL or existing media ID.
     *
     * > **NOTE:** The URL is not validated and no event is triggered to indicate if the media was added successfully.
     * @param - Product ID.
     * @param - Sources of media items already uploaded to the Wix site.
     */
    (_id: string, media: MediaDataForWrite[]): Promise<void>;
}
export declare function removeProductMedia(httpClient: HttpClient): RemoveProductMediaSignature;
interface RemoveProductMediaSignature {
    /**
     * Removes specified media items from a product.
     * Pass an empty array to remove all media items.
     * @param - Product ID.
     * @param - List of media IDs to remove. Pass an empty array to delete all media items for the product.
     */
    (_id: string, mediaIds: string[]): Promise<void>;
}
export declare function addProductMediaToChoices(httpClient: HttpClient): AddProductMediaToChoicesSignature;
interface AddProductMediaToChoicesSignature {
    /**
     * Links media items that are already associated with a specific product to a choice within the same product.
     *
     * Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).
     *
     * To remove all existing media items, call the [Remove Product Media From Choices](https://dev.wix.com/api/rest/wix-stores/catalog/products/remove-product-media-from-choices) endpoint.
     * @param - Product ID.
     * @param - Product media items and the choices to add the media to.
     */
    (_id: string, media: MediaAssignmentToChoice[]): Promise<void>;
}
export declare function removeProductMediaFromChoices(httpClient: HttpClient): RemoveProductMediaFromChoicesSignature;
interface RemoveProductMediaFromChoicesSignature {
    /**
     * Removes media items from all or some of a product's choices.
     * (Media items can only be set for choices within one option at a time - e.g., if you set media items for some or all of the choices within the Colors option (blue, green, and red), you won't be able to also assign media items to choices within the Size option (S, M, and L).)
     * @param - Product ID from whose choices to remove media items.
     * @param - Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product.
     */
    (_id: string, media: MediaAssignmentToChoice[]): Promise<void>;
}
export declare function deleteProductOptions(httpClient: HttpClient): DeleteProductOptionsSignature;
interface DeleteProductOptionsSignature {
    /**
     * Delete all options from a specific product. Only available when [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is disabled.
     * @param - ID of the product with options to delete.
     */
    (_id: string): Promise<void>;
}
export declare function removeBrand(httpClient: HttpClient): RemoveBrandSignature;
interface RemoveBrandSignature {
    /**
     * Deletes a product's brand.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
export declare function createCollection(httpClient: HttpClient): CreateCollectionSignature;
interface CreateCollectionSignature {
    /**
     * Creates a new collection.
     * @param - Collection info.
     */
    (collection: Collection): Promise<CreateCollectionResponse & CreateCollectionResponseNonNullableFields>;
}
export declare function updateCollection(httpClient: HttpClient): UpdateCollectionSignature;
interface UpdateCollectionSignature {
    /**
     * Updates specified properties of a collection. To add products to a collection, call the [addProductsToCollection](#addproductstocollection) function.
     * @param - Collection ID (generated automatically by the catalog).
     * @param - Collection info to update.
     */
    (_id: string | null, collection: UpdateCollection): Promise<UpdateCollectionResponse & UpdateCollectionResponseNonNullableFields>;
}
export declare function deleteCollection(httpClient: HttpClient): DeleteCollectionSignature;
interface DeleteCollectionSignature {
    /**
     * Deletes a collection.
     * @param - ID of the collection to delete.
     */
    (_id: string): Promise<void>;
}
export declare function removeRibbon(httpClient: HttpClient): RemoveRibbonSignature;
interface RemoveRibbonSignature {
    /**
     * Deletes a product's ribbon.
     * @param - Product ID.
     */
    (_id: string): Promise<void>;
}
export declare function bulkUpdateProductsProperty(httpClient: HttpClient): BulkUpdateProductsPropertySignature;
interface BulkUpdateProductsPropertySignature {
    /**
     * Updates a specified property for up to 100 products at a time.
     * @param - Product IDs.
     * @param - Field to update.
     */
    (ids: string[], set: SetValue): Promise<BulkUpdateProductsResponse & BulkUpdateProductsResponseNonNullableFields>;
}
export declare function bulkAdjustProductProperty(httpClient: HttpClient): BulkAdjustProductPropertySignature;
interface BulkAdjustProductPropertySignature {
    /**
     * Adjusts a specified numerical property for up to 100 products at a time.
     * The property can be increased or decreased either by percentage or amount.
     * @param - Numerical property to adjust.
     * @param - Product IDs.
     */
    (adjust: AdjustValue, ids: string[]): Promise<BulkAdjustProductPropertiesResponse & BulkAdjustProductPropertiesResponseNonNullableFields>;
}
export declare function queryProducts(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Returns a list of up to 100 products, given the provided paging, sorting and filtering.
     */
    (): ProductsQueryBuilder;
}
export declare function getProduct(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product with the provided ID.
     * @param - Requested product ID.
     */
    (_id: string, options?: GetProductOptions | undefined): Promise<GetProductResponse & GetProductResponseNonNullableFields>;
}
export declare function getCollectionBySlug(httpClient: HttpClient): GetCollectionBySlugSignature;
interface GetCollectionBySlugSignature {
    /**
     * Retrieves a collection with the provided slug.
     * @param - Slug of the collection to retrieve.
     */
    (slug: string): Promise<GetCollectionBySlugResponse & GetCollectionBySlugResponseNonNullableFields>;
}
export declare function getProductOptionsAvailability(httpClient: HttpClient): GetProductOptionsAvailabilitySignature;
interface GetProductOptionsAvailabilitySignature {
    /**
     * Gets the availability of relevant product variants based on the product ID and selections provided. See [Use Cases](https://dev.wix.com/api/rest/wix-stores/catalog/use-cases) for an example.
     * @param - Requested product ID.
     * @param - Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`.
     */
    (_id: string, options: Record<string, string>): Promise<ProductOptionsAvailabilityResponse & ProductOptionsAvailabilityResponseNonNullableFields>;
}
export declare function queryProductVariants(httpClient: HttpClient): QueryProductVariantsSignature;
interface QueryProductVariantsSignature {
    /**
     * Retrieves product variants, based on either choices (option-choice key-value pairs) or variant IDs.
     * See [Stores Pagination](https://dev.wix.com/api/rest/wix-stores/pagination) for more information.
     * @param - Requested product ID.
     */
    (_id: string, options?: QueryProductVariantsOptions | undefined): Promise<QueryProductVariantsResponse & QueryProductVariantsResponseNonNullableFields>;
}
export declare function queryStoreVariants(httpClient: HttpClient): QueryStoreVariantsSignature;
interface QueryStoreVariantsSignature {
    /**
     * Retrieves up to 100 store variants, given the provided paging, filtering, and sorting.
     * @param - Query options.
     */
    (query: PlatformQuery): Promise<QueryStoreVariantsResponse & QueryStoreVariantsResponseNonNullableFields>;
}
export declare function getStoreVariant(httpClient: HttpClient): GetStoreVariantSignature;
interface GetStoreVariantSignature {
    /**
     * Retrieves a store variant with the provided ID.
     * @param - Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`.
     */
    (_id: string): Promise<GetStoreVariantResponse & GetStoreVariantResponseNonNullableFields>;
}
export declare const onProductCollectionChanged: EventDefinition<ProductCollectionChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionChanged">;
export declare const onProductCollectionCreated: EventDefinition<ProductCollectionCreatedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionCreated">;
export declare const onProductCollectionDeleted: EventDefinition<ProductCollectionDeletedEnvelope, "com.wix.ecommerce.catalog.api.v1.CollectionDeleted">;
export declare const onProductChanged: EventDefinition<ProductChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductChanged">;
export declare const onProductCreated: EventDefinition<ProductCreatedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductCreated">;
export declare const onProductDeleted: EventDefinition<ProductDeletedEnvelope, "com.wix.ecommerce.catalog.api.v1.ProductDeleted">;
export declare const onProductVariantsChanged: EventDefinition<ProductVariantsChangedEnvelope, "com.wix.ecommerce.catalog.api.v1.VariantsChanged">;
export { AddProductMediaRequest, AddProductMediaResponse, AddProductMediaToChoicesRequest, AddProductMediaToChoicesResponse, AddProductsToCollectionRequest, AddProductsToCollectionResponse, AdditionalInfoSection, AdjustValue, AdjustValueValueOneOf, AggregateProductsRequest, AggregateProductsResponse, AllowedProductsCountLimitExceededErrorData, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkAdjustProductPropertiesByFilterSyncRequest, BulkAdjustProductPropertiesByFilterSyncResponse, BulkAdjustProductPropertiesRequest, BulkAdjustProductPropertiesResponse, BulkAdjustProductPropertiesResponseNonNullableFields, BulkDeleteProductsRequest, BulkDeleteProductsResponse, BulkProductResult, BulkQueryCustomFieldsRequest, BulkQueryCustomFieldsResponse, BulkRemoveCustomFieldsRequest, BulkRemoveCustomFieldsResponse, BulkSetCustomFieldsRequest, BulkSetCustomFieldsResponse, BulkUpdateProductsByFilterSyncRequest, BulkUpdateProductsByFilterSyncResponse, BulkUpdateProductsRequest, BulkUpdateProductsResponse, BulkUpdateProductsResponseNonNullableFields, Choice, Collection, CollectionChanged, CollectionCreated, CollectionDeleted, CostAndProfitData, CreateCollectionRequest, CreateCollectionResponse, CreateCollectionResponseNonNullableFields, CreateDigitalProductRequest, CreateDigitalProductResponse, CreateProductPlatformizedRequest, CreateProductPlatformizedResponse, CreateProductRequest, CreateProductResponse, CreateProductResponseNonNullableFields, CursorPaging, Cursors, CustomFieldsContainer, CustomTextField, DeleteCollectionRequest, DeleteCollectionResponse, DeleteProductOptionsRequest, DeleteProductOptionsResponse, DeleteProductPlatformizedRequest, DeleteProductPlatformizedResponse, DeleteProductRequest, DeleteProductResponse, Discount, DiscountType, FileType, FocalPoint, FormattedPrice, GetCollectionBySlugRequest, GetCollectionBySlugResponse, GetCollectionBySlugResponseNonNullableFields, GetCollectionRequest, GetCollectionResponse, GetProductOptions, GetProductPlatformizedRequest, GetProductPlatformizedResponse, GetProductRequest, GetProductResponse, GetProductResponseNonNullableFields, GetProductsRequest, GetProductsResponse, GetStoreVariantRequest, GetStoreVariantResponse, GetStoreVariantResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InventoryStatus, ItemMetadata, Keyword, MeasurementUnit, Media, MediaAssignmentToChoice, MediaDataForWrite, MediaDataForWriteMediaSourceOneOf, MediaItem, MediaItemItemOneOf, MediaItemType, MediaItemUrlAndSize, MediaItemVideo, MessageEnvelope, NumericPropertyRange, OptionAndChoice, OptionType, PageUrl, Paging, PagingMetadata, PagingWithBigLimit, PercentageData, PlatformMedia, PlatformMediaMediaOneOf, PlatformPaging, PlatformPagingMetadata, PlatformQuery, PlatformQueryPagingMethodOneOf, PreorderInfo, PriceData, PricePerUnitData, Product, ProductChanged, ProductChangedEnvelope, ProductCollectionChangedEnvelope, ProductCollectionCreatedEnvelope, ProductCollectionDeletedEnvelope, ProductCreated, ProductCreatedEnvelope, ProductDeleted, ProductDeletedEnvelope, ProductOption, ProductOptionsAvailabilityRequest, ProductOptionsAvailabilityResponse, ProductOptionsAvailabilityResponseNonNullableFields, ProductType, ProductVariantsChangedEnvelope, ProductsQueryBuilder, ProductsQueryResult, PropertyAdjustmentData, PropertyAdjustmentDataByOneOf, Query, QueryCollectionsPlatformizedRequest, QueryCollectionsPlatformizedResponse, QueryCollectionsRequest, QueryCollectionsResponse, QueryCustomFieldsRequest, QueryCustomFieldsResponse, QueryProductVariantsOptions, QueryProductVariantsRequest, QueryProductVariantsResponse, QueryProductVariantsResponseNonNullableFields, QueryProductsPlatformizedRequest, QueryProductsPlatformizedResponse, QueryProductsPlatformizedResponseNonNullableFields, QueryProductsRequest, QueryProductsResponse, QueryProductsWithBigPageLimitRequest, QueryStoreVariantsRequest, QueryStoreVariantsResponse, QueryStoreVariantsResponseNonNullableFields, QueryStoreVariantsWithBigLimitRequest, QueryWithBigPageLimit, ReCloneStoreRequest, ReCloneStoreResponse, RemoveCustomFieldsRequest, RemoveCustomFieldsResponse, RemoveProductBrandRequest, RemoveProductBrandResponse, RemoveProductMediaFromChoicesRequest, RemoveProductMediaFromChoicesResponse, RemoveProductMediaRequest, RemoveProductMediaResponse, RemoveProductRibbonRequest, RemoveProductRibbonResponse, RemoveProductsFromCollectionRequest, RemoveProductsFromCollectionResponse, ResetAllVariantDataRequest, ResetAllVariantDataResponse, Ribbon, SecuredMedia, SeoSchema, SetCustomFieldsRequest, SetCustomFieldsResponse, SetValue, SetValueValueOneOf, Settings, SortOrder, Sorting, Stock, StoreVariant, Tag, UnlimitedPlatformCursorPaging, UnlimitedPlatformPaging, UnlimitedPlatformQuery, UnlimitedPlatformQueryPagingMethodOneOf, UpdateCollection, UpdateCollectionRequest, UpdateCollectionResponse, UpdateCollectionResponseNonNullableFields, UpdateProduct, UpdateProductPlatformizedRequest, UpdateProductPlatformizedResponse, UpdateProductRequest, UpdateProductResponse, UpdateProductResponseNonNullableFields, UpdateVariantsRequest, UpdateVariantsResponse, UpdateVariantsResponseNonNullableFields, V1CreateProductPlatformizedRequest, V1CreateProductPlatformizedResponse, V1DeleteProductPlatformizedRequest, V1DeleteProductPlatformizedResponse, V1UpdateProductPlatformizedRequest, V1UpdateProductPlatformizedResponse, Variant, VariantChanged, VariantData, VariantDataWithNoStock, VariantOverride, VariantStock, VariantsChanged, Version, VideoResolution, WebhookIdentityType, } from './stores-catalog-v1-product-products.universal.js';
