export interface Product {
    /**
     * Product ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string;
    /**
     * Product name.
     *
     * Min: 1 character
     * Max: 80 characters
     */
    name?: string | null;
    /** A friendly URL name (generated automatically by the catalog when a product is created), can be updated. */
    slug?: string;
    /** Whether the product is visible to site visitors. */
    visible?: boolean | null;
    /** Currently, only creating physical products ( `"productType": "physical"` ) is supported via the API. */
    productType?: ProductType;
    /** Product description. Accepts [rich text](https://dev.wix.com/api/rest/wix-stores/rich-text). */
    description?: string | null;
    /** Stock keeping unit. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, SKUs will be set per variant, and this field will be empty. */
    sku?: string | null;
    /** Product weight. If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled, weight will be set per variant, and this field will be empty. */
    weight?: number | null;
    /**
     * Product weight range. The minimum and maximum weights of all the variants.
     * @readonly
     */
    weightRange?: NumericPropertyRange;
    /**
     * Product inventory status (in future this will be writable via Inventory API).
     * @readonly
     */
    stock?: Stock;
    /**
     * Deprecated (use `priceData` instead).
     * @readonly
     * @deprecated
     */
    price?: PriceData;
    /** Price data. */
    priceData?: PriceData;
    /**
     * Price data, converted to the currency specified in request header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /**
     * Product price range. The minimum and maximum prices of all the variants.
     * @readonly
     */
    priceRange?: NumericPropertyRange;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /**
     * Product cost range. The minimum and maximum costs of all the variants.
     * @readonly
     */
    costRange?: NumericPropertyRange;
    /** Price per unit data. */
    pricePerUnitData?: PricePerUnitData;
    /** Additional text that the store owner can assign to the product (e.g. shipping details, refund policy, etc.). */
    additionalInfoSections?: AdditionalInfoSection[];
    /**
     * Deprecated (use `ribbon` instead).
     * @readonly
     * @deprecated
     */
    ribbons?: Ribbon[];
    /**
     * Media items (images, videos etc) associated with this product (writable via [Add Product Media](https://dev.wix.com/api/rest/wix-stores/catalog/products/add-product-media) endpoint).
     * @readonly
     */
    media?: Media;
    /**
     * Text box for the customer to add a message to their order (e.g., customization request). Currently writable only from the UI.
     * @readonly
     */
    customTextFields?: CustomTextField[];
    /** Whether variants are being managed for this product - enables unique SKU, price and weight per variant. Also affects inventory data. */
    manageVariants?: boolean | null;
    /** Options for this product. */
    productOptions?: ProductOption[];
    /**
     * Product page URL for this product (generated automatically by the server).
     * @readonly
     */
    productPageUrl?: PageUrl;
    /**
     * Productâ€™s unique numeric ID (assigned in ascending order).
     * Primarily used for sorting and filtering when crawling all products.
     * @readonly
     */
    numericId?: string;
    /**
     * Inventory item ID - ID referencing the inventory system.
     * @readonly
     */
    inventoryItemId?: string;
    /** Discount deducted from the product's original price. */
    discount?: Discount;
    /**
     * A list of all collection IDs that this product is included in (writable via the Catalog > Collection APIs).
     * @readonly
     */
    collectionIds?: string[];
    /**
     * Product variants, will be provided if the the request was sent with the `includeVariants: true`.
     *
     * Max: 1,000 variants
     * @readonly
     */
    variants?: Variant[];
    /**
     * Date and time the product was last updated.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    createdDate?: Date | null;
    /** Custom SEO data for the product. */
    seoData?: SeoSchema;
    /** Product ribbon. Used to highlight relevant information about a product. For example, "Sale", "New Arrival", "Sold Out". */
    ribbon?: string | null;
    /** Product brand. Including a brand name can help improve site and product [visibility on search engines](https://support.wix.com/en/article/adding-brand-names-to-boost-product-page-seo-in-wix-stores). */
    brand?: string | null;
}
export declare enum ProductType {
    unspecified_product_type = "unspecified_product_type",
    physical = "physical",
    digital = "digital"
}
export interface NumericPropertyRange {
    /** Minimum value. */
    minValue?: number;
    /** Maximum value. */
    maxValue?: number;
}
export interface Stock {
    /** Whether inventory is being tracked */
    trackInventory?: boolean;
    /** Quantity currently left in inventory */
    quantity?: number | null;
    /**
     * Whether the product is currently in stock (relevant only when tracking manually)
     * Deprecated (use `inventoryStatus` instead)
     * @deprecated
     */
    inStock?: boolean;
    /**
     * The current status of the inventory
     * + `IN_STOCK` - In stock
     * + `OUT_OF_STOCK` - Not in stock
     * + `PARTIALLY_OUT_OF_STOCK` - Some of the variants are not in stock
     */
    inventoryStatus?: InventoryStatus;
}
export declare enum InventoryStatus {
    /** In stock */
    IN_STOCK = "IN_STOCK",
    /** Not in stock */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Some of the variants are not in stock */
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
export interface PriceData {
    /**
     * Product price currency
     * @readonly
     */
    currency?: string;
    /** Product price */
    price?: number | null;
    /**
     * Discounted product price (if no discounted price is set, the product price is returned)
     * @readonly
     */
    discountedPrice?: number;
    /**
     * The product price and discounted price, formatted with the currency
     * @readonly
     */
    formatted?: FormattedPrice;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: number | null;
}
export interface FormattedPrice {
    /** Product price formatted with the currency */
    price?: string;
    /** Discounted product price formatted with the currency (if no discounted price is set, the product formatted price is returned) */
    discountedPrice?: string;
    /**
     * Price per unit
     * @readonly
     */
    pricePerUnit?: string | null;
}
export interface CostAndProfitData {
    /** Item cost. */
    itemCost?: number | null;
    /**
     * Item cost formatted with currency symbol.
     * @readonly
     */
    formattedItemCost?: string;
    /**
     * Profit. Calculated by reducing `cost` from `discounted_price`.
     * @readonly
     */
    profit?: number;
    /**
     * Profit formatted with currency symbol.
     * @readonly
     */
    formattedProfit?: string;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discounted_price`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
export interface PricePerUnitData {
    /** Total quantity */
    totalQuantity?: number;
    /** Total measurement unit */
    totalMeasurementUnit?: MeasurementUnit;
    /** Base quantity */
    baseQuantity?: number;
    /** Base measurement unit */
    baseMeasurementUnit?: MeasurementUnit;
}
export declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
export interface AdditionalInfoSection {
    /** Product info section title */
    title?: string;
    /** Product info section description */
    description?: string;
}
export interface Ribbon {
    /** Ribbon text */
    text?: string;
}
export interface Media {
    /** Primary media (image, video etc) associated with this product. */
    mainMedia?: MediaItem;
    /** Media (images, videos etc) associated with this product. */
    items?: MediaItem[];
}
export interface MediaItem extends MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
    /** Media item thumbnail details. */
    thumbnail?: MediaItemUrlAndSize;
    /** Media item type (image, video, etc.). */
    mediaType?: MediaItemType;
    /** Media item title. */
    title?: string;
    /** Media ID (for example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`). */
    id?: string;
}
/** @oneof */
export interface MediaItemItemOneOf {
    /** Image data (URL, size). */
    image?: MediaItemUrlAndSize;
    /** Video data (URL, size). */
    video?: MediaItemVideo;
}
export interface MediaItemUrlAndSize {
    /** Media item URL. */
    url?: string;
    /** Media item width. */
    width?: number;
    /** Media item height. */
    height?: number;
    /** Media format (mp4, png, etc.). */
    format?: string | null;
    /** Alt text. This text will be shown in case the image is not available. */
    altText?: string | null;
}
export declare enum MediaItemType {
    unspecified_media_item_type = "unspecified_media_item_type",
    /** Image media type. */
    image = "image",
    /** Video media type. */
    video = "video",
    /** Audio media type. */
    audio = "audio",
    /** Document media type. */
    document = "document",
    /** Zip media type. */
    zip = "zip"
}
export interface MediaItemVideo {
    /** Data (URL, size) about each resolution for which this video is available. */
    files?: MediaItemUrlAndSize[];
    /** ID of an image taken from the video. Used primarily for Wix Search indexing. For example, `"nsplsh_306d666a123a4a74306459~mv2_d_4517_2992_s_4_2.jpg"`. */
    stillFrameMediaId?: string;
}
export interface CustomTextField {
    /** Text box title */
    title?: string;
    /** Text box input max length */
    maxLength?: number;
    /** Whether this text box is mandatory */
    mandatory?: boolean;
}
export interface ProductOption {
    /**
     * Option type.
     * @readonly
     */
    optionType?: OptionType;
    /** Option name. */
    name?: string;
    /** Choices available for this option. */
    choices?: Choice[];
}
export declare enum OptionType {
    /** Unspecified option type. */
    unspecified_option_type = "unspecified_option_type",
    /** Drop down. */
    drop_down = "drop_down",
    /** Color. */
    color = "color"
}
export interface Choice {
    /** Choice value. */
    value?: string;
    /** Choice description. */
    description?: string;
    /**
     * Media items (images, videos) associated with this choice
     * @readonly
     */
    media?: Media;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are in stock
     * @readonly
     */
    inStock?: boolean;
    /**
     * Based on the customerâ€™s choices, which (if any) variants that include the selected choices are visible
     * @readonly
     */
    visible?: boolean;
}
export interface PageUrl {
    /** Base URL. For premium sites, this is the domain. For free sites, this is the site URL (e.g mysite.wixsite.com/mysite). */
    base?: string;
    /** Path to the product page - e.g /product-page/a-product. */
    path?: string;
}
export interface Discount {
    /**
     * Discount type:
     * + `"AMOUNT"`
     * + `"PERCENT"`
     */
    type?: DiscountType;
    /** Discount value */
    value?: number;
}
export declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    NONE = "NONE",
    /** Discount by a fixed amount */
    AMOUNT = "AMOUNT",
    /** Discount by a percentage */
    PERCENT = "PERCENT"
}
export interface Variant {
    /** Requested Variant ID */
    id?: string;
    /** Specific choices within a selection, as option-choice key-value pairs */
    choices?: Record<string, string>;
    variant?: VariantDataWithNoStock;
    /**
     * Variant inventory status.
     * @readonly
     */
    stock?: VariantStock;
}
export interface VariantDataWithNoStock {
    /** Variant price. */
    priceData?: PriceData;
    /**
     * Variant price data, converted to currency requested in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Cost and profit data. */
    costAndProfitData?: CostAndProfitData;
    /** Variant weight. */
    weight?: number;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
export interface VariantStock {
    /** Whether inventory is being tracked. */
    trackQuantity?: boolean;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
export interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
export interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
export interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
export interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
export interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
export declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
export interface CreateProductRequest {
    /** Product information. */
    product?: Product;
}
export interface CreateProductResponse {
    product?: Product;
}
export interface CreateProductPlatformizedRequest {
    /** Product information. */
    product?: Product;
}
export interface CreateProductPlatformizedResponse {
    product?: Product;
}
export interface CreateDigitalProductRequest {
    /** Product information. */
    product?: Product;
}
export interface CreateDigitalProductResponse {
    /** Created product. */
    product?: Product;
}
export interface UpdateProductRequest {
    product: Product;
}
export interface UpdateProductResponse {
    product?: Product;
}
export interface UpdateProductPlatformizedRequest {
    product?: Product;
}
export interface UpdateProductPlatformizedResponse {
    product?: Product;
}
export interface DeleteProductRequest {
    /** ID of the product to delete. */
    id: string;
}
export interface DeleteProductResponse {
}
export interface DeleteProductPlatformizedRequest {
    /** ID of the product to delete. */
    id?: string;
}
export interface DeleteProductPlatformizedResponse {
}
export interface BulkDeleteProductsRequest {
    /** IDs of the products to be deleted. */
    ids?: string[];
}
export interface BulkDeleteProductsResponse {
}
export interface UpdateVariantsRequest {
    /** ID of the product with managed variants. */
    id: string;
    /** Variant info to update. */
    variants?: VariantOverride[];
}
export interface VariantOverride {
    /** The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice). You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (Not relevant when passing variant IDs) */
    choices?: Record<string, string>;
    /**
     * List of variant IDs
     * (Not relevant when passing choices)
     */
    variantIds?: string[];
    /** Variant price */
    price?: number | null;
    /** Variant cost of goods */
    cost?: number | null;
    /** Variant weight */
    weight?: number | null;
    /** Variant SKU (stock keeping unit) */
    sku?: string | null;
    /** Whether the variant is visible to  customers */
    visible?: boolean | null;
}
export interface UpdateVariantsResponse {
    /** List of the product's variants. */
    variants?: Variant[];
}
export interface ResetAllVariantDataRequest {
    /** Product ID. */
    id: string;
}
export interface ResetAllVariantDataResponse {
}
export interface AddProductsToCollectionRequest {
    /** Collection ID. */
    id: string;
    /** IDs of the products to add to the collection, separated by commas. */
    productIds?: string[];
}
export interface AddProductsToCollectionResponse {
}
export interface RemoveProductsFromCollectionRequest {
    /** Collection ID. */
    id: string;
    /** IDs of the products to remove from the collection. */
    productIds: string[];
}
export interface RemoveProductsFromCollectionResponse {
}
export interface AddProductMediaRequest {
    /** Product ID. */
    id: string;
    /** Sources of media items already uploaded to the Wix site. */
    media?: MediaDataForWrite[];
}
export interface MediaDataForWrite extends MediaDataForWriteMediaSourceOneOf {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
    /**
     * Assign this media item to a specific product choice.
     * Note that you may set media items for choices under only one option (e.g., if Colors blue, green, and red have media items, Sizes S, M, and L can't have media items assigned to them).
     * You may clear existing media from choices with the [Remove Product Media From Choices](/catalog/products/remove-product-media-from-choices).
     */
    choice?: OptionAndChoice;
}
/** @oneof */
export interface MediaDataForWriteMediaSourceOneOf {
    /** Media ID. For media items previously saved in Wix Media, the media ID is returned in the Query Product response. */
    mediaId?: string;
    /** Media external URL (for new media items). */
    url?: string;
}
export interface OptionAndChoice {
    /** Option to add the media to. */
    option?: string;
    /** Choice to add the media to. */
    choice?: string;
}
export interface AddProductMediaResponse {
}
export interface RemoveProductMediaRequest {
    /** Product ID. */
    id: string;
    /** List of media IDs to remove. Pass an empty array to delete all media items for the product. */
    mediaIds?: string[];
}
export interface RemoveProductMediaResponse {
}
export interface AddProductMediaToChoicesRequest {
    /** Product ID. */
    id: string;
    /** Product media items and the choices to add the media to. */
    media?: MediaAssignmentToChoice[];
}
export interface MediaAssignmentToChoice {
    /** Option name. */
    option?: string;
    /** Choice name. */
    choice?: string;
    /** Media IDs (available via the Query Product endpoint). */
    mediaIds?: string[];
}
export interface AddProductMediaToChoicesResponse {
}
export interface RemoveProductMediaFromChoicesRequest {
    /** Product ID from whose choices to remove media items. */
    id: string;
    /** Media to remove from choices. If an empty array is passed, all media will be removed from all choices for the given product. */
    media?: MediaAssignmentToChoice[];
}
export interface RemoveProductMediaFromChoicesResponse {
}
export interface DeleteProductOptionsRequest {
    /** ID of the product with options to delete. */
    id: string;
}
export interface DeleteProductOptionsResponse {
}
export interface SetCustomFieldsRequest {
    /** Product ID. */
    id?: string;
    /** Custom field that will be added, if a custom field with the same name already exists, the value of the custom field will be overridden. */
    customFields?: Record<string, any>;
}
export interface SetCustomFieldsResponse {
}
export interface RemoveCustomFieldsRequest {
    /** Product ID. */
    id?: string;
    /** Custom fields to be removed (by name). */
    names?: string[];
}
export interface RemoveCustomFieldsResponse {
}
export interface RemoveProductBrandRequest {
    /** Product ID. */
    id: string;
}
export interface RemoveProductBrandResponse {
}
export interface BulkSetCustomFieldsRequest {
    /** Filter string. */
    filter?: string | null;
    /** Custom field that will be added, if a custom field with same name already exists, the value of the custom field will be overridden. */
    customFields?: Record<string, any>;
}
export interface BulkSetCustomFieldsResponse {
}
export interface BulkRemoveCustomFieldsRequest {
    /** Filter string. */
    filter?: string | null;
    /** Custom fields names. */
    names?: string[];
}
export interface BulkRemoveCustomFieldsResponse {
}
export interface CreateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
export interface Collection {
    /**
     * Collection ID (generated automatically by the catalog).
     * @readonly
     */
    id?: string | null;
    /** Collection name. */
    name?: string | null;
    /**
     * Media items (images, videos etc) associated with this collection. Read only.
     * @readonly
     */
    media?: Media;
    /**
     * Number of products in the collection. Read only.
     * @readonly
     */
    numberOfProducts?: number;
    /** Collection description. */
    description?: string | null;
    /** Collection slug. */
    slug?: string | null;
    /** Collection visibility. Only impacts dynamic pages, no impact on static pages. Default: `true`. */
    visible?: boolean | null;
}
export interface CreateCollectionResponse {
    /** Collection. */
    collection?: Collection;
}
export interface UpdateCollectionRequest {
    /** Collection info. */
    collection: Collection;
}
export interface UpdateCollectionResponse {
    /** Updated collection. */
    collection?: Collection;
}
export interface DeleteCollectionRequest {
    /** ID of the collection to delete. */
    id: string;
}
export interface DeleteCollectionResponse {
}
export interface RemoveProductRibbonRequest {
    /** Product ID. */
    id: string;
}
export interface RemoveProductRibbonResponse {
}
export interface BulkUpdateProductsRequest {
    /** Product IDs. */
    ids: string[];
    /** Field to update. */
    set?: SetValue;
}
export interface SetValue extends SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
/** @oneof */
export interface SetValueValueOneOf {
    /**
     * Set product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variant prices will be calculated according to the set product price.
     * If variant price is negative after setting new price, the update will fail.
     */
    price?: number;
    /**
     * Set product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be set per variant.
     */
    cost?: number;
    /**
     * Set product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be set per variant.
     */
    weight?: number;
    /** Set product ribbon. Pass empty string to remove existing ribbon. */
    ribbon?: string;
    /** Set product brand. Pass empty string to remove existing brand. */
    brand?: string;
}
export interface BulkUpdateProductsResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkProductResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface BulkUpdateProductsByFilterSyncRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/stores/stores-catalog/filter-and-sort). */
    filter?: Record<string, any> | null;
    /** The field to update. */
    set?: SetValue;
}
export interface BulkUpdateProductsByFilterSyncResponse {
    /** Items updated by bulk action. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface AllowedProductsCountLimitExceededErrorData {
    /** Total number of products */
    totalCount?: number;
}
export interface BulkAdjustProductPropertiesRequest {
    /** Product IDs. */
    ids: string[];
    /** Numerical property to adjust. */
    adjust?: AdjustValue;
}
export interface AdjustValue extends AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
/** @oneof */
export interface AdjustValueValueOneOf {
    /**
     * Adjust product price.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * variants prices will be calculated according to the adjusted price.
     * If variant price is negative after the adjustment, the update will fail.
     */
    price?: PropertyAdjustmentData;
    /**
     * Adjust product cost of goods.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * cost of goods will be adjusted per variant.
     */
    cost?: PropertyAdjustmentData;
    /**
     * Adjust product weight.
     * If [variant management](https://support.wix.com/en/article/wix-stores-adding-and-customizing-product-options#setting-different-prices-for-variants) is enabled,
     * weight will be adjusted per variant.
     */
    weight?: PropertyAdjustmentData;
}
export interface PropertyAdjustmentData extends PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
/** @oneof */
export interface PropertyAdjustmentDataByOneOf {
    /** Adjust by percentage. */
    percentage?: PercentageData;
    /** Adjust by amount. */
    amount?: number;
}
export interface PercentageData {
    /**
     * If `true`, result will be rounded to the nearest whole number.
     * If `false`, result will be rounded to 2 places after the decimal point.
     */
    roundToInt?: boolean;
    /**
     * Percentage value, as a whole number (integer) between `-100` and `1000`.
     *
     * For example:
     * + Pass `100` to increase value by 100% (multiply original value by 2).
     * + Pass `1000` to increase value by 1000% (multiply original value by 10).
     * + Pass `-50` to decrease value by 50% (original value is halved).
     */
    rate?: number;
}
export interface BulkAdjustProductPropertiesResponse {
    /** Bulk action results. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkAdjustProductPropertiesByFilterSyncRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/stores/stores-catalog/filter-and-sort). */
    filter?: Record<string, any> | null;
    /** Numerical property to adjust. */
    adjust?: AdjustValue;
}
export interface BulkAdjustProductPropertiesByFilterSyncResponse {
    /** Items updated by bulk action. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface ReCloneStoreRequest {
    /** Description of value */
    metasiteId?: string | null;
    originalMetasiteId?: string | null;
}
export interface ReCloneStoreResponse {
}
export interface V1CreateProductPlatformizedRequest {
    /** Product information. */
    product?: Product;
}
export interface V1CreateProductPlatformizedResponse {
    product?: Product;
}
export interface V1UpdateProductPlatformizedRequest {
    product?: Product;
}
export interface V1UpdateProductPlatformizedResponse {
    product?: Product;
}
export interface V1DeleteProductPlatformizedRequest {
    /** ID of the product to delete. */
    id?: string;
}
export interface V1DeleteProductPlatformizedResponse {
}
export interface ProductCreated {
    /** Product ID (generated automatically by the catalog). */
    productId?: string;
    /** Product name. */
    name?: string;
    /** Product price. */
    price?: PriceData;
    /** Whether the product is visible to customers. */
    visible?: boolean;
    /** Media items (images, videos, etc.) associated with this product. */
    media?: Media;
    /** Product stock keeping unit (SKU). If variants are being managed, this will be empty. */
    sku?: string;
    /** Product page URL for this product (generated automatically by the server). */
    productPageUrl?: PageUrl;
    /** Product brand. */
    brand?: string | null;
    /** Cost and profit data */
    costAndProfitData?: CostAndProfitData;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
    /** Event slug. A human readable identifier of the event. */
    slug?: string;
}
export declare enum Version {
    /** Version 1 of the catalog. */
    V1_CATALOG = "V1_CATALOG",
    /** Version 3 of the catalog. */
    V3_CATALOG = "V3_CATALOG"
}
export interface ProductChanged {
    /** Product ID. */
    productId?: string;
    /** List of product fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface ProductDeleted {
    /** ID of the product that was deleted. */
    productId?: string;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface CollectionCreated {
    /** Collection ID (generated automatically by the catalog). */
    collection_Id?: string;
    /** Collection name. */
    name?: string;
    /** Media items (images, videos, etc.) associated with this collection. */
    media?: Media;
    /** Collection slug */
    slug?: string;
    /** Collection visible status */
    visible?: boolean;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface CollectionChanged {
    /** Collection ID (generated automatically by the catalog). */
    collection_Id?: string;
    /** List of collection fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface CollectionDeleted {
    /** ID of the collection that was deleted. */
    collection_Id?: string;
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface VariantsChanged {
    /** Product ID. */
    productId?: string;
    /** List of variants that were changed. */
    variants?: VariantChanged[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface VariantChanged {
    /** Variant ID. */
    variantId?: string;
    choices?: Record<string, string>;
    /** List of variant fields that were changed. */
    changedFields?: string[];
    /** Information about the version of the catalog from where this event was triggered. */
    originatedFromVersion?: Version;
}
export interface QueryProductsRequest {
    query?: Query;
    /** Whether variants should be included in the response. */
    includeVariants?: boolean;
    /** Whether hidden products should be included in the response. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface Query {
    paging?: Paging;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
export interface Paging {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
export interface QueryProductsResponse {
    products?: Product[];
    metadata?: PagingMetadata;
    totalResults?: number;
}
export interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
export interface QueryProductsPlatformizedRequest {
    query?: PlatformQuery;
}
export interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
export interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryProductsPlatformizedResponse {
    products?: Product[];
    metadata?: PlatformPagingMetadata;
}
export interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface QueryProductsWithBigPageLimitRequest {
    query?: QueryWithBigPageLimit;
    /** Whether variants should be included in the response. */
    includeVariants?: boolean;
    /** Whether hidden products should be included in the response. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface QueryWithBigPageLimit {
    paging?: PagingWithBigLimit;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
export interface PagingWithBigLimit {
    /** Amount of items to load per page */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
export interface GetProductsRequest {
    /** Requested product IDs. */
    ids?: string[];
}
export interface GetProductsResponse {
    products?: Product[];
}
export interface GetProductRequest {
    /** Requested product ID. */
    id: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface GetProductResponse {
    /** Requested product data. */
    product?: Product;
}
export interface GetProductPlatformizedRequest {
    /** Requested product ID. */
    id?: string;
    /** Whether merchant specific data, such as cost and profit data, should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface GetProductPlatformizedResponse {
    /** Requested product data. */
    product?: Product;
}
export interface QueryCollectionsRequest {
    /** Query options. */
    query?: Query;
    /** Whether number of products should be included in the response. */
    includeNumberOfProducts?: boolean;
    /** Wether to include collection description in the response. When `false` is passed, `collection.description` will return null. */
    includeDescription?: boolean;
}
export interface QueryCollectionsResponse {
    /** List of collections. */
    collections?: Collection[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadata;
    /** Total number of results returned. */
    totalResults?: number;
}
export interface QueryCollectionsPlatformizedRequest {
    query?: PlatformQuery;
}
export interface QueryCollectionsPlatformizedResponse {
    collections?: Collection[];
    metadata?: PlatformPagingMetadata;
}
export interface GetCollectionRequest {
    /** Requested collection ID. */
    id?: string;
    /**
     * Whether to return the `collection.numberOfProducts` field in the response.
     * Defaults to `false`, in which case the value of `collection.numberOfProducts` will be `0`.
     */
    includeNumberOfProducts?: boolean;
}
export interface GetCollectionResponse {
    /** The requested collection. */
    collection?: Collection;
}
export interface GetCollectionBySlugRequest {
    /** Slug of the collection to retrieve. */
    slug: string;
}
export interface GetCollectionBySlugResponse {
    /** The requested collection. */
    collection?: Collection;
}
export interface ProductOptionsAvailabilityRequest {
    /** Requested product ID. */
    id: string;
    /** Array containing the selected options. For example, `["color": "Blue", "size": "Large"]`. */
    options?: Record<string, string>;
}
export interface ProductOptionsAvailabilityResponse {
    /** Variant information, given that all the choices were provided. */
    selectedVariant?: VariantData;
    /** Information about media items (images, videos, etc.) associated with this choice. */
    media?: Media;
    /** Options information (color, size, etc.) for this product, with the inventory and visibility fields updated based on the provided choices. */
    productOptions?: ProductOption[];
    /** Whether all the selected choices result in a visible, in-stock variant. */
    availableForPurchase?: boolean;
}
export interface VariantData {
    /** Variant price. */
    price?: PriceData;
    /**
     * Variant price data converted to currency provided in header.
     * @readonly
     */
    convertedPriceData?: PriceData;
    /** Variant weight. */
    weight?: number | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Quantity currently in inventory (relevant only when tracking by inventory). */
    quantity?: number | null;
    /** Whether the product is currently in stock (relevant only when tracking manually). */
    inStock?: boolean;
    /** Whether the variant is visible to customers. */
    visible?: boolean;
}
export interface QueryProductVariantsRequest {
    /** Requested product ID. */
    id: string;
    /**
     * The specific choices available or chosen from within a selection (e.g., choosing the red Selection triggers the red Choice).
     * You may specify all the relevant choices for a specific variant, or only some of the options, which will return all corresponding variants (not relevant when passing variant IDs).
     */
    choices?: Record<string, string>;
    /** List of variant IDs (not relevant when passing choices). */
    variantIds?: string[];
    paging?: Paging;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface QueryProductVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: Variant[];
    metadata?: PagingMetadata;
    totalResults?: number;
}
export interface QueryStoreVariantsRequest {
    /** Query options. */
    query?: PlatformQuery;
}
export interface QueryStoreVariantsResponse {
    /** List of variants based on the specified filters and sorting. */
    variants?: StoreVariant[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
export interface StoreVariant {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen: {productId}.{variantId}. */
    id?: string;
    /** Variant ID. */
    variantId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant name. */
    variantName?: string;
    /** Product name. */
    productName?: string;
    /** Whether the variant is managed or represents a product. */
    managedVariant?: boolean;
    /** Variant SKU (stock keeping unit). */
    sku?: string;
    /** Variant inventory status. */
    stock?: VariantStock;
    /** The selected options of this variant. For example, `{"Color": "Blue", "Size": "Large"}`. */
    choices?: Record<string, string>;
    /** Collections that include this variant. */
    collectionIds?: string[];
    /**
     * Media items (images, videos) associated with this variant.
     * @readonly
     */
    media?: PlatformMedia;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
export interface PlatformMedia extends PlatformMediaMediaOneOf {
    image?: Image;
    video?: VideoV2;
}
/** @oneof */
export interface PlatformMediaMediaOneOf {
    image?: Image;
    video?: VideoV2;
}
export interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
export interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
export interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
export interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
export interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /** A message the buyer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /** Number of products that can be preordered after stock reaches zero. */
    limit?: number | null;
}
export interface QueryStoreVariantsWithBigLimitRequest {
    /** Query options. */
    query?: UnlimitedPlatformQuery;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformQuery other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
export interface UnlimitedPlatformQuery extends UnlimitedPlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: UnlimitedPlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: UnlimitedPlatformCursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
export interface UnlimitedPlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: UnlimitedPlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: UnlimitedPlatformCursorPaging;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformPaging or wix.common.Paging other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
export interface UnlimitedPlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
/**
 * Don't use it unless you have to and know what you do. Prefer PlatformCursorPaging or wix.common.CursorPaging other than this.
 * It doesn't have max validation for limit but we still MUST have it so implement required validation in your code.
 */
export interface UnlimitedPlatformCursorPaging {
    /**
     * The number of items to load.
     * Cursor token returned in the query response. To be used on the next query request, but not the first query request.
     */
    limit?: number | null;
    /** Cursor returned in last query response. Should not be provided on first page request */
    cursor?: string | null;
}
export interface GetStoreVariantRequest {
    /** Store variant ID. Comprised of the `productId` and the `variantId`, separated by a hyphen. For example, `{productId}-{variantId}`. */
    id: string;
}
export interface GetStoreVariantResponse {
    /** The requested store variant. */
    variant?: StoreVariant;
}
export interface QueryCustomFieldsRequest {
    /** Requested product ID. */
    id?: string;
    /** Requested field names. */
    names?: string[];
}
export interface QueryCustomFieldsResponse {
    customFields?: Record<string, any>;
}
export interface BulkQueryCustomFieldsRequest {
    /** Filter string. */
    query?: Query;
    /** Requested field names. */
    names?: string[];
}
export interface BulkQueryCustomFieldsResponse {
    /** ProductId to Custom Fields Map packed in container. */
    productIdToCustomFields?: Record<string, CustomFieldsContainer>;
    metadata?: PagingMetadata;
    totalResults?: number;
}
export interface CustomFieldsContainer {
    customFields?: Record<string, any>;
}
export interface AggregateProductsRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation?: Record<string, any> | null;
    /** Whether hidden products should be considered. Requires permissions to manage products. */
    includeHiddenProducts?: boolean;
    /** Whether merchant specific data should be included in the response. Requires permissions to manage products. */
    includeMerchantSpecificData?: boolean;
}
export interface AggregateProductsResponse {
    aggregates?: Record<string, any> | null;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface NumericPropertyRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface StockNonNullableFields {
    trackInventory: boolean;
    inStock: boolean;
    inventoryStatus: InventoryStatus;
}
interface FormattedPriceNonNullableFields {
    price: string;
    discountedPrice: string;
}
interface PriceDataNonNullableFields {
    currency: string;
    discountedPrice: number;
    formatted?: FormattedPriceNonNullableFields;
}
interface CostAndProfitDataNonNullableFields {
    formattedItemCost: string;
    profit: number;
    formattedProfit: string;
    profitMargin: number;
}
interface PricePerUnitDataNonNullableFields {
    totalQuantity: number;
    totalMeasurementUnit: MeasurementUnit;
    baseQuantity: number;
    baseMeasurementUnit: MeasurementUnit;
}
interface AdditionalInfoSectionNonNullableFields {
    title: string;
    description: string;
}
interface RibbonNonNullableFields {
    text: string;
}
interface MediaItemUrlAndSizeNonNullableFields {
    url: string;
    width: number;
    height: number;
}
interface MediaItemVideoNonNullableFields {
    files: MediaItemUrlAndSizeNonNullableFields[];
    stillFrameMediaId: string;
}
interface MediaItemNonNullableFields {
    image?: MediaItemUrlAndSizeNonNullableFields;
    video?: MediaItemVideoNonNullableFields;
    thumbnail?: MediaItemUrlAndSizeNonNullableFields;
    mediaType: MediaItemType;
    title: string;
    id: string;
}
interface MediaNonNullableFields {
    mainMedia?: MediaItemNonNullableFields;
    items: MediaItemNonNullableFields[];
}
interface CustomTextFieldNonNullableFields {
    title: string;
    maxLength: number;
    mandatory: boolean;
}
interface ChoiceNonNullableFields {
    value: string;
    description: string;
    media?: MediaNonNullableFields;
    inStock: boolean;
    visible: boolean;
}
interface ProductOptionNonNullableFields {
    optionType: OptionType;
    name: string;
    choices: ChoiceNonNullableFields[];
}
interface PageUrlNonNullableFields {
    base: string;
    path: string;
}
interface DiscountNonNullableFields {
    type: DiscountType;
    value: number;
}
interface VariantDataWithNoStockNonNullableFields {
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    weight: number;
    sku: string;
    visible: boolean;
}
interface VariantStockNonNullableFields {
    trackQuantity: boolean;
    inStock: boolean;
}
interface VariantNonNullableFields {
    id: string;
    variant?: VariantDataWithNoStockNonNullableFields;
    stock?: VariantStockNonNullableFields;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    id: string;
    fileName: string;
    fileType: FileType;
}
interface ProductNonNullableFields {
    id: string;
    slug: string;
    productType: ProductType;
    weightRange?: NumericPropertyRangeNonNullableFields;
    stock?: StockNonNullableFields;
    price?: PriceDataNonNullableFields;
    priceData?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    priceRange?: NumericPropertyRangeNonNullableFields;
    costAndProfitData?: CostAndProfitDataNonNullableFields;
    costRange?: NumericPropertyRangeNonNullableFields;
    pricePerUnitData?: PricePerUnitDataNonNullableFields;
    additionalInfoSections: AdditionalInfoSectionNonNullableFields[];
    ribbons: RibbonNonNullableFields[];
    media?: MediaNonNullableFields;
    customTextFields: CustomTextFieldNonNullableFields[];
    productOptions: ProductOptionNonNullableFields[];
    productPageUrl?: PageUrlNonNullableFields;
    numericId: string;
    inventoryItemId: string;
    discount?: DiscountNonNullableFields;
    collectionIds: string[];
    variants: VariantNonNullableFields[];
    seoData?: SeoSchemaNonNullableFields;
    exportProductId: string;
    digitalFile?: SecuredMediaNonNullableFields;
}
export interface CreateProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
export interface UpdateProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
export interface UpdateVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields[];
}
interface CollectionNonNullableFields {
    media?: MediaNonNullableFields;
    numberOfProducts: number;
    seoSchema?: SeoSchemaNonNullableFields;
}
export interface CreateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
export interface UpdateCollectionResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkProductResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
export interface BulkUpdateProductsResponseNonNullableFields {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface BulkAdjustProductPropertiesResponseNonNullableFields {
    results: BulkProductResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface QueryProductsPlatformizedResponseNonNullableFields {
    products: ProductNonNullableFields[];
}
export interface GetProductResponseNonNullableFields {
    product?: ProductNonNullableFields;
}
export interface GetCollectionBySlugResponseNonNullableFields {
    collection?: CollectionNonNullableFields;
}
interface VariantDataNonNullableFields {
    price?: PriceDataNonNullableFields;
    convertedPriceData?: PriceDataNonNullableFields;
    sku: string;
    inStock: boolean;
    visible: boolean;
    variantId: string;
}
export interface ProductOptionsAvailabilityResponseNonNullableFields {
    selectedVariant?: VariantDataNonNullableFields;
    media?: MediaNonNullableFields;
    productOptions: ProductOptionNonNullableFields[];
    availableForPurchase: boolean;
    managedProduct: boolean;
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
export interface QueryProductVariantsResponseNonNullableFields {
    variants: VariantNonNullableFields[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
interface FocalPointNonNullableFields {
    x: number;
    y: number;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
    focalPoint?: FocalPointNonNullableFields;
}
interface VideoResolutionNonNullableFields {
    url: string;
    height: number;
    width: number;
    poster?: ImageNonNullableFields;
    format: string;
}
interface VideoV2NonNullableFields {
    id: string;
    url: string;
    resolutions: VideoResolutionNonNullableFields[];
    posters: ImageNonNullableFields[];
}
interface PlatformMediaNonNullableFields {
    image?: ImageNonNullableFields;
    video?: VideoV2NonNullableFields;
}
interface PreorderInfoNonNullableFields {
    enabled: boolean;
}
interface StoreVariantNonNullableFields {
    id: string;
    variantId: string;
    productId: string;
    variantName: string;
    productName: string;
    managedVariant: boolean;
    sku: string;
    stock?: VariantStockNonNullableFields;
    collectionIds: string[];
    media?: PlatformMediaNonNullableFields;
    preorderInfo?: PreorderInfoNonNullableFields;
}
export interface QueryStoreVariantsResponseNonNullableFields {
    variants: StoreVariantNonNullableFields[];
}
export interface GetStoreVariantResponseNonNullableFields {
    variant?: StoreVariantNonNullableFields;
}
export {};
