"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updatePayments = exports.updateRefundTransaction = exports.bulkUpdatePaymentStatuses = exports.updatePaymentStatus = exports.addPayments = exports.listTransactionsForMultipleOrders = exports.listTransactionsForSingleOrder = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomOrdersPaymentsV1PaymentsUrl(opts) {
    const domainToMappings = {
        _: [
            {
                srcPath: '/_api/ecom-payments',
                destPath: '',
            },
            {
                srcPath: '/_api/payments',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/bulk/payments',
                destPath: '/v1/bulk/payments',
            },
            {
                srcPath: '/ecom/v1/bulk/invoices',
                destPath: '/v1/bulk/invoices',
            },
            {
                srcPath: '/ecom/v1/payments',
                destPath: '/v1/payments',
            },
            {
                srcPath: '/ecom/v1/invoices',
                destPath: '/v1/invoices',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/ecom-payments',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_ecom_order-transactions';
/**
 * Retrieves information about payments and refunds associated with a specified order.
 *
 *
 * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
 */
function listTransactionsForSingleOrder(payload) {
    function __listTransactionsForSingleOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'GET',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/orders/{orderId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __listTransactionsForSingleOrder;
}
exports.listTransactionsForSingleOrder = listTransactionsForSingleOrder;
/**
 * Retrieves information about payments and refunds associated with all specified orders.
 *
 *
 * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.
 */
function listTransactionsForMultipleOrders(payload) {
    function __listTransactionsForMultipleOrders({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/list-by-ids',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __listTransactionsForMultipleOrders;
}
exports.listTransactionsForMultipleOrders = listTransactionsForMultipleOrders;
/**
 * Adds up to 50 payment records to an order.
 *
 *
 * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.
 *
 * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.
 */
function addPayments(payload) {
    function __addPayments({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'payments.createdDate' },
                    { path: 'payments.updatedDate' },
                    {
                        path: 'payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                    },
                    {
                        path: 'payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                    },
                    {
                        path: 'payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                    },
                    {
                        path: 'payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.AddPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/orders/{orderId}/add-payment',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addPayments;
}
exports.addPayments = addPayments;
/**
 * Updates the status of an order's payment.
 *
 *
 * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.
 */
function updatePaymentStatus(payload) {
    function __updatePaymentStatus({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'statusUpdatedDate' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/{paymentId}/orders/{orderId}/update-payment-transaction-status',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updatePaymentStatus;
}
exports.updatePaymentStatus = updatePaymentStatus;
/**
 * Updates multiple order payments with a specified status.
 *
 *
 * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.
 */
function bulkUpdatePaymentStatuses(payload) {
    function __bulkUpdatePaymentStatuses({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'statusUpdatedDate' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/bulk/payments/update-payment-transaction-status',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                        {
                            path: 'results.item.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'results.item.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'results.item.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'results.item.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkUpdatePaymentStatuses;
}
exports.bulkUpdatePaymentStatuses = bulkUpdatePaymentStatuses;
/** Updates OrderTransactions.refunds.transactions properties */
function updateRefundTransaction(payload) {
    function __updateRefundTransaction({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdateRefundTransaction',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/orders/{orderId}/update-refund-transaction',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateRefundTransaction;
}
exports.updateRefundTransaction = updateRefundTransaction;
/**
 * Updates properties of payments associated to order.
 *
 * Currently, the following fields can be updated:
 * + `payment.payment_details.regular_payment_details.provider_transaction_id`
 * + `payment.payment_details.regular_payment_details.status`
 * + `payment.payment_details.regular_payment_details.payment_method_details.credit_card_details`
 * + `payment.payment_details.regular_payment_details.authorization_details`
 * + `payment.payment_details.regular_payment_details.authorization_details.scheduled_action`
 * + `payment.payment_details.regular_payment_details.authorization_details.authorized_date`
 * + `payment.payment_details.regular_payment_details.authorization_details.captures`
 * + `payment.payment_details.regular_payment_details.authorization_details.captures.status`
 * + `payment.payment_details.regular_payment_details.authorization_details.captures.created_date`
 * + `payment.payment_details.regular_payment_details.authorization_details.captures.failure_details`
 * + `payment.payment_details.regular_payment_details.authorization_details.void`
 * + `payment.payment_details.regular_payment_details.authorization_details.void.status`
 * + `payment.payment_details.regular_payment_details.authorization_details.void.voided_date`
 * + `payment.payment_details.regular_payment_details.authorization_details.void.reason`
 * + `payment.payment_details.regular_payment_details.authorization_details.void.failure_details`
 * + `payment.receipt_info`
 * + `payment.receipt_info.wix_receipt`
 * + `payment.receipt_info.wix_receipt.receipt_id`
 * + `payment.receipt_info.wix_receipt.display_number`
 * + `payment.receipt_info.external_receipt`
 * + `payment.receipt_info.external_receipt.receipt_id`
 * + `payment.receipt_info.external_receipt.display_number`
 * + `payment.receipt_info.external_receipt.app_id`
 *
 * To update a field's value, include the new value in the `payment` object in the body params.
 *
 * > **Note:** Removing fields value results in an error.
 */
function updatePayments(payload) {
    function __updatePayments({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'payments.fieldMask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'payments.statusUpdatedDate' },
                    { path: 'payments.payment.createdDate' },
                    { path: 'payments.payment.updatedDate' },
                    {
                        path: 'payments.payment.regularPaymentDetails.authorizationDetails.authorizedDate',
                    },
                    {
                        path: 'payments.payment.regularPaymentDetails.authorizationDetails.captures.createdDate',
                    },
                    {
                        path: 'payments.payment.regularPaymentDetails.authorizationDetails.void.voidedDate',
                    },
                    {
                        path: 'payments.payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_transactions',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments.v1.Payments.UpdatePayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsV1PaymentsUrl({
                protoPath: '/v1/payments/orders/{orderId}/update-payments',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updatePayments;
}
exports.updatePayments = updatePayments;
//# sourceMappingURL=ecom-v1-order-transactions-order-transactions.http.js.map