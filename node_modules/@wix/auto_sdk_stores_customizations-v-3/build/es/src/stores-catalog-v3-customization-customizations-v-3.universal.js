import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresCatalogV3Customization from './stores-catalog-v3-customization-customizations-v-3.http.js';
// @ts-ignore
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var CustomizationType;
(function (CustomizationType) {
    CustomizationType["UNKNOWN_CUSTOMIZATION_TYPE"] = "UNKNOWN_CUSTOMIZATION_TYPE";
    CustomizationType["PRODUCT_OPTION"] = "PRODUCT_OPTION";
    CustomizationType["MODIFIER"] = "MODIFIER";
})(CustomizationType || (CustomizationType = {}));
export var CustomizationRenderType;
(function (CustomizationRenderType) {
    CustomizationRenderType["UNKNOWN_CUSTOMIZATION_RENDER_TYPE"] = "UNKNOWN_CUSTOMIZATION_RENDER_TYPE";
    CustomizationRenderType["FREE_TEXT"] = "FREE_TEXT";
    CustomizationRenderType["TEXT_CHOICES"] = "TEXT_CHOICES";
    CustomizationRenderType["SWATCH_CHOICES"] = "SWATCH_CHOICES";
})(CustomizationRenderType || (CustomizationRenderType = {}));
export var ChoiceType;
(function (ChoiceType) {
    ChoiceType["UNKNOWN_CHOICE_TYPE"] = "UNKNOWN_CHOICE_TYPE";
    /** For a `customizationRenderType` of `TEXT_CHOICES` and `FREE_TEXT`. */
    ChoiceType["CHOICE_TEXT"] = "CHOICE_TEXT";
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    ChoiceType["ONE_COLOR"] = "ONE_COLOR";
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    ChoiceType["MULTIPLE_COLORS"] = "MULTIPLE_COLORS";
    /** For `customizationRenderType: SWATCH_CHOICES`. */
    ChoiceType["IMAGE"] = "IMAGE";
})(ChoiceType || (ChoiceType = {}));
export var RequestedFields;
(function (RequestedFields) {
    /** Unknown requested field. */
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    /** Assigned products count. */
    RequestedFields["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
})(RequestedFields || (RequestedFields = {}));
export var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a customization.
 * @param customization - Customization to create.
 * @public
 * @documentationMaturity preview
 * @requiredField customization
 * @requiredField customization.choicesSettings.choices
 * @requiredField customization.customizationRenderType
 * @requiredField customization.customizationType
 * @requiredField customization.freeTextInput.title
 * @requiredField customization.name
 * @permissionId WIX_STORES.CUSTOMIZATION_CREATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.CreateCustomization
 */
export async function createCustomization(customization) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({ customization: customization }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'customization.choicesSettings.choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.createCustomization(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]))?.customization;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { customization: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['customization']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a customization.
 * @param customizationId - Customization ID.
 * @public
 * @documentationMaturity preview
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Read customizations in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_READ
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.GetCustomization
 */
export async function getCustomization(customizationId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        customizationId: customizationId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Customization.getCustomization(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]))?.customization;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizationId: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizationId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a customization.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 * @param _id - Customization ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField customization
 * @requiredField customization.revision
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated customization.
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.UpdateCustomization
 */
export async function updateCustomization(_id, customization, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customization: { ...customization, id: _id },
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'customization.choicesSettings.choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.updateCustomization(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]))?.customization;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { customization: '$[1]' },
            explicitPathsToArguments: {
                'customization.id': '$[0]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'customization', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a customization.
 *
 * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @public
 * @documentationMaturity preview
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_DELETE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.DeleteCustomization
 */
export async function deleteCustomization(customizationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        customizationId: customizationId,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Customization.deleteCustomization(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { customizationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['customizationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Customizations runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Read customizations in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_READ
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.CUSTOMIZATION_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.QueryCustomizations
 */
export function queryCustomizations(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3Customization.queryCustomizations({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [{ path: 'customizations.choicesSettings.choices.image' }],
                },
            ]));
            return {
                items: transformedData?.customizations,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Creates multiple brands.
 * @param customizations - Customizations to create.
 * @public
 * @documentationMaturity preview
 * @requiredField customizations
 * @permissionId WIX_STORES.CUSTOMIZATION_CREATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkCreateCustomizations
 */
export async function bulkCreateCustomizations(customizations, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customizations: customizations,
        returnEntity: options?.returnEntity,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'customizations.choicesSettings.choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.bulkCreateCustomizations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.customization.choicesSettings.choices.image' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizations: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['customizations', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds choices to a customization.
 * @param customizationId - Customization ID.
 * @param choices - Choices to add.
 * @public
 * @documentationMaturity preview
 * @requiredField choices
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.AddCustomizationChoices
 */
export async function addCustomizationChoices(customizationId, choices, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customizationId: customizationId,
        choices: choices,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.addCustomizationChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizationId: '$[0]',
                choices: '$[1]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizationId', 'choices', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets a customization's choices. Any and all existing choices will be overridden.
 *
 * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @param choices - Choices to set.
 * @public
 * @documentationMaturity preview
 * @requiredField choices
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.SetCustomizationChoices
 */
export async function setCustomizationChoices(customizationId, choices, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customizationId: customizationId,
        choices: choices,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.setCustomizationChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizationId: '$[0]',
                choices: '$[1]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizationId', 'choices', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes choices from a customization.
 *
 * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
 * @param customizationId - Customization ID.
 * @param choiceIds - IDs of choices to remove.
 * @public
 * @documentationMaturity preview
 * @requiredField choiceIds
 * @requiredField customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.RemoveCustomizationChoices
 */
export async function removeCustomizationChoices(customizationId, choiceIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        customizationId: customizationId,
        choiceIds: choiceIds,
        revision: options?.revision,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Customization.removeCustomizationChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'customization.choicesSettings.choices.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizationId: '$[0]',
                choiceIds: '$[1]',
                revision: '$[2].revision',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizationId', 'choiceIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds choices to multiple customizations.
 * @param customizationsChoices - List of customization IDs and choices.
 * @public
 * @documentationMaturity preview
 * @requiredField customizationsChoices
 * @requiredField customizationsChoices.choices
 * @requiredField customizationsChoices.customizationId
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkAddCustomizationChoices
 */
export async function bulkAddCustomizationChoices(customizationsChoices, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customizationsChoices: customizationsChoices,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'customizationsChoices.choices.image' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.bulkAddCustomizationChoices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.customization.choicesSettings.choices.image' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizationsChoices: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizationsChoices', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple customizations.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 * @param customizations - List of customizations to update.
 * @public
 * @documentationMaturity preview
 * @requiredField customizations
 * @requiredField customizations.customization._id
 * @requiredField customizations.customization.name
 * @requiredField customizations.customization.revision
 * @permissionId WIX_STORES.CUSTOMIZATION_UPDATE
 * @permissionScope Customization write in v3 catalog
 * @permissionScopeId SCOPE.STORES.CUSTOMIZATION_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.customization.v3.CustomizationService.BulkUpdateCustomizations
 */
export async function bulkUpdateCustomizations(customizations, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        customizations: customizations,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                {
                    path: 'customizations.customization.choicesSettings.choices.image',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Customization.bulkUpdateCustomizations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.customization.choicesSettings.choices.image' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                customizations: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['customizations', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-catalog-v3-customization-customizations-v-3.universal.js.map