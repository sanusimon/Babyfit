import { RequestOptionsFactory } from '@wix/sdk-types';
/** Creates a customization. */
export declare function createCustomization(payload: object): RequestOptionsFactory<any>;
/** Retrieves a customization. */
export declare function getCustomization(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a customization.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 */
export declare function updateCustomization(payload: object): RequestOptionsFactory<any>;
/**
 * Deletes a customization.
 *
 * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
 */
export declare function deleteCustomization(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Customizations runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
export declare function queryCustomizations(payload: object): RequestOptionsFactory<any>;
/** Creates multiple brands. */
export declare function bulkCreateCustomizations(payload: object): RequestOptionsFactory<any>;
/** Adds choices to a customization. */
export declare function addCustomizationChoices(payload: object): RequestOptionsFactory<any>;
/**
 * Sets a customization's choices. Any and all existing choices will be overridden.
 *
 * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
 */
export declare function setCustomizationChoices(payload: object): RequestOptionsFactory<any>;
/**
 * Removes choices from a customization.
 *
 * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
 */
export declare function removeCustomizationChoices(payload: object): RequestOptionsFactory<any>;
/** Adds choices to multiple customizations. */
export declare function bulkAddCustomizationChoices(payload: object): RequestOptionsFactory<any>;
/**
 * Updates multiple customizations.
 *
 * Each time the customization is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the customization.
 * This ensures you're working with the latest customization and prevents unintended overwrites.
 */
export declare function bulkUpdateCustomizations(payload: object): RequestOptionsFactory<any>;
