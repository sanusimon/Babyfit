import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddCustomizationChoicesOptions, AddCustomizationChoicesResponse, AddCustomizationChoicesResponseNonNullableFields, BulkAddCustomizationChoicesOptions, BulkAddCustomizationChoicesResponse, BulkAddCustomizationChoicesResponseNonNullableFields, BulkCreateCustomizationsOptions, BulkCreateCustomizationsResponse, BulkCreateCustomizationsResponseNonNullableFields, BulkUpdateCustomizationsOptions, BulkUpdateCustomizationsResponse, BulkUpdateCustomizationsResponseNonNullableFields, Choice, Customization, CustomizationChoices, CustomizationCreatedEnvelope, CustomizationDeletedEnvelope, CustomizationNonNullableFields, CustomizationUpdatedEnvelope, CustomizationsQueryBuilder, GetCustomizationOptions, MaskedCustomization, QueryCustomizationsOptions, RemoveCustomizationChoicesOptions, RemoveCustomizationChoicesResponse, RemoveCustomizationChoicesResponseNonNullableFields, SetCustomizationChoicesOptions, SetCustomizationChoicesResponse, SetCustomizationChoicesResponseNonNullableFields, UpdateCustomization, UpdateCustomizationOptions } from './stores-catalog-v3-customization-customizations-v-3.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCustomization(httpClient: HttpClient): CreateCustomizationSignature;
interface CreateCustomizationSignature {
    /**
     * Creates a customization.
     * @param - Customization to create.
     * @returns Created customization.
     */
    (customization: Customization): Promise<Customization & CustomizationNonNullableFields>;
}
export declare function getCustomization(httpClient: HttpClient): GetCustomizationSignature;
interface GetCustomizationSignature {
    /**
     * Retrieves a customization.
     * @param - Customization ID.
     * @returns Customization.
     */
    (customizationId: string, options?: GetCustomizationOptions | undefined): Promise<Customization & CustomizationNonNullableFields>;
}
export declare function updateCustomization(httpClient: HttpClient): UpdateCustomizationSignature;
interface UpdateCustomizationSignature {
    /**
     * Updates a customization.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - Customization ID.
     * @returns Updated customization.
     */
    (_id: string | null, customization: UpdateCustomization, options?: UpdateCustomizationOptions | undefined): Promise<Customization & CustomizationNonNullableFields>;
}
export declare function deleteCustomization(httpClient: HttpClient): DeleteCustomizationSignature;
interface DeleteCustomizationSignature {
    /**
     * Deletes a customization.
     *
     * > **Note:** A customization cannot be deleted if it is assigned to one or more products.
     * @param - Customization ID.
     */
    (customizationId: string): Promise<void>;
}
export declare function queryCustomizations(httpClient: HttpClient): QueryCustomizationsSignature;
interface QueryCustomizationsSignature {
    /**
     * Retrieves a list of up to 100 customizations, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Customizations runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Customizations: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/customizations-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryCustomizationsOptions | undefined): CustomizationsQueryBuilder;
}
export declare function bulkCreateCustomizations(httpClient: HttpClient): BulkCreateCustomizationsSignature;
interface BulkCreateCustomizationsSignature {
    /**
     * Creates multiple brands.
     * @param - Customizations to create.
     */
    (customizations: Customization[], options?: BulkCreateCustomizationsOptions | undefined): Promise<BulkCreateCustomizationsResponse & BulkCreateCustomizationsResponseNonNullableFields>;
}
export declare function addCustomizationChoices(httpClient: HttpClient): AddCustomizationChoicesSignature;
interface AddCustomizationChoicesSignature {
    /**
     * Adds choices to a customization.
     * @param - Customization ID.
     * @param - Choices to add.
     */
    (customizationId: string, choices: Choice[], options?: AddCustomizationChoicesOptions | undefined): Promise<AddCustomizationChoicesResponse & AddCustomizationChoicesResponseNonNullableFields>;
}
export declare function setCustomizationChoices(httpClient: HttpClient): SetCustomizationChoicesSignature;
interface SetCustomizationChoicesSignature {
    /**
     * Sets a customization's choices. Any and all existing choices will be overridden.
     *
     * > **Note:** A choice cannot be overridden if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - Choices to set.
     */
    (customizationId: string, choices: Choice[], options?: SetCustomizationChoicesOptions | undefined): Promise<SetCustomizationChoicesResponse & SetCustomizationChoicesResponseNonNullableFields>;
}
export declare function removeCustomizationChoices(httpClient: HttpClient): RemoveCustomizationChoicesSignature;
interface RemoveCustomizationChoicesSignature {
    /**
     * Removes choices from a customization.
     *
     * +> **Note:** A choice cannot be removed if it is assigned to one or more products.
     * @param - Customization ID.
     * @param - IDs of choices to remove.
     */
    (customizationId: string, choiceIds: string[], options?: RemoveCustomizationChoicesOptions | undefined): Promise<RemoveCustomizationChoicesResponse & RemoveCustomizationChoicesResponseNonNullableFields>;
}
export declare function bulkAddCustomizationChoices(httpClient: HttpClient): BulkAddCustomizationChoicesSignature;
interface BulkAddCustomizationChoicesSignature {
    /**
     * Adds choices to multiple customizations.
     * @param - List of customization IDs and choices.
     */
    (customizationsChoices: CustomizationChoices[], options?: BulkAddCustomizationChoicesOptions | undefined): Promise<BulkAddCustomizationChoicesResponse & BulkAddCustomizationChoicesResponseNonNullableFields>;
}
export declare function bulkUpdateCustomizations(httpClient: HttpClient): BulkUpdateCustomizationsSignature;
interface BulkUpdateCustomizationsSignature {
    /**
     * Updates multiple customizations.
     *
     * Each time the customization is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the customization.
     * This ensures you're working with the latest customization and prevents unintended overwrites.
     * @param - List of customizations to update.
     */
    (customizations: MaskedCustomization[], options?: BulkUpdateCustomizationsOptions | undefined): Promise<BulkUpdateCustomizationsResponse & BulkUpdateCustomizationsResponseNonNullableFields>;
}
export declare const onCustomizationCreated: EventDefinition<CustomizationCreatedEnvelope, "wix.stores.catalog.v3.customization_created">;
export declare const onCustomizationDeleted: EventDefinition<CustomizationDeletedEnvelope, "wix.stores.catalog.v3.customization_deleted">;
export declare const onCustomizationUpdated: EventDefinition<CustomizationUpdatedEnvelope, "wix.stores.catalog.v3.customization_updated">;
export { ActionEvent, AddCustomizationChoicesOptions, AddCustomizationChoicesRequest, AddCustomizationChoicesResponse, AddCustomizationChoicesResponseNonNullableFields, App, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkAddCustomizationChoicesOptions, BulkAddCustomizationChoicesRequest, BulkAddCustomizationChoicesResponse, BulkAddCustomizationChoicesResponseNonNullableFields, BulkCreateCustomizationsOptions, BulkCreateCustomizationsRequest, BulkCreateCustomizationsResponse, BulkCreateCustomizationsResponseNonNullableFields, BulkCustomizationResult, BulkUpdateCustomizationsOptions, BulkUpdateCustomizationsRequest, BulkUpdateCustomizationsResponse, BulkUpdateCustomizationsResponseNonNullableFields, Choice, ChoiceType, ChoiceValueOneOf, ChoicesSettings, CreateCustomizationRequest, CreateCustomizationResponse, CreateCustomizationResponseNonNullableFields, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, Customization, CustomizationChoices, CustomizationCreatedEnvelope, CustomizationCustomizationSettingsOneOf, CustomizationDeletedEnvelope, CustomizationIdsWrapper, CustomizationNonNullableFields, CustomizationRenderType, CustomizationType, CustomizationUpdatedEnvelope, CustomizationsQueryBuilder, CustomizationsQueryResult, DeleteCustomizationRequest, DeleteCustomizationResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, FocalPoint, FreeTextSettings, GetCustomizationOptions, GetCustomizationRequest, GetCustomizationResponse, GetCustomizationResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MaskedCustomization, MessageEnvelope, MultipleColors, Page, QueryCustomizationsOptions, QueryCustomizationsRequest, QueryCustomizationsResponse, QueryCustomizationsResponseNonNullableFields, RemoveCustomizationChoicesOptions, RemoveCustomizationChoicesRequest, RemoveCustomizationChoicesResponse, RemoveCustomizationChoicesResponseNonNullableFields, RequestedFields, RestoreInfo, SetCustomizationChoicesOptions, SetCustomizationChoicesRequest, SetCustomizationChoicesResponse, SetCustomizationChoicesResponseNonNullableFields, SortOrder, Sorting, URI, UpdateCustomization, UpdateCustomizationOptions, UpdateCustomizationRequest, UpdateCustomizationResponse, UpdateCustomizationResponseNonNullableFields, WebhookIdentityType, } from './stores-catalog-v3-customization-customizations-v-3.universal.js';
