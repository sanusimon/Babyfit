import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresV1SubscriptionOption from './stores-v1-subscription-option-subscription-options.http.js';
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["UNDEFINED"] = "UNDEFINED";
    /** No discount */
    DiscountType["AMOUNT"] = "AMOUNT";
    DiscountType["PERCENT"] = "PERCENT";
})(DiscountType || (DiscountType = {}));
/**
 * Creates a subscription option.
 * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
 * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
 * @param subscriptionOption - Subscription option info.
 * @public
 * @documentationMaturity preview
 * @requiredField subscriptionOption
 * @requiredField subscriptionOption.subscriptionSettings
 * @requiredField subscriptionOption.title
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @returns Newly created subscription option.
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.CreateSubscriptionOption
 * @deprecated
 */
export async function createSubscriptionOption(subscriptionOption) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        subscriptionOption: subscriptionOption,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.createSubscriptionOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.subscriptionOption;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { subscriptionOption: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['subscriptionOption']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a subscription option.
 * Only parameters passed will be updated.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param _id - Subscription option ID (auto-generated upon subscription option creation).
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField subscriptionOption
 * @param subscriptionOption - Subscription option update options.
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @returns Updated subscription option.
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.UpdateSubscriptionOption
 * @deprecated
 */
export async function updateSubscriptionOption(_id, subscriptionOption) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        subscriptionOption: { ...subscriptionOption, id: _id },
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.updateSubscriptionOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.subscriptionOption;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { subscriptionOption: '$[1]' },
            explicitPathsToArguments: { 'subscriptionOption.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'subscriptionOption']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a subscription option.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param _id - ID of the subscription option to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.DeleteSubscriptionOption
 * @deprecated
 */
export async function deleteSubscriptionOption(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.deleteSubscriptionOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates multiple subscription options (up to 100).
 * To assign to a product, call [`assignSubscriptionOptionsToProduct()`](https://www.wix.com/velo/reference/wix-stores-v2/subscriptionoptions/assign-subscription-options-to-product).
 * Subscription options that are not assigned to a product will not be visible in the Wix business manager.
 * @param subscriptionOptions - Subscription options info.
 * @public
 * @documentationMaturity preview
 * @requiredField subscriptionOptions
 * @requiredField subscriptionOptions.subscriptionSettings
 * @requiredField subscriptionOptions.title
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkCreateSubscriptionOptions
 * @deprecated
 */
export async function bulkCreateSubscriptionOptions(subscriptionOptions) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        subscriptionOptions: subscriptionOptions,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.bulkCreateSubscriptionOptions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { subscriptionOptions: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['subscriptionOptions']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple subscription options.
 * Only parameters passed will be updated.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param subscriptionOptions - Subscription options info. Only the passed parameters in each subscription option will be updated.
 * @public
 * @documentationMaturity preview
 * @requiredField subscriptionOptions
 * @requiredField subscriptionOptions._id
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkUpdateSubscriptionOptions
 * @deprecated
 */
export async function bulkUpdateSubscriptionOptions(subscriptionOptions) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        subscriptionOptions: subscriptionOptions,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.bulkUpdateSubscriptionOptions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { subscriptionOptions: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['subscriptionOptions']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes multiple subscription options.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param ids - IDs of the subscription options to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField ids
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.BulkDeleteSubscriptionOptions
 * @deprecated
 */
export async function bulkDeleteSubscriptionOptions(ids) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ ids: ids });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.bulkDeleteSubscriptionOptions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ids: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ids']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Assign up to 6 subscription options to a specified product.
 * Pass an empty array to remove all subscription options assigned to a product.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param productId - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField productId
 * @param options - Subscription option assignment options.
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AssignSubscriptionOptionsToProduct
 * @deprecated
 */
export async function assignSubscriptionOptionsToProduct(productId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
        assignedSubscriptionOptions: options?.assignedSubscriptionOptions,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.assignSubscriptionOptionsToProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                productId: '$[0]',
                assignedSubscriptionOptions: '$[1].assignedSubscriptionOptions',
            },
            singleArgumentUnchanged: false,
        }, ['productId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Allow for one-time purchase of a product.
 * By default, product can be sold only as part of a subscription, not as a one-time purchase.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param productId - Product ID.
 * @param allowed - Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only.
 * @public
 * @documentationMaturity preview
 * @requiredField allowed
 * @requiredField productId
 * @permissionId WIX_STORES.MODIFY_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsWriteApi.AllowOneTimePurchases
 * @deprecated
 */
export async function allowOneTimePurchases(productId, allowed) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
        allowed: allowed,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.allowOneTimePurchases(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { productId: '$[0]', allowed: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['productId', 'allowed']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a subscription option by ID.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param _id - Subscription option ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId WIX_STORES.READ_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @returns Subscription option.
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOption
 * @deprecated
 */
export async function getSubscriptionOption(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.getSubscriptionOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.subscriptionOption;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves all subscription options assigned to a specified product.
 * By default, hidden subscription options are not returned. To retrieve all subscription options you must pass `includeHiddenSubscriptionOptions = true`.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param productId - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField productId
 * @param options - Options.
 * @permissionId WIX_STORES.READ_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetSubscriptionOptionsForProduct
 * @deprecated
 */
export async function getSubscriptionOptionsForProduct(productId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
        includeHiddenSubscriptionOptions: options?.includeHiddenSubscriptionOptions,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.getSubscriptionOptionsForProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                productId: '$[0]',
                includeHiddenSubscriptionOptions: '$[1].includeHiddenSubscriptionOptions',
            },
            singleArgumentUnchanged: false,
        }, ['productId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the IDs of products associated with a specified subscription option.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param _id - Subscription option ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @param options - Paging and other options.
 * @permissionId WIX_STORES.READ_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetProductIdsForSubscriptionOption
 * @deprecated
 */
export async function getProductIdsForSubscriptionOption(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        includeHiddenProducts: options?.includeHiddenProducts,
        paging: options?.paging,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.getProductIdsForSubscriptionOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                includeHiddenProducts: '$[1].includeHiddenProducts',
                paging: '$[1].paging',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Checks whether a specified product (associated with subscription options) is available for one-time purchase.
 * <blockquote class='warning'>
 *
 * __Deprecation Notice:__
 *
 * This endpoint has been deprecated and will be removed on January 29, 2024.
 *
 * </blockquote>
 * @param productId - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField productId
 * @permissionId WIX_STORES.READ_SUBSCRIPTION_OPTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @fqn wix.ecommerce.subscription.option.api.v1.SubscriptionOptionsReadApi.GetOneTimePurchasesStatus
 * @deprecated
 */
export async function getOneTimePurchasesStatus(productId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
    });
    const reqOpts = ambassadorWixStoresV1SubscriptionOption.getOneTimePurchasesStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { productId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['productId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-v1-subscription-option-subscription-options.universal.js.map