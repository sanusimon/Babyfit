"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.incrementInventory = exports.decrementInventory = exports.updateInventoryVariants = exports.queryInventory = exports.getInventoryVariants = exports.WebhookIdentityType = exports.ReasonType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixStoresV2Inventory = __importStar(require("./stores-v2-inventory-inventory.http.js"));
var ReasonType;
(function (ReasonType) {
    /** Unknown reason. */
    ReasonType["UNKNOWN"] = "UNKNOWN";
    /** Order related. */
    ReasonType["ORDER"] = "ORDER";
    /** Manual adjustment. */
    ReasonType["MANUAL"] = "MANUAL";
    /** Reverting an inventory change. */
    ReasonType["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
})(ReasonType || (exports.ReasonType = ReasonType = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Gets inventory variant information based on the specified option choices.
 *
 *
 * The `getInventoryVariants()` function returns a Promise that resolves to the specified inventory variant information.
 * @param inventoryId - Inventory item ID.
 * @public
 * @requiredField inventoryId
 * @permissionId WIX_STORES.READ_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.inventory.api.v1.InventoryReadApi.GetInventoryVariants
 */
async function getInventoryVariants(inventoryId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        inventoryId: inventoryId,
        externalId: options?.externalId,
        productId: options?.productId,
        variantIds: options?.variantIds,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.getInventoryVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                inventoryId: '$[0]',
                externalId: '$[1].externalId',
                productId: '$[1].productId',
                variantIds: '$[1].variantIds',
            },
            singleArgumentUnchanged: false,
        }, ['inventoryId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getInventoryVariants = getInventoryVariants;
/**
 * Returns a list of inventory items, given the provided paging, sorting and filtering.
 * @public
 * @permissionId WIX_STORES.READ_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.inventory.api.v1.InventoryReadApi.QueryInventory
 */
async function queryInventory(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        query: options?.query,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.queryInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { query: '$[0].query' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryInventory = queryInventory;
/**
 * Updates product inventory, including total quantity, whether the product is in stock, and whether the product inventory is tracked.
 *
 *
 * The `updateInventoryVariants()` function is a Promise that resolves to the updated inventory variant data.
 * @param productId - Product ID.
 * @public
 * @requiredField inventoryItem
 * @requiredField productId
 * @param inventoryItem - Inventory item to update.
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.UpdateInventoryVariants
 */
async function updateInventoryVariants(productId, inventoryItem) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        inventoryItem: { ...inventoryItem, productId: productId },
    });
    const reqOpts = ambassadorWixStoresV2Inventory.updateInventoryVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { inventoryItem: '$[1]' },
            explicitPathsToArguments: { 'inventoryItem.productId': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['productId', 'inventoryItem']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateInventoryVariants = updateInventoryVariants;
/**
 * Subtracts a set number of items from inventory.
 *
 *
 * The `decrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
 * @param decrementData - Item or product to decrement.
 * @public
 * @documentationMaturity preview
 * @requiredField decrementData
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.DecrementInventory
 */
async function decrementInventory(decrementData) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        decrementData: decrementData,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.decrementInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { decrementData: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['decrementData']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.decrementInventory = decrementInventory;
/**
 * Adds a set number of items to inventory.
 *
 *
 * The `incrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
 * @param incrementData - Item or product to increment.
 * @public
 * @documentationMaturity preview
 * @requiredField incrementData
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.IncrementInventory
 */
async function incrementInventory(incrementData) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        incrementData: incrementData,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.incrementInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { incrementData: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['incrementData']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.incrementInventory = incrementInventory;
//# sourceMappingURL=stores-v2-inventory-inventory.universal.js.map