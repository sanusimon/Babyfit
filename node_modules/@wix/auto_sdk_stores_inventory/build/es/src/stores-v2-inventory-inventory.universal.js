import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresV2Inventory from './stores-v2-inventory-inventory.http.js';
export var ReasonType;
(function (ReasonType) {
    /** Unknown reason. */
    ReasonType["UNKNOWN"] = "UNKNOWN";
    /** Order related. */
    ReasonType["ORDER"] = "ORDER";
    /** Manual adjustment. */
    ReasonType["MANUAL"] = "MANUAL";
    /** Reverting an inventory change. */
    ReasonType["REVERT_INVENTORY_CHANGE"] = "REVERT_INVENTORY_CHANGE";
})(ReasonType || (ReasonType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Gets inventory variant information based on the specified option choices.
 *
 *
 * The `getInventoryVariants()` function returns a Promise that resolves to the specified inventory variant information.
 * @param inventoryId - Inventory item ID.
 * @public
 * @requiredField inventoryId
 * @permissionId WIX_STORES.READ_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.inventory.api.v1.InventoryReadApi.GetInventoryVariants
 */
export async function getInventoryVariants(inventoryId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryId: inventoryId,
        externalId: options?.externalId,
        productId: options?.productId,
        variantIds: options?.variantIds,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.getInventoryVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                inventoryId: '$[0]',
                externalId: '$[1].externalId',
                productId: '$[1].productId',
                variantIds: '$[1].variantIds',
            },
            singleArgumentUnchanged: false,
        }, ['inventoryId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Returns a list of inventory items, given the provided paging, sorting and filtering.
 * @public
 * @permissionId WIX_STORES.READ_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.inventory.api.v1.InventoryReadApi.QueryInventory
 */
export async function queryInventory(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        query: options?.query,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.queryInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { query: '$[0].query' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates product inventory, including total quantity, whether the product is in stock, and whether the product inventory is tracked.
 *
 *
 * The `updateInventoryVariants()` function is a Promise that resolves to the updated inventory variant data.
 * @param productId - Product ID.
 * @public
 * @requiredField inventoryItem
 * @requiredField productId
 * @param inventoryItem - Inventory item to update.
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.UpdateInventoryVariants
 */
export async function updateInventoryVariants(productId, inventoryItem) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        inventoryItem: { ...inventoryItem, productId: productId },
    });
    const reqOpts = ambassadorWixStoresV2Inventory.updateInventoryVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { inventoryItem: '$[1]' },
            explicitPathsToArguments: { 'inventoryItem.productId': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['productId', 'inventoryItem']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Subtracts a set number of items from inventory.
 *
 *
 * The `decrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
 * @param decrementData - Item or product to decrement.
 * @public
 * @documentationMaturity preview
 * @requiredField decrementData
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.DecrementInventory
 */
export async function decrementInventory(decrementData) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        decrementData: decrementData,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.decrementInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { decrementData: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['decrementData']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds a set number of items to inventory.
 *
 *
 * The `incrementInventory()` function returns a Promise that is resolved when the specified item's quantity has been updated in the inventory.
 * @param incrementData - Item or product to increment.
 * @public
 * @documentationMaturity preview
 * @requiredField incrementData
 * @permissionId WIX_STORES.MODIFY_INVENTORY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn wix.inventory.api.v1.InventoryWriteApi.IncrementInventory
 */
export async function incrementInventory(incrementData) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        incrementData: incrementData,
    });
    const reqOpts = ambassadorWixStoresV2Inventory.incrementInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { incrementData: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['incrementData']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-v2-inventory-inventory.universal.js.map