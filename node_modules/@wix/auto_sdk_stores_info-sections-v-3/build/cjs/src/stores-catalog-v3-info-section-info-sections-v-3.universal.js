"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkDeleteInfoSections = exports.bulkUpdateInfoSections = exports.bulkCreateInfoSections = exports.queryInfoSections = exports.deleteInfoSection = exports.updateInfoSection = exports.bulkGetOrCreateInfoSections = exports.getOrCreateInfoSection = exports.getInfoSection = exports.createInfoSection = exports.WebhookIdentityType = exports.SortOrder = exports.RequestedFields = exports.NullValue = exports.VerticalAlignment = exports.Direction = exports.InitialExpandedItems = exports.AppType = exports.FontType = exports.DecorationType = exports.BackgroundType = exports.PollLayoutDirection = exports.PollLayoutType = exports.VoteRole = exports.ViewRole = exports.MapType = exports.Source = exports.GIFType = exports.ThumbnailsAlignment = exports.Crop = exports.Orientation = exports.LayoutType = exports.ViewMode = exports.Alignment = exports.Width = exports.LineStyle = exports.TextAlignment = exports.Target = exports.Type = exports.PluginContainerDataAlignment = exports.WidthType = exports.NodeType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixStoresCatalogV3InfoSection = __importStar(require("./stores-catalog-v3-info-section-info-sections-v-3.http.js"));
var NodeType;
(function (NodeType) {
    NodeType["PARAGRAPH"] = "PARAGRAPH";
    NodeType["TEXT"] = "TEXT";
    NodeType["HEADING"] = "HEADING";
    NodeType["BULLETED_LIST"] = "BULLETED_LIST";
    NodeType["ORDERED_LIST"] = "ORDERED_LIST";
    NodeType["LIST_ITEM"] = "LIST_ITEM";
    NodeType["BLOCKQUOTE"] = "BLOCKQUOTE";
    NodeType["CODE_BLOCK"] = "CODE_BLOCK";
    NodeType["VIDEO"] = "VIDEO";
    NodeType["DIVIDER"] = "DIVIDER";
    NodeType["FILE"] = "FILE";
    NodeType["GALLERY"] = "GALLERY";
    NodeType["GIF"] = "GIF";
    NodeType["HTML"] = "HTML";
    NodeType["IMAGE"] = "IMAGE";
    NodeType["LINK_PREVIEW"] = "LINK_PREVIEW";
    /** @deprecated */
    NodeType["MAP"] = "MAP";
    NodeType["POLL"] = "POLL";
    NodeType["APP_EMBED"] = "APP_EMBED";
    NodeType["BUTTON"] = "BUTTON";
    NodeType["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
    NodeType["TABLE"] = "TABLE";
    NodeType["EMBED"] = "EMBED";
    NodeType["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
    NodeType["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
    NodeType["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
    NodeType["TABLE_CELL"] = "TABLE_CELL";
    NodeType["TABLE_ROW"] = "TABLE_ROW";
    NodeType["EXTERNAL"] = "EXTERNAL";
    NodeType["AUDIO"] = "AUDIO";
    NodeType["CAPTION"] = "CAPTION";
    NodeType["LAYOUT"] = "LAYOUT";
    NodeType["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (exports.NodeType = NodeType = {}));
var WidthType;
(function (WidthType) {
    /** Width matches the content width */
    WidthType["CONTENT"] = "CONTENT";
    /** Small Width */
    WidthType["SMALL"] = "SMALL";
    /** Width will match the original asset width */
    WidthType["ORIGINAL"] = "ORIGINAL";
    /** coast-to-coast display */
    WidthType["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (exports.WidthType = WidthType = {}));
var PluginContainerDataAlignment;
(function (PluginContainerDataAlignment) {
    /** Center Alignment */
    PluginContainerDataAlignment["CENTER"] = "CENTER";
    /** Left Alignment */
    PluginContainerDataAlignment["LEFT"] = "LEFT";
    /** Right Alignment */
    PluginContainerDataAlignment["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (exports.PluginContainerDataAlignment = PluginContainerDataAlignment = {}));
var Type;
(function (Type) {
    /** Regular link button */
    Type["LINK"] = "LINK";
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    Type["ACTION"] = "ACTION";
})(Type || (exports.Type = Type = {}));
var Target;
(function (Target) {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    Target["SELF"] = "SELF";
    /** Opens the linked document in a new window or tab */
    Target["BLANK"] = "BLANK";
    /** Opens the linked document in the parent frame */
    Target["PARENT"] = "PARENT";
    /** Opens the linked document in the full body of the window */
    Target["TOP"] = "TOP";
})(Target || (exports.Target = Target = {}));
var TextAlignment;
(function (TextAlignment) {
    /** browser default, eqivalent to `initial` */
    TextAlignment["AUTO"] = "AUTO";
    /** Left align */
    TextAlignment["LEFT"] = "LEFT";
    /** Right align */
    TextAlignment["RIGHT"] = "RIGHT";
    /** Center align */
    TextAlignment["CENTER"] = "CENTER";
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    TextAlignment["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (exports.TextAlignment = TextAlignment = {}));
var LineStyle;
(function (LineStyle) {
    /** Single Line */
    LineStyle["SINGLE"] = "SINGLE";
    /** Double Line */
    LineStyle["DOUBLE"] = "DOUBLE";
    /** Dashed Line */
    LineStyle["DASHED"] = "DASHED";
    /** Dotted Line */
    LineStyle["DOTTED"] = "DOTTED";
})(LineStyle || (exports.LineStyle = LineStyle = {}));
var Width;
(function (Width) {
    /** Large line */
    Width["LARGE"] = "LARGE";
    /** Medium line */
    Width["MEDIUM"] = "MEDIUM";
    /** Small line */
    Width["SMALL"] = "SMALL";
})(Width || (exports.Width = Width = {}));
var Alignment;
(function (Alignment) {
    /** Center alignment */
    Alignment["CENTER"] = "CENTER";
    /** Left alignment */
    Alignment["LEFT"] = "LEFT";
    /** Right alignment */
    Alignment["RIGHT"] = "RIGHT";
})(Alignment || (exports.Alignment = Alignment = {}));
var ViewMode;
(function (ViewMode) {
    /** No PDF view */
    ViewMode["NONE"] = "NONE";
    /** Full PDF view */
    ViewMode["FULL"] = "FULL";
    /** Mini PDF view */
    ViewMode["MINI"] = "MINI";
})(ViewMode || (exports.ViewMode = ViewMode = {}));
var LayoutType;
(function (LayoutType) {
    /** Collage type */
    LayoutType["COLLAGE"] = "COLLAGE";
    /** Masonry type */
    LayoutType["MASONRY"] = "MASONRY";
    /** Grid type */
    LayoutType["GRID"] = "GRID";
    /** Thumbnail type */
    LayoutType["THUMBNAIL"] = "THUMBNAIL";
    /** Slider type */
    LayoutType["SLIDER"] = "SLIDER";
    /** Slideshow type */
    LayoutType["SLIDESHOW"] = "SLIDESHOW";
    /** Panorama type */
    LayoutType["PANORAMA"] = "PANORAMA";
    /** Column type */
    LayoutType["COLUMN"] = "COLUMN";
    /** Magic type */
    LayoutType["MAGIC"] = "MAGIC";
    /** Fullsize images type */
    LayoutType["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (exports.LayoutType = LayoutType = {}));
var Orientation;
(function (Orientation) {
    /** Rows Orientation */
    Orientation["ROWS"] = "ROWS";
    /** Columns Orientation */
    Orientation["COLUMNS"] = "COLUMNS";
})(Orientation || (exports.Orientation = Orientation = {}));
var Crop;
(function (Crop) {
    /** Crop to fill */
    Crop["FILL"] = "FILL";
    /** Crop to fit */
    Crop["FIT"] = "FIT";
})(Crop || (exports.Crop = Crop = {}));
var ThumbnailsAlignment;
(function (ThumbnailsAlignment) {
    /** Top alignment */
    ThumbnailsAlignment["TOP"] = "TOP";
    /** Right alignment */
    ThumbnailsAlignment["RIGHT"] = "RIGHT";
    /** Bottom alignment */
    ThumbnailsAlignment["BOTTOM"] = "BOTTOM";
    /** Left alignment */
    ThumbnailsAlignment["LEFT"] = "LEFT";
    /** No thumbnail */
    ThumbnailsAlignment["NONE"] = "NONE";
})(ThumbnailsAlignment || (exports.ThumbnailsAlignment = ThumbnailsAlignment = {}));
var GIFType;
(function (GIFType) {
    GIFType["NORMAL"] = "NORMAL";
    GIFType["STICKER"] = "STICKER";
})(GIFType || (exports.GIFType = GIFType = {}));
var Source;
(function (Source) {
    Source["HTML"] = "HTML";
    Source["ADSENSE"] = "ADSENSE";
})(Source || (exports.Source = Source = {}));
var MapType;
(function (MapType) {
    /** Roadmap map type */
    MapType["ROADMAP"] = "ROADMAP";
    /** Satellite map type */
    MapType["SATELITE"] = "SATELITE";
    /** Hybrid map type */
    MapType["HYBRID"] = "HYBRID";
    /** Terrain map type */
    MapType["TERRAIN"] = "TERRAIN";
})(MapType || (exports.MapType = MapType = {}));
var ViewRole;
(function (ViewRole) {
    /** Only Poll creator can view the results */
    ViewRole["CREATOR"] = "CREATOR";
    /** Anyone who voted can see the results */
    ViewRole["VOTERS"] = "VOTERS";
    /** Anyone can see the results, even if one didn't vote */
    ViewRole["EVERYONE"] = "EVERYONE";
})(ViewRole || (exports.ViewRole = ViewRole = {}));
var VoteRole;
(function (VoteRole) {
    /** Logged in member */
    VoteRole["SITE_MEMBERS"] = "SITE_MEMBERS";
    /** Anyone */
    VoteRole["ALL"] = "ALL";
})(VoteRole || (exports.VoteRole = VoteRole = {}));
var PollLayoutType;
(function (PollLayoutType) {
    /** List */
    PollLayoutType["LIST"] = "LIST";
    /** Grid */
    PollLayoutType["GRID"] = "GRID";
})(PollLayoutType || (exports.PollLayoutType = PollLayoutType = {}));
var PollLayoutDirection;
(function (PollLayoutDirection) {
    /** Left-to-right */
    PollLayoutDirection["LTR"] = "LTR";
    /** Right-to-left */
    PollLayoutDirection["RTL"] = "RTL";
})(PollLayoutDirection || (exports.PollLayoutDirection = PollLayoutDirection = {}));
var BackgroundType;
(function (BackgroundType) {
    /** Color background type */
    BackgroundType["COLOR"] = "COLOR";
    /** Image background type */
    BackgroundType["IMAGE"] = "IMAGE";
    /** Gradiant background type */
    BackgroundType["GRADIENT"] = "GRADIENT";
})(BackgroundType || (exports.BackgroundType = BackgroundType = {}));
var DecorationType;
(function (DecorationType) {
    DecorationType["BOLD"] = "BOLD";
    DecorationType["ITALIC"] = "ITALIC";
    DecorationType["UNDERLINE"] = "UNDERLINE";
    DecorationType["SPOILER"] = "SPOILER";
    DecorationType["ANCHOR"] = "ANCHOR";
    DecorationType["MENTION"] = "MENTION";
    DecorationType["LINK"] = "LINK";
    DecorationType["COLOR"] = "COLOR";
    DecorationType["FONT_SIZE"] = "FONT_SIZE";
    DecorationType["EXTERNAL"] = "EXTERNAL";
})(DecorationType || (exports.DecorationType = DecorationType = {}));
var FontType;
(function (FontType) {
    FontType["PX"] = "PX";
    FontType["EM"] = "EM";
})(FontType || (exports.FontType = FontType = {}));
var AppType;
(function (AppType) {
    AppType["PRODUCT"] = "PRODUCT";
    AppType["EVENT"] = "EVENT";
    AppType["BOOKING"] = "BOOKING";
})(AppType || (exports.AppType = AppType = {}));
var InitialExpandedItems;
(function (InitialExpandedItems) {
    /** First item will be expended initally */
    InitialExpandedItems["FIRST"] = "FIRST";
    /** All items will expended initally */
    InitialExpandedItems["ALL"] = "ALL";
    /** All items collapsed initally */
    InitialExpandedItems["NONE"] = "NONE";
})(InitialExpandedItems || (exports.InitialExpandedItems = InitialExpandedItems = {}));
var Direction;
(function (Direction) {
    /** Left-to-right */
    Direction["LTR"] = "LTR";
    /** Right-to-left */
    Direction["RTL"] = "RTL";
})(Direction || (exports.Direction = Direction = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    /** Top alignment */
    VerticalAlignment["TOP"] = "TOP";
    /** Middle alignment */
    VerticalAlignment["MIDDLE"] = "MIDDLE";
    /** Bottom alignment */
    VerticalAlignment["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (exports.VerticalAlignment = VerticalAlignment = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
var NullValue;
(function (NullValue) {
    /** Null value. */
    NullValue["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
var RequestedFields;
(function (RequestedFields) {
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    RequestedFields["ASSIGNED_PRODUCTS_COUNT"] = "ASSIGNED_PRODUCTS_COUNT";
})(RequestedFields || (exports.RequestedFields = RequestedFields = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates an info section.
 *
 * To assign the info section to a product, include the `infoSection.id` or `infoSection.uniqueName`
 * when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or
 * [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
 * @param infoSection - Info section to create.
 * @public
 * @documentationMaturity preview
 * @requiredField infoSection
 * @requiredField infoSection.title
 * @requiredField infoSection.uniqueName
 * @permissionId WIX_STORES.INFO_SECTION_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created info section.
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.CreateInfoSection
 */
async function createInfoSection(infoSection) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSection: infoSection,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.createInfoSection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.infoSection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { infoSection: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['infoSection']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createInfoSection = createInfoSection;
/**
 * Retrieves an info section.
 * @param infoSectionId - Info section ID.
 * @public
 * @documentationMaturity preview
 * @requiredField infoSectionId
 * @permissionId WIX_STORES.INFO_SECTION_READ
 * @permissionScope Read info sections in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Info section.
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.GetInfoSection
 */
async function getInfoSection(infoSectionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSectionId: infoSectionId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.getInfoSection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.infoSection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                infoSectionId: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['infoSectionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getInfoSection = getInfoSection;
/**
 * Retrieves an info section by ID or `uniqueName`, or creates an info section if one with the passed `uniqueName` doesn't exist.
 *
 * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_STORES.INFO_SECTION_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.GetOrCreateInfoSection
 */
async function getOrCreateInfoSection(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSection: options?.infoSection,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.getOrCreateInfoSection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                infoSection: '$[0].infoSection',
                fields: '$[0].fields',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getOrCreateInfoSection = getOrCreateInfoSection;
/**
 * Retrieves multiple info sections by ID or `uniqueName`, or creates multiple info sections if those with the passed `uniqueName` don't exist.
 *
 * > **Note:** If an info section with the passed `uniqueName` doesn't exist, the `uniqueName` and `title` fields are required to create a new info section.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_STORES.INFO_SECTION_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkGetOrCreateInfoSections
 */
async function bulkGetOrCreateInfoSections(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSections: options?.infoSections,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.bulkGetOrCreateInfoSections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                infoSections: '$[0].infoSections',
                fields: '$[0].fields',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkGetOrCreateInfoSections = bulkGetOrCreateInfoSections;
/**
 * Updates an info section.
 *
 *
 * Each time the info section is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the info section.
 * This ensures you're working with the latest info section and prevents unintended overwrites.
 * @param _id - Info section ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField infoSection
 * @requiredField infoSection.revision
 * @permissionId WIX_STORES.INFO_SECTION_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated info section.
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.UpdateInfoSection
 */
async function updateInfoSection(_id, infoSection, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSection: { ...infoSection, id: _id },
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.updateInfoSection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.infoSection;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { infoSection: '$[1]' },
            explicitPathsToArguments: {
                'infoSection.id': '$[0]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'infoSection', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateInfoSection = updateInfoSection;
/**
 * Deletes an info section.
 *
 * > **Note:** Deleting an info section will also remove it from all products it is assigned to.
 * @param infoSectionId - Info section ID
 * @public
 * @documentationMaturity preview
 * @requiredField infoSectionId
 * @permissionId WIX_STORES.INFO_SECTION_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.DeleteInfoSection
 */
async function deleteInfoSection(infoSectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSectionId: infoSectionId,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.deleteInfoSection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { infoSectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['infoSectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteInfoSection = deleteInfoSection;
/**
 * Retrieves a list of up to 100 info sections, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Info Sections runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Info Sections: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/info-sections-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read info sections in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.INFO_SECTION_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.QueryInfoSections
 */
function queryInfoSections(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3InfoSection.queryInfoSections({ ...payload, ...(options ?? {}) });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.infoSections,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryInfoSections = queryInfoSections;
/**
 * Creates multiple info sections.
 * @param infoSections - Info sections to create.
 * @public
 * @documentationMaturity preview
 * @requiredField infoSections
 * @requiredField infoSections.title
 * @requiredField infoSections.uniqueName
 * @permissionId WIX_STORES.INFO_SECTION_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkCreateInfoSections
 */
async function bulkCreateInfoSections(infoSections, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSections: infoSections,
        returnEntity: options?.returnEntity,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.bulkCreateInfoSections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                infoSections: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['infoSections', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkCreateInfoSections = bulkCreateInfoSections;
/**
 * Updates multiple info sections.
 *
 * Each time an info section is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating an info section.
 * This ensures you're working with the latest info section and prevents unintended overwrites.
 * @param infoSections - List of info sections to update.
 * @public
 * @documentationMaturity preview
 * @requiredField infoSections
 * @requiredField infoSections.infoSection._id
 * @requiredField infoSections.infoSection.revision
 * @permissionId WIX_STORES.INFO_SECTION_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkUpdateInfoSections
 */
async function bulkUpdateInfoSections(infoSections, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSections: infoSections,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.bulkUpdateInfoSections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                infoSections: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['infoSections', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdateInfoSections = bulkUpdateInfoSections;
/**
 * Deletes multiple info sections.
 * @param infoSectionIds - IDs of info sections to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField infoSectionIds
 * @permissionId WIX_STORES.INFO_SECTION_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Info section write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INFO_SECTION_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn com.wix.stores.catalog.info.section.v3.InfoSectionsService.BulkDeleteInfoSections
 */
async function bulkDeleteInfoSections(infoSectionIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        infoSectionIds: infoSectionIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV3InfoSection.bulkDeleteInfoSections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { infoSectionIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['infoSectionIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeleteInfoSections = bulkDeleteInfoSections;
//# sourceMappingURL=stores-catalog-v3-info-section-info-sections-v-3.universal.js.map