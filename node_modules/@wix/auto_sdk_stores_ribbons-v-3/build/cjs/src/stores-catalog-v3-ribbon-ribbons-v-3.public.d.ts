import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { BulkCreateRibbonsOptions, BulkCreateRibbonsResponse, BulkCreateRibbonsResponseNonNullableFields, BulkDeleteRibbonsResponse, BulkDeleteRibbonsResponseNonNullableFields, BulkGetOrCreateRibbonsOptions, BulkGetOrCreateRibbonsResponse, BulkGetOrCreateRibbonsResponseNonNullableFields, BulkUpdateRibbonsOptions, BulkUpdateRibbonsResponse, BulkUpdateRibbonsResponseNonNullableFields, GetOrCreateRibbonOptions, GetOrCreateRibbonResponse, GetOrCreateRibbonResponseNonNullableFields, GetRibbonOptions, MaskedRibbon, QueryRibbonsOptions, Ribbon, RibbonCreatedEnvelope, RibbonDeletedEnvelope, RibbonNonNullableFields, RibbonUpdatedEnvelope, RibbonsQueryBuilder, UpdateRibbon, UpdateRibbonOptions } from './stores-catalog-v3-ribbon-ribbons-v-3.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createRibbon(httpClient: HttpClient): CreateRibbonSignature;
interface CreateRibbonSignature {
    /**
     * Creates a ribbon.
     *
     * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
     * @param - Ribbon to create.
     * @returns Created ribbon.
     */
    (ribbon: Ribbon): Promise<Ribbon & RibbonNonNullableFields>;
}
export declare function getRibbon(httpClient: HttpClient): GetRibbonSignature;
interface GetRibbonSignature {
    /**
     * Retrieves a ribbon.
     * @param - Ribbon ID.
     * @returns Ribbon.
     */
    (ribbonId: string, options?: GetRibbonOptions | undefined): Promise<Ribbon & RibbonNonNullableFields>;
}
export declare function updateRibbon(httpClient: HttpClient): UpdateRibbonSignature;
interface UpdateRibbonSignature {
    /**
     * Updates a ribbon.
     *
     *
     * Each time the ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - Ribbon ID.
     * @returns Updated Ribbon.
     */
    (_id: string | null, ribbon: UpdateRibbon, options?: UpdateRibbonOptions | undefined): Promise<Ribbon & RibbonNonNullableFields>;
}
export declare function deleteRibbon(httpClient: HttpClient): DeleteRibbonSignature;
interface DeleteRibbonSignature {
    /**
     * Deletes a ribbon.
     *
     *
     * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
     * @param - Ribbon ID.
     */
    (ribbonId: string): Promise<void>;
}
export declare function queryRibbons(httpClient: HttpClient): QueryRibbonsSignature;
interface QueryRibbonsSignature {
    /**
     * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     *
     * Query Brands runs with these defaults, which you can override:
     *
     * - `createdDate` is sorted in `DESC` order
     * - `cursorPaging.limit` is `100`
     *
     * For field support for filters and sorting,
     * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    (options?: QueryRibbonsOptions | undefined): RibbonsQueryBuilder;
}
export declare function bulkCreateRibbons(httpClient: HttpClient): BulkCreateRibbonsSignature;
interface BulkCreateRibbonsSignature {
    /**
     * Creates multiple ribbons.
     * @param - Ribbons to create.
     */
    (ribbons: Ribbon[], options?: BulkCreateRibbonsOptions | undefined): Promise<BulkCreateRibbonsResponse & BulkCreateRibbonsResponseNonNullableFields>;
}
export declare function bulkUpdateRibbons(httpClient: HttpClient): BulkUpdateRibbonsSignature;
interface BulkUpdateRibbonsSignature {
    /**
     * Updates multiple ribbons.
     *
     * Each time a ribbon is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating a ribbon.
     * This ensures you're working with the latest ribbon and prevents unintended overwrites.
     * @param - List of ribbons to update.
     */
    (ribbons: MaskedRibbon[], options?: BulkUpdateRibbonsOptions | undefined): Promise<BulkUpdateRibbonsResponse & BulkUpdateRibbonsResponseNonNullableFields>;
}
export declare function getOrCreateRibbon(httpClient: HttpClient): GetOrCreateRibbonSignature;
interface GetOrCreateRibbonSignature {
    /**
     * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
     * @param - Ribbon name to retrieve or create.
     */
    (ribbonName: string, options?: GetOrCreateRibbonOptions | undefined): Promise<GetOrCreateRibbonResponse & GetOrCreateRibbonResponseNonNullableFields>;
}
export declare function bulkGetOrCreateRibbons(httpClient: HttpClient): BulkGetOrCreateRibbonsSignature;
interface BulkGetOrCreateRibbonsSignature {
    /**
     * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
     * @param - Ribbon names to retrieve or create.
     */
    (ribbonNames: string[], options?: BulkGetOrCreateRibbonsOptions | undefined): Promise<BulkGetOrCreateRibbonsResponse & BulkGetOrCreateRibbonsResponseNonNullableFields>;
}
export declare function bulkDeleteRibbons(httpClient: HttpClient): BulkDeleteRibbonsSignature;
interface BulkDeleteRibbonsSignature {
    /**
     * Deletes multiple ribbons.
     * @param - IDs of ribbons to delete.
     */
    (ribbonIds: string[]): Promise<BulkDeleteRibbonsResponse & BulkDeleteRibbonsResponseNonNullableFields>;
}
export declare const onRibbonCreated: EventDefinition<RibbonCreatedEnvelope, "wix.stores.catalog.v3.ribbon_created">;
export declare const onRibbonDeleted: EventDefinition<RibbonDeletedEnvelope, "wix.stores.catalog.v3.ribbon_deleted">;
export declare const onRibbonUpdated: EventDefinition<RibbonUpdatedEnvelope, "wix.stores.catalog.v3.ribbon_updated">;
export { ActionEvent, App, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateRibbonsOptions, BulkCreateRibbonsRequest, BulkCreateRibbonsResponse, BulkCreateRibbonsResponseNonNullableFields, BulkDeleteRibbonsRequest, BulkDeleteRibbonsResponse, BulkDeleteRibbonsResponseNonNullableFields, BulkGetOrCreateRibbonsOptions, BulkGetOrCreateRibbonsRequest, BulkGetOrCreateRibbonsResponse, BulkGetOrCreateRibbonsResponseNonNullableFields, BulkRibbonResult, BulkUpdateRibbonsOptions, BulkUpdateRibbonsRequest, BulkUpdateRibbonsResponse, BulkUpdateRibbonsResponseNonNullableFields, CreateRibbonRequest, CreateRibbonResponse, CreateRibbonResponseNonNullableFields, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteRibbonRequest, DeleteRibbonResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, GetOrCreateRibbonOptions, GetOrCreateRibbonRequest, GetOrCreateRibbonResponse, GetOrCreateRibbonResponseNonNullableFields, GetRibbonOptions, GetRibbonRequest, GetRibbonResponse, GetRibbonResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, ItemMetadata, MaskedRibbon, MessageEnvelope, Page, QueryRibbonsOptions, QueryRibbonsRequest, QueryRibbonsResponse, QueryRibbonsResponseNonNullableFields, RequestedFields, RestoreInfo, Ribbon, RibbonCreatedEnvelope, RibbonDeletedEnvelope, RibbonNonNullableFields, RibbonUpdatedEnvelope, RibbonsQueryBuilder, RibbonsQueryResult, SortOrder, Sorting, URI, UpdateRibbon, UpdateRibbonOptions, UpdateRibbonRequest, UpdateRibbonResponse, UpdateRibbonResponseNonNullableFields, V3BulkRibbonResult, WebhookIdentityType, } from './stores-catalog-v3-ribbon-ribbons-v-3.universal.js';
