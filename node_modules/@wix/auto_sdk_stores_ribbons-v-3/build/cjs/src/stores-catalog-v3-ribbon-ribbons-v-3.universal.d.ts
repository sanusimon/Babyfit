/** A Ribbon is a visual element that you can assign to products to highlight them on your site. */
export interface Ribbon {
    /**
     * Ribbon ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
export interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
export interface InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
export interface App {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
export interface Page {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
export interface URI {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
export interface File {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
export interface CreateRibbonRequest {
    /** Ribbon to create. */
    ribbon: Ribbon;
}
export interface CreateRibbonResponse {
    /** Created ribbon. */
    ribbon?: Ribbon;
}
export interface GetRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export declare enum RequestedFields {
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    ASSIGNED_PRODUCT_COUNT = "ASSIGNED_PRODUCT_COUNT"
}
export interface GetRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
export interface UpdateRibbonRequest {
    /** Ribbon to update. */
    ribbon: Ribbon;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export interface UpdateRibbonResponse {
    /** Updated Ribbon. */
    ribbon?: Ribbon;
}
export interface DeleteRibbonRequest {
    /** Ribbon ID. */
    ribbonId: string;
}
export interface DeleteRibbonResponse {
}
export interface QueryRibbonsRequest {
    /** Query options. */
    query?: CursorQuery;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryRibbonsResponse {
    /** List of ribbons. */
    ribbons?: Ribbon[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface BulkCreateRibbonsRequest {
    /** Ribbons to create. */
    ribbons: Ribbon[];
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
export interface BulkCreateRibbonsResponse {
    /** Ribbons created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface V3BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
    /**
     * Full ribbon entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: Ribbon;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface BulkUpdateRibbonsRequest {
    /** List of ribbons to update. */
    ribbons: MaskedRibbon[];
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export interface MaskedRibbon {
    /** Ribbon to update. */
    ribbon?: Ribbon;
    /** Explicit list of fields to update. */
    fieldMask?: string[];
}
export interface BulkUpdateRibbonsResponse {
    /** Ribbons updated by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface GetOrCreateRibbonRequest {
    /** Ribbon name to retrieve or create. */
    ribbonName: string;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export interface GetOrCreateRibbonResponse {
    /** Ribbon. */
    ribbon?: Ribbon;
}
export interface BulkGetOrCreateRibbonsRequest {
    /** Ribbon names to retrieve or create. */
    ribbonNames: string[];
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
export interface BulkGetOrCreateRibbonsResponse {
    /** Ribbons retrieved or created by bulk action. */
    results?: V3BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkDeleteRibbonsRequest {
    /** IDs of ribbons to delete. */
    ribbonIds: string[];
}
export interface BulkDeleteRibbonsResponse {
    /** Ribbons deleted by bulk action. */
    results?: BulkRibbonResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkRibbonResult {
    /** Bulk action metadata for ribbon. */
    itemMetadata?: ItemMetadata;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface Empty {
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface RibbonNonNullableFields {
    name: string;
}
export interface CreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
export interface GetRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
export interface UpdateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
export interface QueryRibbonsResponseNonNullableFields {
    ribbons: RibbonNonNullableFields[];
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface V3BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: RibbonNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
export interface BulkCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface BulkUpdateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface GetOrCreateRibbonResponseNonNullableFields {
    ribbon?: RibbonNonNullableFields;
}
export interface BulkGetOrCreateRibbonsResponseNonNullableFields {
    results: V3BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
interface BulkRibbonResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
export interface BulkDeleteRibbonsResponseNonNullableFields {
    results: BulkRibbonResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface RibbonCreatedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
/** @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.RIBBON_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.ribbon_created
 * @slug created
 * @documentationMaturity preview
 */
export declare function onRibbonCreated(handler: (event: RibbonCreatedEnvelope) => void | Promise<void>): void;
export interface RibbonDeletedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
/** @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.RIBBON_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.ribbon_deleted
 * @slug deleted
 * @documentationMaturity preview
 */
export declare function onRibbonDeleted(handler: (event: RibbonDeletedEnvelope) => void | Promise<void>): void;
export interface RibbonUpdatedEnvelope {
    entity: Ribbon;
    metadata: EventMetadata;
}
/** @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.RIBBON_READ
 * @webhook
 * @eventType wix.stores.catalog.v3.ribbon_updated
 * @slug updated
 * @documentationMaturity preview
 */
export declare function onRibbonUpdated(handler: (event: RibbonUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a ribbon.
 *
 * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
 * @param ribbon - Ribbon to create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbon
 * @requiredField ribbon.name
 * @permissionId WIX_STORES.RIBBON_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon
 */
export declare function createRibbon(ribbon: Ribbon): Promise<Ribbon & RibbonNonNullableFields>;
/**
 * Retrieves a ribbon.
 * @param ribbonId - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonId
 * @permissionId WIX_STORES.RIBBON_READ
 * @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon
 */
export declare function getRibbon(ribbonId: string, options?: GetRibbonOptions): Promise<Ribbon & RibbonNonNullableFields>;
export interface GetRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
/**
 * Updates a ribbon.
 *
 *
 * Each time the ribbon is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the ribbon.
 * This ensures you're working with the latest ribbon and prevents unintended overwrites.
 * @param _id - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField ribbon
 * @requiredField ribbon.revision
 * @permissionId WIX_STORES.RIBBON_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated Ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon
 */
export declare function updateRibbon(_id: string | null, ribbon: UpdateRibbon, options?: UpdateRibbonOptions): Promise<Ribbon & RibbonNonNullableFields>;
export interface UpdateRibbon {
    /**
     * Ribbon ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ribbon is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ribbon.
     *
     * Ignored when creating a ribbon.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ribbon was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ribbon was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Ribbon name. */
    name?: string;
    /**
     * Number of products this ribbon is assigned to.
     * > **Note:** Returned only when you pass `"ASSIGNED_PRODUCT_COUNT"` to the `fields` array in Ribbon API requests.
     * @readonly
     */
    assignedProductCount?: number | null;
}
export interface UpdateRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
/**
 * Deletes a ribbon.
 *
 *
 * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
 * @param ribbonId - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonId
 * @permissionId WIX_STORES.RIBBON_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon
 */
export declare function deleteRibbon(ribbonId: string): Promise<void>;
/**
 * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Brands runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.RIBBON_READ
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons
 */
export declare function queryRibbons(options?: QueryRibbonsOptions): RibbonsQueryBuilder;
export interface QueryRibbonsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[] | undefined;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface RibbonsQueryResult extends QueryCursorResult {
    items: Ribbon[];
    query: RibbonsQueryBuilder;
    next: () => Promise<RibbonsQueryResult>;
    prev: () => Promise<RibbonsQueryResult>;
}
export interface RibbonsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => RibbonsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any[]) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: any) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'name', value: boolean) => RibbonsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => RibbonsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_createdDate' | '_updatedDate' | 'name'>) => RibbonsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => RibbonsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => RibbonsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<RibbonsQueryResult>;
}
/**
 * Creates multiple ribbons.
 * @param ribbons - Ribbons to create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbons
 * @requiredField ribbons.name
 * @permissionId WIX_STORES.RIBBON_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons
 */
export declare function bulkCreateRibbons(ribbons: Ribbon[], options?: BulkCreateRibbonsOptions): Promise<BulkCreateRibbonsResponse & BulkCreateRibbonsResponseNonNullableFields>;
export interface BulkCreateRibbonsOptions {
    /**
     * Whether to return the full created ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
/**
 * Updates multiple ribbons.
 *
 * Each time a ribbon is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating a ribbon.
 * This ensures you're working with the latest ribbon and prevents unintended overwrites.
 * @param ribbons - List of ribbons to update.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbons
 * @requiredField ribbons.ribbon._id
 * @requiredField ribbons.ribbon.revision
 * @permissionId WIX_STORES.RIBBON_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons
 */
export declare function bulkUpdateRibbons(ribbons: MaskedRibbon[], options?: BulkUpdateRibbonsOptions): Promise<BulkUpdateRibbonsResponse & BulkUpdateRibbonsResponseNonNullableFields>;
export interface BulkUpdateRibbonsOptions {
    /**
     * Whether to return the full updated ribbon entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
/**
 * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
 * @param ribbonName - Ribbon name to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonName
 * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon
 */
export declare function getOrCreateRibbon(ribbonName: string, options?: GetOrCreateRibbonOptions): Promise<GetOrCreateRibbonResponse & GetOrCreateRibbonResponseNonNullableFields>;
export interface GetOrCreateRibbonOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
/**
 * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
 * @param ribbonNames - Ribbon names to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonNames
 * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons
 */
export declare function bulkGetOrCreateRibbons(ribbonNames: string[], options?: BulkGetOrCreateRibbonsOptions): Promise<BulkGetOrCreateRibbonsResponse & BulkGetOrCreateRibbonsResponseNonNullableFields>;
export interface BulkGetOrCreateRibbonsOptions {
    /**
     * Fields to include in the response.
     *
     * Supported values: `ASSIGNED_PRODUCTS_COUNT`
     */
    fields?: RequestedFields[];
}
/**
 * Deletes multiple ribbons.
 * @param ribbonIds - IDs of ribbons to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonIds
 * @permissionId WIX_STORES.RIBBON_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons
 */
export declare function bulkDeleteRibbons(ribbonIds: string[]): Promise<BulkDeleteRibbonsResponse & BulkDeleteRibbonsResponseNonNullableFields>;
export {};
