import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresCatalogV3Ribbon from './stores-catalog-v3-ribbon-ribbons-v-3.http.js';
export var RequestedFields;
(function (RequestedFields) {
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    RequestedFields["ASSIGNED_PRODUCT_COUNT"] = "ASSIGNED_PRODUCT_COUNT";
})(RequestedFields || (RequestedFields = {}));
export var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a ribbon.
 *
 * To assign the ribbon to a product, include the `ribbon.id` or `ribbon.name` when [creating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/create-product) or [updating](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/update-product) a product.
 * @param ribbon - Ribbon to create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbon
 * @requiredField ribbon.name
 * @permissionId WIX_STORES.RIBBON_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.CreateRibbon
 */
export async function createRibbon(ribbon) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ ribbon: ribbon });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.createRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ribbon: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ribbon']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a ribbon.
 * @param ribbonId - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonId
 * @permissionId WIX_STORES.RIBBON_READ
 * @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetRibbon
 */
export async function getRibbon(ribbonId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbonId: ribbonId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.getRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ribbonId: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['ribbonId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a ribbon.
 *
 *
 * Each time the ribbon is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the ribbon.
 * This ensures you're working with the latest ribbon and prevents unintended overwrites.
 * @param _id - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField ribbon
 * @requiredField ribbon.revision
 * @permissionId WIX_STORES.RIBBON_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated Ribbon.
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.UpdateRibbon
 */
export async function updateRibbon(_id, ribbon, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbon: { ...ribbon, id: _id },
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.updateRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.ribbon;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { ribbon: '$[1]' },
            explicitPathsToArguments: {
                'ribbon.id': '$[0]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'ribbon', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a ribbon.
 *
 *
 * > **Note:** Deleting a ribbon will also remove it from all products it is assigned to.
 * @param ribbonId - Ribbon ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonId
 * @permissionId WIX_STORES.RIBBON_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.DeleteRibbon
 */
export async function deleteRibbon(ribbonId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ ribbonId: ribbonId });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.deleteRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ribbonId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ribbonId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 ribbons, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 *
 * Query Brands runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 *
 * For field support for filters and sorting,
 * see [Ribbons: Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/ribbons-v3/supported-filters-and-sorting).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Read ribbons in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId WIX_STORES.RIBBON_READ
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.QueryRibbons
 */
export function queryRibbons(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3Ribbon.queryRibbons({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.ribbons,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Creates multiple ribbons.
 * @param ribbons - Ribbons to create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbons
 * @requiredField ribbons.name
 * @permissionId WIX_STORES.RIBBON_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkCreateRibbons
 */
export async function bulkCreateRibbons(ribbons, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbons: ribbons,
        returnEntity: options?.returnEntity,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkCreateRibbons(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ribbons: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['ribbons', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple ribbons.
 *
 * Each time a ribbon is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating a ribbon.
 * This ensures you're working with the latest ribbon and prevents unintended overwrites.
 * @param ribbons - List of ribbons to update.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbons
 * @requiredField ribbons.ribbon._id
 * @requiredField ribbons.ribbon.revision
 * @permissionId WIX_STORES.RIBBON_UPDATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkUpdateRibbons
 */
export async function bulkUpdateRibbons(ribbons, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbons: ribbons,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkUpdateRibbons(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ribbons: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['ribbons', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a ribbon by name, or creates a ribbon if one with the passed `ribbonName` doesn't exist.
 * @param ribbonName - Ribbon name to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonName
 * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.GetOrCreateRibbon
 */
export async function getOrCreateRibbon(ribbonName, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbonName: ribbonName,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.getOrCreateRibbon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ribbonName: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['ribbonName', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves multiple ribbons by name, or creates multiple ribbons if those with the passed `ribbonNames` don't exist.
 * @param ribbonNames - Ribbon names to retrieve or create.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonNames
 * @permissionId WIX_STORES.RIBBON_GET_OR_CREATE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkGetOrCreateRibbons
 */
export async function bulkGetOrCreateRibbons(ribbonNames, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbonNames: ribbonNames,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkGetOrCreateRibbons(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ribbonNames: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['ribbonNames', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes multiple ribbons.
 * @param ribbonIds - IDs of ribbons to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField ribbonIds
 * @permissionId WIX_STORES.RIBBON_DELETE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Ribbon write in v3 catalog
 * @permissionScopeId SCOPE.STORES.RIBBON_WRITE
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.ribbon.v3.RibbonService.BulkDeleteRibbons
 */
export async function bulkDeleteRibbons(ribbonIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ribbonIds: ribbonIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Ribbon.bulkDeleteRibbons(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ribbonIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ribbonIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-catalog-v3-ribbon-ribbons-v-3.universal.js.map