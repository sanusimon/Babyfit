"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WixCommonSortOrder = exports.CommonSearchDetailsMode = exports.RequestedFields = exports.AvailabilityStatus = exports.SingleEntityOpsRequestedFields = exports.WebhookIdentityType = exports.State = exports.Enum = exports.DiscountType = exports.SubscriptionFrequency = exports.FileType = exports.WeightUnit = exports.MeasurementUnit = exports.ProductType = exports.ProductPreorderAvailability = exports.PreorderStatus = exports.InventoryAvailabilityStatus = exports.ModifierRenderType = exports.ChoiceType = exports.ProductOptionRenderType = exports.MediaType = exports.NullValue = exports.VerticalAlignment = exports.Direction = exports.InitialExpandedItems = exports.AppType = exports.FontType = exports.DecorationType = exports.BackgroundType = exports.PollLayoutDirection = exports.PollLayoutType = exports.VoteRole = exports.ViewRole = exports.MapType = exports.Source = exports.GIFType = exports.ThumbnailsAlignment = exports.Crop = exports.Orientation = exports.LayoutType = exports.ViewMode = exports.Alignment = exports.Width = exports.LineStyle = exports.TextAlignment = exports.Target = exports.Type = exports.PluginContainerDataAlignment = exports.WidthType = exports.NodeType = void 0;
exports.RoundingStrategy = exports.VariantsOpsRequestedFields = exports.SearchDetailsMode = exports.CommonAggregationType = exports.DateHistogramAggregationInterval = exports.NestedAggregationNestedAggregationType = exports.CommonScalarType = exports.ValueAggregationMissingValues = exports.ValueAggregationSortDirection = exports.ValueAggregationSortType = exports.CommonSortOrder = exports.Mode = exports.AggregationType = exports.Interval = exports.NestedAggregationType = exports.ScalarType = exports.MissingValues = exports.SortDirection = exports.SortType = exports.SortOrder = exports.BulkAdjustProductVariantsByFilterRequestRoundingStrategy = exports.WixCommonAggregationType = exports.AggregationDateHistogramAggregationInterval = exports.AggregationNestedAggregationNestedAggregationType = exports.WixCommonScalarType = exports.AggregationValueAggregationMissingValues = exports.AggregationValueAggregationSortDirection = exports.AggregationValueAggregationSortType = void 0;
var NodeType;
(function (NodeType) {
    NodeType["PARAGRAPH"] = "PARAGRAPH";
    NodeType["TEXT"] = "TEXT";
    NodeType["HEADING"] = "HEADING";
    NodeType["BULLETED_LIST"] = "BULLETED_LIST";
    NodeType["ORDERED_LIST"] = "ORDERED_LIST";
    NodeType["LIST_ITEM"] = "LIST_ITEM";
    NodeType["BLOCKQUOTE"] = "BLOCKQUOTE";
    NodeType["CODE_BLOCK"] = "CODE_BLOCK";
    NodeType["VIDEO"] = "VIDEO";
    NodeType["DIVIDER"] = "DIVIDER";
    NodeType["FILE"] = "FILE";
    NodeType["GALLERY"] = "GALLERY";
    NodeType["GIF"] = "GIF";
    NodeType["HTML"] = "HTML";
    NodeType["IMAGE"] = "IMAGE";
    NodeType["LINK_PREVIEW"] = "LINK_PREVIEW";
    /** @deprecated */
    NodeType["MAP"] = "MAP";
    NodeType["POLL"] = "POLL";
    NodeType["APP_EMBED"] = "APP_EMBED";
    NodeType["BUTTON"] = "BUTTON";
    NodeType["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
    NodeType["TABLE"] = "TABLE";
    NodeType["EMBED"] = "EMBED";
    NodeType["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
    NodeType["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
    NodeType["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
    NodeType["TABLE_CELL"] = "TABLE_CELL";
    NodeType["TABLE_ROW"] = "TABLE_ROW";
    NodeType["EXTERNAL"] = "EXTERNAL";
    NodeType["AUDIO"] = "AUDIO";
    NodeType["CAPTION"] = "CAPTION";
    NodeType["LAYOUT"] = "LAYOUT";
    NodeType["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (exports.NodeType = NodeType = {}));
var WidthType;
(function (WidthType) {
    /** Width matches the content width */
    WidthType["CONTENT"] = "CONTENT";
    /** Small Width */
    WidthType["SMALL"] = "SMALL";
    /** Width will match the original asset width */
    WidthType["ORIGINAL"] = "ORIGINAL";
    /** coast-to-coast display */
    WidthType["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (exports.WidthType = WidthType = {}));
var PluginContainerDataAlignment;
(function (PluginContainerDataAlignment) {
    /** Center Alignment */
    PluginContainerDataAlignment["CENTER"] = "CENTER";
    /** Left Alignment */
    PluginContainerDataAlignment["LEFT"] = "LEFT";
    /** Right Alignment */
    PluginContainerDataAlignment["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (exports.PluginContainerDataAlignment = PluginContainerDataAlignment = {}));
var Type;
(function (Type) {
    /** Regular link button */
    Type["LINK"] = "LINK";
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    Type["ACTION"] = "ACTION";
})(Type || (exports.Type = Type = {}));
var Target;
(function (Target) {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    Target["SELF"] = "SELF";
    /** Opens the linked document in a new window or tab */
    Target["BLANK"] = "BLANK";
    /** Opens the linked document in the parent frame */
    Target["PARENT"] = "PARENT";
    /** Opens the linked document in the full body of the window */
    Target["TOP"] = "TOP";
})(Target || (exports.Target = Target = {}));
var TextAlignment;
(function (TextAlignment) {
    /** browser default, eqivalent to `initial` */
    TextAlignment["AUTO"] = "AUTO";
    /** Left align */
    TextAlignment["LEFT"] = "LEFT";
    /** Right align */
    TextAlignment["RIGHT"] = "RIGHT";
    /** Center align */
    TextAlignment["CENTER"] = "CENTER";
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    TextAlignment["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (exports.TextAlignment = TextAlignment = {}));
var LineStyle;
(function (LineStyle) {
    /** Single Line */
    LineStyle["SINGLE"] = "SINGLE";
    /** Double Line */
    LineStyle["DOUBLE"] = "DOUBLE";
    /** Dashed Line */
    LineStyle["DASHED"] = "DASHED";
    /** Dotted Line */
    LineStyle["DOTTED"] = "DOTTED";
})(LineStyle || (exports.LineStyle = LineStyle = {}));
var Width;
(function (Width) {
    /** Large line */
    Width["LARGE"] = "LARGE";
    /** Medium line */
    Width["MEDIUM"] = "MEDIUM";
    /** Small line */
    Width["SMALL"] = "SMALL";
})(Width || (exports.Width = Width = {}));
var Alignment;
(function (Alignment) {
    /** Center alignment */
    Alignment["CENTER"] = "CENTER";
    /** Left alignment */
    Alignment["LEFT"] = "LEFT";
    /** Right alignment */
    Alignment["RIGHT"] = "RIGHT";
})(Alignment || (exports.Alignment = Alignment = {}));
var ViewMode;
(function (ViewMode) {
    /** No PDF view */
    ViewMode["NONE"] = "NONE";
    /** Full PDF view */
    ViewMode["FULL"] = "FULL";
    /** Mini PDF view */
    ViewMode["MINI"] = "MINI";
})(ViewMode || (exports.ViewMode = ViewMode = {}));
var LayoutType;
(function (LayoutType) {
    /** Collage type */
    LayoutType["COLLAGE"] = "COLLAGE";
    /** Masonry type */
    LayoutType["MASONRY"] = "MASONRY";
    /** Grid type */
    LayoutType["GRID"] = "GRID";
    /** Thumbnail type */
    LayoutType["THUMBNAIL"] = "THUMBNAIL";
    /** Slider type */
    LayoutType["SLIDER"] = "SLIDER";
    /** Slideshow type */
    LayoutType["SLIDESHOW"] = "SLIDESHOW";
    /** Panorama type */
    LayoutType["PANORAMA"] = "PANORAMA";
    /** Column type */
    LayoutType["COLUMN"] = "COLUMN";
    /** Magic type */
    LayoutType["MAGIC"] = "MAGIC";
    /** Fullsize images type */
    LayoutType["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (exports.LayoutType = LayoutType = {}));
var Orientation;
(function (Orientation) {
    /** Rows Orientation */
    Orientation["ROWS"] = "ROWS";
    /** Columns Orientation */
    Orientation["COLUMNS"] = "COLUMNS";
})(Orientation || (exports.Orientation = Orientation = {}));
var Crop;
(function (Crop) {
    /** Crop to fill */
    Crop["FILL"] = "FILL";
    /** Crop to fit */
    Crop["FIT"] = "FIT";
})(Crop || (exports.Crop = Crop = {}));
var ThumbnailsAlignment;
(function (ThumbnailsAlignment) {
    /** Top alignment */
    ThumbnailsAlignment["TOP"] = "TOP";
    /** Right alignment */
    ThumbnailsAlignment["RIGHT"] = "RIGHT";
    /** Bottom alignment */
    ThumbnailsAlignment["BOTTOM"] = "BOTTOM";
    /** Left alignment */
    ThumbnailsAlignment["LEFT"] = "LEFT";
    /** No thumbnail */
    ThumbnailsAlignment["NONE"] = "NONE";
})(ThumbnailsAlignment || (exports.ThumbnailsAlignment = ThumbnailsAlignment = {}));
var GIFType;
(function (GIFType) {
    GIFType["NORMAL"] = "NORMAL";
    GIFType["STICKER"] = "STICKER";
})(GIFType || (exports.GIFType = GIFType = {}));
var Source;
(function (Source) {
    Source["HTML"] = "HTML";
    Source["ADSENSE"] = "ADSENSE";
})(Source || (exports.Source = Source = {}));
var MapType;
(function (MapType) {
    /** Roadmap map type */
    MapType["ROADMAP"] = "ROADMAP";
    /** Satellite map type */
    MapType["SATELITE"] = "SATELITE";
    /** Hybrid map type */
    MapType["HYBRID"] = "HYBRID";
    /** Terrain map type */
    MapType["TERRAIN"] = "TERRAIN";
})(MapType || (exports.MapType = MapType = {}));
var ViewRole;
(function (ViewRole) {
    /** Only Poll creator can view the results */
    ViewRole["CREATOR"] = "CREATOR";
    /** Anyone who voted can see the results */
    ViewRole["VOTERS"] = "VOTERS";
    /** Anyone can see the results, even if one didn't vote */
    ViewRole["EVERYONE"] = "EVERYONE";
})(ViewRole || (exports.ViewRole = ViewRole = {}));
var VoteRole;
(function (VoteRole) {
    /** Logged in member */
    VoteRole["SITE_MEMBERS"] = "SITE_MEMBERS";
    /** Anyone */
    VoteRole["ALL"] = "ALL";
})(VoteRole || (exports.VoteRole = VoteRole = {}));
var PollLayoutType;
(function (PollLayoutType) {
    /** List */
    PollLayoutType["LIST"] = "LIST";
    /** Grid */
    PollLayoutType["GRID"] = "GRID";
})(PollLayoutType || (exports.PollLayoutType = PollLayoutType = {}));
var PollLayoutDirection;
(function (PollLayoutDirection) {
    /** Left-to-right */
    PollLayoutDirection["LTR"] = "LTR";
    /** Right-to-left */
    PollLayoutDirection["RTL"] = "RTL";
})(PollLayoutDirection || (exports.PollLayoutDirection = PollLayoutDirection = {}));
var BackgroundType;
(function (BackgroundType) {
    /** Color background type */
    BackgroundType["COLOR"] = "COLOR";
    /** Image background type */
    BackgroundType["IMAGE"] = "IMAGE";
    /** Gradiant background type */
    BackgroundType["GRADIENT"] = "GRADIENT";
})(BackgroundType || (exports.BackgroundType = BackgroundType = {}));
var DecorationType;
(function (DecorationType) {
    DecorationType["BOLD"] = "BOLD";
    DecorationType["ITALIC"] = "ITALIC";
    DecorationType["UNDERLINE"] = "UNDERLINE";
    DecorationType["SPOILER"] = "SPOILER";
    DecorationType["ANCHOR"] = "ANCHOR";
    DecorationType["MENTION"] = "MENTION";
    DecorationType["LINK"] = "LINK";
    DecorationType["COLOR"] = "COLOR";
    DecorationType["FONT_SIZE"] = "FONT_SIZE";
    DecorationType["EXTERNAL"] = "EXTERNAL";
})(DecorationType || (exports.DecorationType = DecorationType = {}));
var FontType;
(function (FontType) {
    FontType["PX"] = "PX";
    FontType["EM"] = "EM";
})(FontType || (exports.FontType = FontType = {}));
var AppType;
(function (AppType) {
    AppType["PRODUCT"] = "PRODUCT";
    AppType["EVENT"] = "EVENT";
    AppType["BOOKING"] = "BOOKING";
})(AppType || (exports.AppType = AppType = {}));
var InitialExpandedItems;
(function (InitialExpandedItems) {
    /** First item will be expended initally */
    InitialExpandedItems["FIRST"] = "FIRST";
    /** All items will expended initally */
    InitialExpandedItems["ALL"] = "ALL";
    /** All items collapsed initally */
    InitialExpandedItems["NONE"] = "NONE";
})(InitialExpandedItems || (exports.InitialExpandedItems = InitialExpandedItems = {}));
var Direction;
(function (Direction) {
    /** Left-to-right */
    Direction["LTR"] = "LTR";
    /** Right-to-left */
    Direction["RTL"] = "RTL";
})(Direction || (exports.Direction = Direction = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    /** Top alignment */
    VerticalAlignment["TOP"] = "TOP";
    /** Middle alignment */
    VerticalAlignment["MIDDLE"] = "MIDDLE";
    /** Bottom alignment */
    VerticalAlignment["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (exports.VerticalAlignment = VerticalAlignment = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
var NullValue;
(function (NullValue) {
    /** Null value. */
    NullValue["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (exports.NullValue = NullValue = {}));
var MediaType;
(function (MediaType) {
    MediaType["UNKNOWN_MEDIA_TYPE"] = "UNKNOWN_MEDIA_TYPE";
    /** Image media type. */
    MediaType["IMAGE"] = "IMAGE";
    /** Video media type. */
    MediaType["VIDEO"] = "VIDEO";
})(MediaType || (exports.MediaType = MediaType = {}));
var ProductOptionRenderType;
(function (ProductOptionRenderType) {
    /** Not implemented. */
    ProductOptionRenderType["UNKNOWN_OPTION_RENDER_TYPE"] = "UNKNOWN_OPTION_RENDER_TYPE";
    /** Text choices. */
    ProductOptionRenderType["TEXT_CHOICES"] = "TEXT_CHOICES";
    /** Swatch choices. */
    ProductOptionRenderType["SWATCH_CHOICES"] = "SWATCH_CHOICES";
})(ProductOptionRenderType || (exports.ProductOptionRenderType = ProductOptionRenderType = {}));
var ChoiceType;
(function (ChoiceType) {
    ChoiceType["UNKNOWN_CHOICE_TYPE"] = "UNKNOWN_CHOICE_TYPE";
    /** Text choice. */
    ChoiceType["CHOICE_TEXT"] = "CHOICE_TEXT";
    /** Single color choice. */
    ChoiceType["ONE_COLOR"] = "ONE_COLOR";
    /** Multiple colors choice. */
    ChoiceType["MULTIPLE_COLORS"] = "MULTIPLE_COLORS";
    /** Image choice. */
    ChoiceType["IMAGE"] = "IMAGE";
})(ChoiceType || (exports.ChoiceType = ChoiceType = {}));
var ModifierRenderType;
(function (ModifierRenderType) {
    /** Not implemented. */
    ModifierRenderType["UNKNOWN_MODIFIER_RENDER_TYPE"] = "UNKNOWN_MODIFIER_RENDER_TYPE";
    /** Free text. */
    ModifierRenderType["FREE_TEXT"] = "FREE_TEXT";
    /** Text choices. */
    ModifierRenderType["TEXT_CHOICES"] = "TEXT_CHOICES";
    /** Swatch choices. */
    ModifierRenderType["SWATCH_CHOICES"] = "SWATCH_CHOICES";
})(ModifierRenderType || (exports.ModifierRenderType = ModifierRenderType = {}));
var InventoryAvailabilityStatus;
(function (InventoryAvailabilityStatus) {
    InventoryAvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** All variants are in stock and available for purchase. */
    InventoryAvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** All variants are out of stock. */
    InventoryAvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Some variants are out of stock and some are in stock and available for purchase. */
    InventoryAvailabilityStatus["PARTIALLY_OUT_OF_STOCK"] = "PARTIALLY_OUT_OF_STOCK";
})(InventoryAvailabilityStatus || (exports.InventoryAvailabilityStatus = InventoryAvailabilityStatus = {}));
var PreorderStatus;
(function (PreorderStatus) {
    PreorderStatus["UNKNOWN_PREORDER_STATUS"] = "UNKNOWN_PREORDER_STATUS";
    /** All variants are enabled for preorder. */
    PreorderStatus["ENABLED"] = "ENABLED";
    /** All variants are disabled for preorder. */
    PreorderStatus["DISABLED"] = "DISABLED";
    /** Some variants are disabled and some are enabled for preorder. */
    PreorderStatus["PARTIALLY_ENABLED"] = "PARTIALLY_ENABLED";
})(PreorderStatus || (exports.PreorderStatus = PreorderStatus = {}));
var ProductPreorderAvailability;
(function (ProductPreorderAvailability) {
    ProductPreorderAvailability["UNKNOWN_PREORDER_AVAILABILITY_STATUS"] = "UNKNOWN_PREORDER_AVAILABILITY_STATUS";
    /** All the product variants are available for preorder. */
    ProductPreorderAvailability["ALL_VARIANTS"] = "ALL_VARIANTS";
    /** None of the product variants are available for preorder. */
    ProductPreorderAvailability["NO_VARIANTS"] = "NO_VARIANTS";
    /** Some of the product variants are available for preorder. */
    ProductPreorderAvailability["SOME_VARIANTS"] = "SOME_VARIANTS";
})(ProductPreorderAvailability || (exports.ProductPreorderAvailability = ProductPreorderAvailability = {}));
var ProductType;
(function (ProductType) {
    /** Not implemented. */
    ProductType["UNKNOWN_PRODUCT_TYPE"] = "UNKNOWN_PRODUCT_TYPE";
    /** Physical product. */
    ProductType["PHYSICAL"] = "PHYSICAL";
    /** Digital product. */
    ProductType["DIGITAL"] = "DIGITAL";
})(ProductType || (exports.ProductType = ProductType = {}));
var MeasurementUnit;
(function (MeasurementUnit) {
    MeasurementUnit["UNSPECIFIED"] = "UNSPECIFIED";
    MeasurementUnit["ML"] = "ML";
    MeasurementUnit["CL"] = "CL";
    MeasurementUnit["L"] = "L";
    MeasurementUnit["CBM"] = "CBM";
    MeasurementUnit["MG"] = "MG";
    MeasurementUnit["G"] = "G";
    MeasurementUnit["KG"] = "KG";
    MeasurementUnit["MM"] = "MM";
    MeasurementUnit["CM"] = "CM";
    MeasurementUnit["M"] = "M";
    MeasurementUnit["SQM"] = "SQM";
    MeasurementUnit["OZ"] = "OZ";
    MeasurementUnit["LB"] = "LB";
    MeasurementUnit["FLOZ"] = "FLOZ";
    MeasurementUnit["PT"] = "PT";
    MeasurementUnit["QT"] = "QT";
    MeasurementUnit["GAL"] = "GAL";
    MeasurementUnit["IN"] = "IN";
    MeasurementUnit["FT"] = "FT";
    MeasurementUnit["YD"] = "YD";
    MeasurementUnit["SQFT"] = "SQFT";
})(MeasurementUnit || (exports.MeasurementUnit = MeasurementUnit = {}));
var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (exports.WeightUnit = WeightUnit = {}));
var FileType;
(function (FileType) {
    /** Unspecified file type. */
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    /** Secure picture file. */
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    /** Secure video file. */
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    /** Secure document file. */
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    /** Secure music file. */
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    /** Secure archive file. */
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (exports.FileType = FileType = {}));
/** Frequency unit of recurring payment */
var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (exports.SubscriptionFrequency = SubscriptionFrequency = {}));
var DiscountType;
(function (DiscountType) {
    DiscountType["UNKNOWN_DISCOUNT"] = "UNKNOWN_DISCOUNT";
    /** Discount by a specific amount. */
    DiscountType["AMOUNT"] = "AMOUNT";
    /** Discount by a percentage. */
    DiscountType["PERCENT"] = "PERCENT";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
var Enum;
(function (Enum) {
    /** Default value. Means that permission not set */
    Enum["UNKNOWN"] = "UNKNOWN";
    /** Protected exposure. Exposed to members and owners */
    Enum["PROTECTED"] = "PROTECTED";
    /** Private exposure. Exposed to owners */
    Enum["PRIVATE"] = "PRIVATE";
    /** Public exposure. Visible to everyone */
    Enum["PUBLIC"] = "PUBLIC";
    /** Used for partial updates, to state that exposure is not changing */
    Enum["UNCHANGED"] = "UNCHANGED";
    /** Protected to members of permitted groups and owners */
    Enum["GROUP_PROTECTED"] = "GROUP_PROTECTED";
})(Enum || (exports.Enum = Enum = {}));
var State;
(function (State) {
    /** default state */
    State["Unknown"] = "Unknown";
    /** metasite does not require site search indexing */
    State["Off"] = "Off";
    /** metasite requires site search indexing */
    State["On"] = "On";
})(State || (exports.State = State = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
var SingleEntityOpsRequestedFields;
(function (SingleEntityOpsRequestedFields) {
    /** Not implemented. */
    SingleEntityOpsRequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    SingleEntityOpsRequestedFields["URL"] = "URL";
    SingleEntityOpsRequestedFields["CURRENCY"] = "CURRENCY";
    SingleEntityOpsRequestedFields["INFO_SECTION"] = "INFO_SECTION";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    SingleEntityOpsRequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    SingleEntityOpsRequestedFields["PLAIN_DESCRIPTION"] = "PLAIN_DESCRIPTION";
    SingleEntityOpsRequestedFields["INFO_SECTION_PLAIN_DESCRIPTION"] = "INFO_SECTION_PLAIN_DESCRIPTION";
    SingleEntityOpsRequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    SingleEntityOpsRequestedFields["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
    SingleEntityOpsRequestedFields["WEIGHT_MEASUREMENT_UNIT_INFO"] = "WEIGHT_MEASUREMENT_UNIT_INFO";
    SingleEntityOpsRequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    SingleEntityOpsRequestedFields["MEDIA_ITEMS_INFO"] = "MEDIA_ITEMS_INFO";
    SingleEntityOpsRequestedFields["DESCRIPTION"] = "DESCRIPTION";
    SingleEntityOpsRequestedFields["DIRECT_CATEGORIES_INFO"] = "DIRECT_CATEGORIES_INFO";
    SingleEntityOpsRequestedFields["ALL_CATEGORIES_INFO"] = "ALL_CATEGORIES_INFO";
    SingleEntityOpsRequestedFields["INFO_SECTION_DESCRIPTION"] = "INFO_SECTION_DESCRIPTION";
    SingleEntityOpsRequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(SingleEntityOpsRequestedFields || (exports.SingleEntityOpsRequestedFields = SingleEntityOpsRequestedFields = {}));
var AvailabilityStatus;
(function (AvailabilityStatus) {
    AvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** Product is out of stock. */
    AvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    AvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    AvailabilityStatus["PREORDER"] = "PREORDER";
})(AvailabilityStatus || (exports.AvailabilityStatus = AvailabilityStatus = {}));
var RequestedFields;
(function (RequestedFields) {
    /** Not implemented. */
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    RequestedFields["URL"] = "URL";
    RequestedFields["CURRENCY"] = "CURRENCY";
    RequestedFields["INFO_SECTION"] = "INFO_SECTION";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    RequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    RequestedFields["PLAIN_DESCRIPTION"] = "PLAIN_DESCRIPTION";
    RequestedFields["INFO_SECTION_PLAIN_DESCRIPTION"] = "INFO_SECTION_PLAIN_DESCRIPTION";
    RequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    RequestedFields["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
    RequestedFields["WEIGHT_MEASUREMENT_UNIT_INFO"] = "WEIGHT_MEASUREMENT_UNIT_INFO";
    RequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    RequestedFields["MEDIA_ITEMS_INFO"] = "MEDIA_ITEMS_INFO";
    RequestedFields["DESCRIPTION"] = "DESCRIPTION";
    RequestedFields["DIRECT_CATEGORIES_INFO"] = "DIRECT_CATEGORIES_INFO";
    RequestedFields["ALL_CATEGORIES_INFO"] = "ALL_CATEGORIES_INFO";
    RequestedFields["INFO_SECTION_DESCRIPTION"] = "INFO_SECTION_DESCRIPTION";
    RequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(RequestedFields || (exports.RequestedFields = RequestedFields = {}));
var CommonSearchDetailsMode;
(function (CommonSearchDetailsMode) {
    /** Any of the search terms must be present */
    CommonSearchDetailsMode["OR"] = "OR";
    /** All search terms must be present */
    CommonSearchDetailsMode["AND"] = "AND";
})(CommonSearchDetailsMode || (exports.CommonSearchDetailsMode = CommonSearchDetailsMode = {}));
var WixCommonSortOrder;
(function (WixCommonSortOrder) {
    WixCommonSortOrder["ASC"] = "ASC";
    WixCommonSortOrder["DESC"] = "DESC";
})(WixCommonSortOrder || (exports.WixCommonSortOrder = WixCommonSortOrder = {}));
var AggregationValueAggregationSortType;
(function (AggregationValueAggregationSortType) {
    /** Should sort by number of matches */
    AggregationValueAggregationSortType["COUNT"] = "COUNT";
    /** Should sort by value of the field alphabetically */
    AggregationValueAggregationSortType["VALUE"] = "VALUE";
})(AggregationValueAggregationSortType || (exports.AggregationValueAggregationSortType = AggregationValueAggregationSortType = {}));
var AggregationValueAggregationSortDirection;
(function (AggregationValueAggregationSortDirection) {
    /** Should sort in descending order */
    AggregationValueAggregationSortDirection["DESC"] = "DESC";
    /** Should sort in ascending order */
    AggregationValueAggregationSortDirection["ASC"] = "ASC";
})(AggregationValueAggregationSortDirection || (exports.AggregationValueAggregationSortDirection = AggregationValueAggregationSortDirection = {}));
var AggregationValueAggregationMissingValues;
(function (AggregationValueAggregationMissingValues) {
    /** Should missing values be excluded from the aggregation results */
    AggregationValueAggregationMissingValues["EXCLUDE"] = "EXCLUDE";
    /** Should missing values be included in the aggregation results */
    AggregationValueAggregationMissingValues["INCLUDE"] = "INCLUDE";
})(AggregationValueAggregationMissingValues || (exports.AggregationValueAggregationMissingValues = AggregationValueAggregationMissingValues = {}));
var WixCommonScalarType;
(function (WixCommonScalarType) {
    WixCommonScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values */
    WixCommonScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value */
    WixCommonScalarType["MIN"] = "MIN";
    /** Maximum value */
    WixCommonScalarType["MAX"] = "MAX";
})(WixCommonScalarType || (exports.WixCommonScalarType = WixCommonScalarType = {}));
var AggregationNestedAggregationNestedAggregationType;
(function (AggregationNestedAggregationNestedAggregationType) {
    AggregationNestedAggregationNestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    AggregationNestedAggregationNestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    AggregationNestedAggregationNestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    AggregationNestedAggregationNestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationNestedAggregationNestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(AggregationNestedAggregationNestedAggregationType || (exports.AggregationNestedAggregationNestedAggregationType = AggregationNestedAggregationNestedAggregationType = {}));
var AggregationDateHistogramAggregationInterval;
(function (AggregationDateHistogramAggregationInterval) {
    AggregationDateHistogramAggregationInterval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    AggregationDateHistogramAggregationInterval["YEAR"] = "YEAR";
    /** Monthly interval */
    AggregationDateHistogramAggregationInterval["MONTH"] = "MONTH";
    /** Weekly interval */
    AggregationDateHistogramAggregationInterval["WEEK"] = "WEEK";
    /** Daily interval */
    AggregationDateHistogramAggregationInterval["DAY"] = "DAY";
    /** Hourly interval */
    AggregationDateHistogramAggregationInterval["HOUR"] = "HOUR";
    /** Minute interval */
    AggregationDateHistogramAggregationInterval["MINUTE"] = "MINUTE";
    /** Second interval */
    AggregationDateHistogramAggregationInterval["SECOND"] = "SECOND";
})(AggregationDateHistogramAggregationInterval || (exports.AggregationDateHistogramAggregationInterval = AggregationDateHistogramAggregationInterval = {}));
var WixCommonAggregationType;
(function (WixCommonAggregationType) {
    WixCommonAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    WixCommonAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    WixCommonAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    WixCommonAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    WixCommonAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    WixCommonAggregationType["NESTED"] = "NESTED";
})(WixCommonAggregationType || (exports.WixCommonAggregationType = WixCommonAggregationType = {}));
var BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
(function (BulkAdjustProductVariantsByFilterRequestRoundingStrategy) {
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["UNKNOWN_ROUNDING_STRATEGY"] = "UNKNOWN_ROUNDING_STRATEGY";
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["NO_ROUNDING"] = "NO_ROUNDING";
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["CURRENCY_PRECISION"] = "CURRENCY_PRECISION";
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["NEAREST_WHOLE_NUMBER"] = "NEAREST_WHOLE_NUMBER";
})(BulkAdjustProductVariantsByFilterRequestRoundingStrategy || (exports.BulkAdjustProductVariantsByFilterRequestRoundingStrategy = BulkAdjustProductVariantsByFilterRequestRoundingStrategy = {}));
var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var SortType;
(function (SortType) {
    /** Should sort by number of matches. */
    SortType["COUNT"] = "COUNT";
    /** Should sort by value of the field alphabetically. */
    SortType["VALUE"] = "VALUE";
})(SortType || (exports.SortType = SortType = {}));
var SortDirection;
(function (SortDirection) {
    /** Should sort by descending order. */
    SortDirection["DESC"] = "DESC";
    /** Should sort by ascending order. */
    SortDirection["ASC"] = "ASC";
})(SortDirection || (exports.SortDirection = SortDirection = {}));
var MissingValues;
(function (MissingValues) {
    /** Exclude missing values from the aggregation results. */
    MissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values from the aggregation results. */
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (exports.MissingValues = MissingValues = {}));
var ScalarType;
(function (ScalarType) {
    /** Undefined scalar type. */
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    ScalarType["MIN"] = "MIN";
    /** Maximum value. */
    ScalarType["MAX"] = "MAX";
})(ScalarType || (exports.ScalarType = ScalarType = {}));
var NestedAggregationType;
(function (NestedAggregationType) {
    /** Undefined nested aggregation type. */
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation where user can define set of ranges - each representing a bucket. */
    NestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    NestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (exports.NestedAggregationType = NestedAggregationType = {}));
var Interval;
(function (Interval) {
    /** Undefined interval type. */
    Interval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval. */
    Interval["YEAR"] = "YEAR";
    /** Monthly interval. */
    Interval["MONTH"] = "MONTH";
    /** Weekly interval. */
    Interval["WEEK"] = "WEEK";
    /** Daily interval. */
    Interval["DAY"] = "DAY";
    /** Hourly interval. */
    Interval["HOUR"] = "HOUR";
    /** Minute interval. */
    Interval["MINUTE"] = "MINUTE";
    /** Second interval. */
    Interval["SECOND"] = "SECOND";
})(Interval || (exports.Interval = Interval = {}));
var AggregationType;
(function (AggregationType) {
    /** Undefined aggregation type. */
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    AggregationType["VALUE"] = "VALUE";
    /** An aggregation where a user can define set of ranges - each representing a bucket. */
    AggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    AggregationType["SCALAR"] = "SCALAR";
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** A Multi-level aggregation where each next aggregation is nested within previous one. */
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (exports.AggregationType = AggregationType = {}));
var Mode;
(function (Mode) {
    /** Any of the search terms must be present. */
    Mode["OR"] = "OR";
    /** All search terms must be present. */
    Mode["AND"] = "AND";
})(Mode || (exports.Mode = Mode = {}));
var CommonSortOrder;
(function (CommonSortOrder) {
    CommonSortOrder["ASC"] = "ASC";
    CommonSortOrder["DESC"] = "DESC";
})(CommonSortOrder || (exports.CommonSortOrder = CommonSortOrder = {}));
var ValueAggregationSortType;
(function (ValueAggregationSortType) {
    /** Sort by number of matches. */
    ValueAggregationSortType["COUNT"] = "COUNT";
    /** Sort by value of the field alphabetically. */
    ValueAggregationSortType["VALUE"] = "VALUE";
})(ValueAggregationSortType || (exports.ValueAggregationSortType = ValueAggregationSortType = {}));
var ValueAggregationSortDirection;
(function (ValueAggregationSortDirection) {
    /** Sort in descending order. */
    ValueAggregationSortDirection["DESC"] = "DESC";
    /** Sort in ascending order. */
    ValueAggregationSortDirection["ASC"] = "ASC";
})(ValueAggregationSortDirection || (exports.ValueAggregationSortDirection = ValueAggregationSortDirection = {}));
var ValueAggregationMissingValues;
(function (ValueAggregationMissingValues) {
    /** Exclude missing values from the aggregation results. */
    ValueAggregationMissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values in the aggregation results. */
    ValueAggregationMissingValues["INCLUDE"] = "INCLUDE";
})(ValueAggregationMissingValues || (exports.ValueAggregationMissingValues = ValueAggregationMissingValues = {}));
var CommonScalarType;
(function (CommonScalarType) {
    CommonScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    CommonScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    CommonScalarType["MIN"] = "MIN";
    /** Maximum value. */
    CommonScalarType["MAX"] = "MAX";
})(CommonScalarType || (exports.CommonScalarType = CommonScalarType = {}));
var NestedAggregationNestedAggregationType;
(function (NestedAggregationNestedAggregationType) {
    NestedAggregationNestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationNestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    NestedAggregationNestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    NestedAggregationNestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    NestedAggregationNestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationNestedAggregationType || (exports.NestedAggregationNestedAggregationType = NestedAggregationNestedAggregationType = {}));
var DateHistogramAggregationInterval;
(function (DateHistogramAggregationInterval) {
    DateHistogramAggregationInterval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    DateHistogramAggregationInterval["YEAR"] = "YEAR";
    /** Monthly interval */
    DateHistogramAggregationInterval["MONTH"] = "MONTH";
    /** Weekly interval */
    DateHistogramAggregationInterval["WEEK"] = "WEEK";
    /** Daily interval */
    DateHistogramAggregationInterval["DAY"] = "DAY";
    /** Hourly interval */
    DateHistogramAggregationInterval["HOUR"] = "HOUR";
    /** Minute interval */
    DateHistogramAggregationInterval["MINUTE"] = "MINUTE";
    /** Second interval */
    DateHistogramAggregationInterval["SECOND"] = "SECOND";
})(DateHistogramAggregationInterval || (exports.DateHistogramAggregationInterval = DateHistogramAggregationInterval = {}));
var CommonAggregationType;
(function (CommonAggregationType) {
    CommonAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    CommonAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    CommonAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    CommonAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    CommonAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    CommonAggregationType["NESTED"] = "NESTED";
})(CommonAggregationType || (exports.CommonAggregationType = CommonAggregationType = {}));
var SearchDetailsMode;
(function (SearchDetailsMode) {
    /** Any of the search terms must be present. */
    SearchDetailsMode["OR"] = "OR";
    /** All search terms must be present. */
    SearchDetailsMode["AND"] = "AND";
})(SearchDetailsMode || (exports.SearchDetailsMode = SearchDetailsMode = {}));
var VariantsOpsRequestedFields;
(function (VariantsOpsRequestedFields) {
    /** Not implemented. */
    VariantsOpsRequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    VariantsOpsRequestedFields["CURRENCY"] = "CURRENCY";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    VariantsOpsRequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    VariantsOpsRequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    VariantsOpsRequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    VariantsOpsRequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(VariantsOpsRequestedFields || (exports.VariantsOpsRequestedFields = VariantsOpsRequestedFields = {}));
var RoundingStrategy;
(function (RoundingStrategy) {
    /** Undefined rounding strategy. */
    RoundingStrategy["UNKNOWN_ROUNDING_STRATEGY"] = "UNKNOWN_ROUNDING_STRATEGY";
    /**
     * Calculated prices are saved without rounding to keep the maximum possible precision. It's a good idea to round numbers before displaying them.
     * For example, input $3.5555 -> saved value $3.5555
     */
    RoundingStrategy["NO_ROUNDING"] = "NO_ROUNDING";
    /**
     * Calculated prices are rounded according to currency precision.
     * For example:, input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    RoundingStrategy["CURRENCY_PRECISION"] = "CURRENCY_PRECISION";
    /**
     * Calculated prices are rounded to nearest whole number.
     * For example, input $3.5555 -> saved value $4
     */
    RoundingStrategy["NEAREST_WHOLE_NUMBER"] = "NEAREST_WHOLE_NUMBER";
})(RoundingStrategy || (exports.RoundingStrategy = RoundingStrategy = {}));
//# sourceMappingURL=stores-catalog-v3-product-products-v-3.types.js.map