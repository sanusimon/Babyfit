export interface V3Product extends V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the product was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the product was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Product name. Translatable. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * URL to the site's product page.
     *
     * > **Note:** Returned only when you pass `"URL"` to the `fields` array in Products API requests.
     * @readonly
     */
    url?: PageUrlV2;
    /**
     * Product description using rich content.
     * > **Note:** Returned only when you pass `"DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     */
    description?: RichContent;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows the customer to customize the product. For example, selecting color, size, and more.
     *
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     */
    options?: ConnectedOption[];
    /**
     * Product modifiers.
     *
     * Allows the customer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /**
     * List of categories that directly contain this product.
     *
     * Updated automatically when a product is added/removed from a category, when an item is moved within a category, or when a category is deleted.
     * > **Note:** Returned only when you pass `"DIRECT_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    directCategoriesInfo?: ProductCategoriesInfo;
    /**
     * List of categories that directly contain this product, as well as their parent categories.
     * > **Note:** Returned only when you pass `"ALL_CATEGORIES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    allCategoriesInfo?: ProductCategoriesInfo;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product cost range - minimum and maximum costs of all product variants.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    costRange?: PriceRange;
    /**
     * Product inventory info.
     * @readonly
     */
    inventory?: Inventory;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /**
     * Currency used for the pricing of this product, in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format.
     *
     * Defaults to the currency defined in the site settings, unless specified in `x-wix-currency` header.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    currency?: string | null;
    /**
     * Breadcrumbs of the `mainCategoryId`. Used to navigate to parent categories.
     * > **Note:** Returned only when you pass `"BREADCRUMBS_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    breadcrumbsInfo?: BreadcrumbsInfo;
    /**
     * Product actualPrice range - minimum and maximum prices of all product variants.
     * @readonly
     */
    actualPriceRange?: PriceRange;
    /**
     * Product compareAtPrice range - minimum and maximum compare at price prices of all product variants.
     * @readonly
     */
    compareAtPriceRange?: PriceRange;
    /** Product variants. */
    variantsInfo?: VariantsInfo;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Product subscriptions. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantSummary?: VariantSummary;
}
/** @oneof */
export interface V3ProductTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
export interface PageUrlV2 {
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    relativePath?: string;
    /** The page's full URL. For example, `https://mysite.com/product-page/a-product`. */
    url?: string | null;
}
export interface RichContent {
    /** Node objects representing a rich content document. */
    nodes?: Node[];
    /** Object metadata. */
    metadata?: Metadata;
    /** Global styling for header, paragraph, block quote, and code block nodes in the object. */
    documentStyle?: DocumentStyle;
}
export interface Node extends NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
    /** Node type. Use `APP_EMBED` for nodes that embed content from other Wix apps. Use `EMBED` to embed content in [oEmbed](https://oembed.com/) format. */
    type?: NodeType;
    /** Node ID. */
    id?: string;
    /** A list of child nodes. */
    nodes?: Node[];
    /** Padding and background color styling for the node. */
    style?: NodeStyle;
}
/** @oneof */
export interface NodeDataOneOf {
    /** Data for a button node. */
    buttonData?: ButtonData;
    /** Data for a code block node. */
    codeBlockData?: CodeBlockData;
    /** Data for a divider node. */
    dividerData?: DividerData;
    /** Data for a file node. */
    fileData?: FileData;
    /** Data for a gallery node. */
    galleryData?: GalleryData;
    /** Data for a GIF node. */
    gifData?: GIFData;
    /** Data for a heading node. */
    headingData?: HeadingData;
    /** Data for an embedded HTML node. */
    htmlData?: HTMLData;
    /** Data for an image node. */
    imageData?: ImageData;
    /** Data for a link preview node. */
    linkPreviewData?: LinkPreviewData;
    /** @deprecated */
    mapData?: MapData;
    /** Data for a paragraph node. */
    paragraphData?: ParagraphData;
    /** Data for a poll node. */
    pollData?: PollData;
    /** Data for a text node. Used to apply decorations to text. */
    textData?: TextData;
    /** Data for an app embed node. */
    appEmbedData?: AppEmbedData;
    /** Data for a video node. */
    videoData?: VideoData;
    /** Data for an oEmbed node. */
    embedData?: EmbedData;
    /** Data for a collapsible list node. */
    collapsibleListData?: CollapsibleListData;
    /** Data for a table node. */
    tableData?: TableData;
    /** Data for a table cell node. */
    tableCellData?: TableCellData;
    /** Data for a custom external node. */
    externalData?: Record<string, any> | null;
    /** Data for an audio node. */
    audioData?: AudioData;
    /** Data for an ordered list node. */
    orderedListData?: OrderedListData;
    /** Data for a bulleted list node. */
    bulletedListData?: BulletedListData;
    /** Data for a block quote node. */
    blockquoteData?: BlockquoteData;
    /** Data for a caption node. */
    captionData?: CaptionData;
    /** LayoutData layout_data = 31; // Data for a layout node. Reserved for future use. */
    layoutCellData?: LayoutCellData;
}
export declare enum NodeType {
    PARAGRAPH = "PARAGRAPH",
    TEXT = "TEXT",
    HEADING = "HEADING",
    BULLETED_LIST = "BULLETED_LIST",
    ORDERED_LIST = "ORDERED_LIST",
    LIST_ITEM = "LIST_ITEM",
    BLOCKQUOTE = "BLOCKQUOTE",
    CODE_BLOCK = "CODE_BLOCK",
    VIDEO = "VIDEO",
    DIVIDER = "DIVIDER",
    FILE = "FILE",
    GALLERY = "GALLERY",
    GIF = "GIF",
    HTML = "HTML",
    IMAGE = "IMAGE",
    LINK_PREVIEW = "LINK_PREVIEW",
    /** @deprecated */
    MAP = "MAP",
    POLL = "POLL",
    APP_EMBED = "APP_EMBED",
    BUTTON = "BUTTON",
    COLLAPSIBLE_LIST = "COLLAPSIBLE_LIST",
    TABLE = "TABLE",
    EMBED = "EMBED",
    COLLAPSIBLE_ITEM = "COLLAPSIBLE_ITEM",
    COLLAPSIBLE_ITEM_TITLE = "COLLAPSIBLE_ITEM_TITLE",
    COLLAPSIBLE_ITEM_BODY = "COLLAPSIBLE_ITEM_BODY",
    TABLE_CELL = "TABLE_CELL",
    TABLE_ROW = "TABLE_ROW",
    EXTERNAL = "EXTERNAL",
    AUDIO = "AUDIO",
    CAPTION = "CAPTION",
    LAYOUT = "LAYOUT",
    LAYOUT_CELL = "LAYOUT_CELL"
}
export interface NodeStyle {
    /** The top padding value in pixels. */
    paddingTop?: string | null;
    /** The bottom padding value in pixels. */
    paddingBottom?: string | null;
    /** The background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
export interface ButtonData {
    /** Styling for the button's container. */
    containerData?: PluginContainerData;
    /** The button type. */
    type?: Type;
    /** Styling for the button. */
    styles?: Styles;
    /** The text to display on the button. */
    text?: string | null;
    /** Button link details. */
    link?: Link;
}
export interface Border {
    /** Border width in pixels. */
    width?: number | null;
    /** Border radius in pixels. */
    radius?: number | null;
}
export interface Colors {
    /** The text color as a hexadecimal value. */
    text?: string | null;
    /** The border color as a hexadecimal value. */
    border?: string | null;
    /** The background color as a hexadecimal value. */
    background?: string | null;
}
export interface PluginContainerData {
    /** The width of the node when it's displayed. */
    width?: PluginContainerDataWidth;
    /** The node's alignment within its container. */
    alignment?: PluginContainerDataAlignment;
    /** Spoiler cover settings for the node. */
    spoiler?: Spoiler;
    /** The height of the node when it's displayed. */
    height?: Height;
    /** Sets whether text should wrap around this node when it's displayed. If `textWrap` is `false`, the node takes up the width of its container. Defaults to `true` for all node types except 'DIVIVDER' where it defaults to `false`. */
    textWrap?: boolean | null;
}
export declare enum WidthType {
    /** Width matches the content width */
    CONTENT = "CONTENT",
    /** Small Width */
    SMALL = "SMALL",
    /** Width will match the original asset width */
    ORIGINAL = "ORIGINAL",
    /** coast-to-coast display */
    FULL_WIDTH = "FULL_WIDTH"
}
export interface PluginContainerDataWidth extends PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
/** @oneof */
export interface PluginContainerDataWidthDataOneOf {
    /**
     * One of the following predefined width options:
     * `CONTENT`: The width of the container matches the content width.
     * `SMALL`: A small width.
     * `ORIGINAL`: For `imageData` containers only. The width of the container matches the original image width.
     * `FULL_WIDTH`: For `imageData` containers only. The image container takes up the full width of the screen.
     */
    size?: WidthType;
    /** A custom width value in pixels. */
    custom?: string | null;
}
export declare enum PluginContainerDataAlignment {
    /** Center Alignment */
    CENTER = "CENTER",
    /** Left Alignment */
    LEFT = "LEFT",
    /** Right Alignment */
    RIGHT = "RIGHT"
}
export interface Spoiler {
    /** Sets whether the spoiler cover is enabled for this node. Defaults to `false`. */
    enabled?: boolean | null;
    /** The description displayed on top of the spoiler cover. */
    description?: string | null;
    /** The text for the button used to remove the spoiler cover. */
    buttonText?: string | null;
}
export interface Height {
    /** A custom height value in pixels. */
    custom?: string | null;
}
export declare enum Type {
    /** Regular link button */
    LINK = "LINK",
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    ACTION = "ACTION"
}
export interface Styles {
    /** Border attributes. */
    border?: Border;
    /** Color attributes. */
    colors?: Colors;
}
export interface Link extends LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
    /**
     * he HTML `target` attribute value for the link. This property defines where the linked document opens as follows:
     * `SELF` - Default. Opens the linked document in the same frame as the link.
     * `BLANK` - Opens the linked document in a new browser tab or window.
     * `PARENT` - Opens the linked document in the link's parent frame.
     * `TOP` - Opens the linked document in the full body of the link's browser tab or window.
     */
    target?: Target;
    /** The HTML `rel` attribute value for the link. This object specifies the relationship between the current document and the linked document. */
    rel?: Rel;
    /** A serialized object used for a custom or external link panel. */
    customData?: string | null;
}
/** @oneof */
export interface LinkDataOneOf {
    /** The absolute URL for the linked document. */
    url?: string;
    /** The target node's ID. Used for linking to another node in this object. */
    anchor?: string;
}
export declare enum Target {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    SELF = "SELF",
    /** Opens the linked document in a new window or tab */
    BLANK = "BLANK",
    /** Opens the linked document in the parent frame */
    PARENT = "PARENT",
    /** Opens the linked document in the full body of the window */
    TOP = "TOP"
}
export interface Rel {
    /** Indicates to search engine crawlers not to follow the link. Defaults to `false`. */
    nofollow?: boolean | null;
    /** Indicates to search engine crawlers that the link is a paid placement such as sponsored content or an advertisement. Defaults to `false`. */
    sponsored?: boolean | null;
    /** Indicates that this link is user-generated content and isn't necessarily trusted or endorsed by the page’s author. For example, a link in a fourm post. Defaults to `false`. */
    ugc?: boolean | null;
    /** Indicates that this link protect referral information from being passed to the target website. */
    noreferrer?: boolean | null;
}
export interface CodeBlockData {
    /** Styling for the code block's text. */
    textStyle?: TextStyle;
}
export interface TextStyle {
    /** Text alignment. Defaults to `AUTO`. */
    textAlignment?: TextAlignment;
    /** A CSS `line-height` value for the text expressed as a ratio relative to the font size. For example, if the font size is 20px, a `lineHeight` value of `'1.5'`` results in a line height of 30px. */
    lineHeight?: string | null;
}
export declare enum TextAlignment {
    /** browser default, eqivalent to `initial` */
    AUTO = "AUTO",
    /** Left align */
    LEFT = "LEFT",
    /** Right align */
    RIGHT = "RIGHT",
    /** Center align */
    CENTER = "CENTER",
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    JUSTIFY = "JUSTIFY"
}
export interface DividerData {
    /** Styling for the divider's container. */
    containerData?: PluginContainerData;
    /** Divider line style. */
    lineStyle?: LineStyle;
    /** Divider width. */
    width?: Width;
    /** Divider alignment. */
    alignment?: Alignment;
}
export declare enum LineStyle {
    /** Single Line */
    SINGLE = "SINGLE",
    /** Double Line */
    DOUBLE = "DOUBLE",
    /** Dashed Line */
    DASHED = "DASHED",
    /** Dotted Line */
    DOTTED = "DOTTED"
}
export declare enum Width {
    /** Large line */
    LARGE = "LARGE",
    /** Medium line */
    MEDIUM = "MEDIUM",
    /** Small line */
    SMALL = "SMALL"
}
export declare enum Alignment {
    /** Center alignment */
    CENTER = "CENTER",
    /** Left alignment */
    LEFT = "LEFT",
    /** Right alignment */
    RIGHT = "RIGHT"
}
export interface FileData {
    /** Styling for the file's container. */
    containerData?: PluginContainerData;
    /** The source for the file's data. */
    src?: FileSource;
    /** File name. */
    name?: string | null;
    /** File type. */
    type?: string | null;
    /**
     * Use `sizeInKb` instead.
     * @deprecated
     */
    size?: number | null;
    /** Settings for PDF files. */
    pdfSettings?: PDFSettings;
    /** File MIME type. */
    mimeType?: string | null;
    /** File path. */
    path?: string | null;
    /** File size in KB. */
    sizeInKb?: string | null;
}
export declare enum ViewMode {
    /** No PDF view */
    NONE = "NONE",
    /** Full PDF view */
    FULL = "FULL",
    /** Mini PDF view */
    MINI = "MINI"
}
export interface FileSource extends FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
    /** Indicates whether the file's source is private. Defaults to `false`. */
    private?: boolean | null;
}
/** @oneof */
export interface FileSourceDataOneOf {
    /** The absolute URL for the file's source. */
    url?: string | null;
    /**
     * Custom ID. Use `id` instead.
     * @deprecated
     */
    custom?: string | null;
    /** An ID that's resolved to a URL by a resolver function. */
    id?: string | null;
}
export interface PDFSettings {
    /**
     * PDF view mode. One of the following:
     * `NONE` : The PDF isn't displayed.
     * `FULL` : A full page view of the PDF is displayed.
     * `MINI` : A mini view of the PDF is displayed.
     */
    viewMode?: ViewMode;
    /** Sets whether the PDF download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Sets whether the PDF print button is disabled. Defaults to `false`. */
    disablePrint?: boolean | null;
}
export interface GalleryData {
    /** Styling for the gallery's container. */
    containerData?: PluginContainerData;
    /** The items in the gallery. */
    items?: Item[];
    /** Options for defining the gallery's appearance. */
    options?: GalleryOptions;
    /** Sets whether the gallery's expand button is disabled. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Sets whether the gallery's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
export interface V1Media {
    /** The source for the media's data. */
    src?: FileSource;
    /** Media width in pixels. */
    width?: number | null;
    /** Media height in pixels. */
    height?: number | null;
    /** Media duration in seconds. Only relevant for audio and video files. */
    duration?: number | null;
}
export interface ItemImage {
    /** Image file details. */
    media?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
}
export interface Video {
    /** Video file details. */
    media?: V1Media;
    /** Video thumbnail file details. */
    thumbnail?: V1Media;
}
export interface Item extends ItemDataOneOf {
    /** An image item. */
    image?: ItemImage;
    /** A video item. */
    video?: Video;
    /** Item title. */
    title?: string | null;
    /** Item's alternative text. */
    altText?: string | null;
}
/** @oneof */
export interface ItemDataOneOf {
    /** An image item. */
    image?: ItemImage;
    /** A video item. */
    video?: Video;
}
export interface GalleryOptions {
    /** Gallery layout. */
    layout?: Layout;
    /** Styling for gallery items. */
    item?: ItemStyle;
    /** Styling for gallery thumbnail images. */
    thumbnails?: Thumbnails;
}
export declare enum LayoutType {
    /** Collage type */
    COLLAGE = "COLLAGE",
    /** Masonry type */
    MASONRY = "MASONRY",
    /** Grid type */
    GRID = "GRID",
    /** Thumbnail type */
    THUMBNAIL = "THUMBNAIL",
    /** Slider type */
    SLIDER = "SLIDER",
    /** Slideshow type */
    SLIDESHOW = "SLIDESHOW",
    /** Panorama type */
    PANORAMA = "PANORAMA",
    /** Column type */
    COLUMN = "COLUMN",
    /** Magic type */
    MAGIC = "MAGIC",
    /** Fullsize images type */
    FULLSIZE = "FULLSIZE"
}
export declare enum Orientation {
    /** Rows Orientation */
    ROWS = "ROWS",
    /** Columns Orientation */
    COLUMNS = "COLUMNS"
}
export declare enum Crop {
    /** Crop to fill */
    FILL = "FILL",
    /** Crop to fit */
    FIT = "FIT"
}
export declare enum ThumbnailsAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Right alignment */
    RIGHT = "RIGHT",
    /** Bottom alignment */
    BOTTOM = "BOTTOM",
    /** Left alignment */
    LEFT = "LEFT",
    /** No thumbnail */
    NONE = "NONE"
}
export interface Layout {
    /** Gallery layout type. */
    type?: LayoutType;
    /** Sets whether horizontal scroll is enabled. Defaults to `true` unless the layout `type` is set to `GRID` or `COLLAGE`. */
    horizontalScroll?: boolean | null;
    /** Gallery orientation. */
    orientation?: Orientation;
    /** The number of columns to display on full size screens. */
    numberOfColumns?: number | null;
    /** The number of columns to display on mobile screens. */
    mobileNumberOfColumns?: number | null;
}
export interface ItemStyle {
    /** Desirable dimension for each item in pixels (behvaior changes according to gallery type) */
    targetSize?: number | null;
    /** Item ratio */
    ratio?: number | null;
    /** Sets how item images are cropped. */
    crop?: Crop;
    /** The spacing between items in pixels. */
    spacing?: number | null;
}
export interface Thumbnails {
    /** Thumbnail alignment. */
    placement?: ThumbnailsAlignment;
    /** Spacing between thumbnails in pixels. */
    spacing?: number | null;
}
export interface GIFData {
    /** Styling for the GIF's container. */
    containerData?: PluginContainerData;
    /** The source of the full size GIF. */
    original?: GIF;
    /** The source of the downsized GIF. */
    downsized?: GIF;
    /** Height in pixels. */
    height?: number;
    /** Width in pixels. */
    width?: number;
    /** Type of GIF (Sticker or NORMAL). Defaults to `NORMAL`. */
    gifType?: GIFType;
}
export interface GIF {
    /** GIF format URL. */
    gif?: string | null;
    /** MP4 format URL. */
    mp4?: string | null;
    /** Thumbnail URL. */
    still?: string | null;
}
export declare enum GIFType {
    NORMAL = "NORMAL",
    STICKER = "STICKER"
}
export interface HeadingData {
    /** Heading level from 1-6. */
    level?: number;
    /** Styling for the heading text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
}
export interface HTMLData extends HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
    /** Styling for the HTML node's container. Height property is irrelevant for HTML embeds when autoHeight is set to `true`. */
    containerData?: PluginContainerData;
    /** The type of HTML code. */
    source?: Source;
    /** If container height is aligned with its content height. Defaults to `true`. */
    autoHeight?: boolean | null;
}
/** @oneof */
export interface HTMLDataDataOneOf {
    /** The URL for the HTML code for the node. */
    url?: string;
    /** The HTML code for the node. */
    html?: string;
    /**
     * Whether this is an AdSense element. Use `source` instead.
     * @deprecated
     */
    isAdsense?: boolean | null;
}
export declare enum Source {
    HTML = "HTML",
    ADSENSE = "ADSENSE"
}
export interface ImageData {
    /** Styling for the image's container. */
    containerData?: PluginContainerData;
    /** Image file details. */
    image?: V1Media;
    /** Link details for images that are links. */
    link?: Link;
    /** Sets whether the image expands to full screen when clicked. Defaults to `false`. */
    disableExpand?: boolean | null;
    /** Image's alternative text. */
    altText?: string | null;
    /**
     * Deprecated: use Caption node instead.
     * @deprecated
     */
    caption?: string | null;
    /** Sets whether the image's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
}
export interface LinkPreviewData {
    /** Styling for the link preview's container. */
    containerData?: PluginContainerData;
    /** Link details. */
    link?: Link;
    /** Preview title. */
    title?: string | null;
    /** Preview thumbnail URL. */
    thumbnailUrl?: string | null;
    /** Preview description. */
    description?: string | null;
    /** The preview content as HTML. */
    html?: string | null;
}
export interface MapData {
    /** Styling for the map's container. */
    containerData?: PluginContainerData;
    /** Map settings. */
    mapSettings?: MapSettings;
}
export interface MapSettings {
    /** The address to display on the map. */
    address?: string | null;
    /** Sets whether the map is draggable. */
    draggable?: boolean | null;
    /** Sets whether the location marker is visible. */
    marker?: boolean | null;
    /** Sets whether street view control is enabled. */
    streetViewControl?: boolean | null;
    /** Sets whether zoom control is enabled. */
    zoomControl?: boolean | null;
    /** Location latitude. */
    lat?: number | null;
    /** Location longitude. */
    lng?: number | null;
    /** Location name. */
    locationName?: string | null;
    /** Sets whether view mode control is enabled. */
    viewModeControl?: boolean | null;
    /** Initial zoom value. */
    initialZoom?: number | null;
    /** Map type. `HYBRID` is a combination of the `ROADMAP` and `SATELLITE` map types. */
    mapType?: MapType;
}
export declare enum MapType {
    /** Roadmap map type */
    ROADMAP = "ROADMAP",
    /** Satellite map type */
    SATELITE = "SATELITE",
    /** Hybrid map type */
    HYBRID = "HYBRID",
    /** Terrain map type */
    TERRAIN = "TERRAIN"
}
export interface ParagraphData {
    /** Styling for the paragraph text. */
    textStyle?: TextStyle;
    /** Indentation level from 1-4. */
    indentation?: number | null;
    /** Paragraph level */
    level?: number | null;
}
export interface PollData {
    /** Styling for the poll's container. */
    containerData?: PluginContainerData;
    /** Poll data. */
    poll?: Poll;
    /** Layout settings for the poll and voting options. */
    layout?: PollDataLayout;
    /** Styling for the poll and voting options. */
    design?: Design;
}
export declare enum ViewRole {
    /** Only Poll creator can view the results */
    CREATOR = "CREATOR",
    /** Anyone who voted can see the results */
    VOTERS = "VOTERS",
    /** Anyone can see the results, even if one didn't vote */
    EVERYONE = "EVERYONE"
}
export declare enum VoteRole {
    /** Logged in member */
    SITE_MEMBERS = "SITE_MEMBERS",
    /** Anyone */
    ALL = "ALL"
}
export interface Permissions {
    /** Sets who can view the poll results. */
    view?: ViewRole;
    /** Sets who can vote. */
    vote?: VoteRole;
    /** Sets whether one voter can vote multiple times. Defaults to `false`. */
    allowMultipleVotes?: boolean | null;
}
export interface Option {
    /** Option ID. */
    id?: string | null;
    /** Option title. */
    title?: string | null;
    /** The image displayed with the option. */
    image?: V1Media;
}
export interface PollSettings {
    /** Permissions settings for voting. */
    permissions?: Permissions;
    /** Sets whether voters are displayed in the vote results. Defaults to `true`. */
    showVoters?: boolean | null;
    /** Sets whether the vote count is displayed. Defaults to `true`. */
    showVotesCount?: boolean | null;
}
export declare enum PollLayoutType {
    /** List */
    LIST = "LIST",
    /** Grid */
    GRID = "GRID"
}
export declare enum PollLayoutDirection {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
export interface PollLayout {
    /** The layout for displaying the voting options. */
    type?: PollLayoutType;
    /** The direction of the text displayed in the voting options. Text can be displayed either right-to-left or left-to-right. */
    direction?: PollLayoutDirection;
    /** Sets whether to display the main poll image. Defaults to `false`. */
    enableImage?: boolean | null;
}
export interface OptionLayout {
    /** Sets whether to display option images. Defaults to `false`. */
    enableImage?: boolean | null;
}
export declare enum BackgroundType {
    /** Color background type */
    COLOR = "COLOR",
    /** Image background type */
    IMAGE = "IMAGE",
    /** Gradiant background type */
    GRADIENT = "GRADIENT"
}
export interface Gradient {
    /** The gradient angle in degrees. */
    angle?: number | null;
    /** The start color as a hexademical value. */
    startColor?: string | null;
    /** The end color as a hexademical value. */
    lastColor?: string | null;
}
export interface Background extends BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
    /** Background type. For each option, include the relevant details. */
    type?: BackgroundType;
}
/** @oneof */
export interface BackgroundBackgroundOneOf {
    /** The background color as a hexademical value. */
    color?: string | null;
    /** An image to use for the background. */
    image?: V1Media;
    /** Details for a gradient background. */
    gradient?: Gradient;
}
export interface PollDesign {
    /** Background styling. */
    background?: Background;
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
export interface OptionDesign {
    /** Border radius in pixels. */
    borderRadius?: number | null;
}
export interface Poll {
    /** Poll ID. */
    id?: string | null;
    /** Poll title. */
    title?: string | null;
    /** Poll creator ID. */
    creatorId?: string | null;
    /** Main poll image. */
    image?: V1Media;
    /** Voting options. */
    options?: Option[];
    /** The poll's permissions and display settings. */
    settings?: PollSettings;
}
export interface PollDataLayout {
    /** Poll layout settings. */
    poll?: PollLayout;
    /** Voting otpions layout settings. */
    options?: OptionLayout;
}
export interface Design {
    /** Styling for the poll. */
    poll?: PollDesign;
    /** Styling for voting options. */
    options?: OptionDesign;
}
export interface TextData {
    /** The text to apply decorations to. */
    text?: string;
    /** The decorations to apply. */
    decorations?: Decoration[];
}
/** Adds appearence changes to text */
export interface Decoration extends DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
    /** The type of decoration to apply. */
    type?: DecorationType;
}
/** @oneof */
export interface DecorationDataOneOf {
    /** Data for an anchor link decoration. */
    anchorData?: AnchorData;
    /** Data for a color decoration. */
    colorData?: ColorData;
    /** Data for an external link decoration. */
    linkData?: LinkData;
    /** Data for a mention decoration. */
    mentionData?: MentionData;
    /** Data for a font size decoration. */
    fontSizeData?: FontSizeData;
    /** Font weight for a bold decoration. */
    fontWeightValue?: number | null;
    /** Data for an italic decoration. Defaults to `true`. */
    italicData?: boolean | null;
    /** Data for an underline decoration. Defaults to `true`. */
    underlineData?: boolean | null;
    /** Data for a spoiler decoration. */
    spoilerData?: SpoilerData;
}
export declare enum DecorationType {
    BOLD = "BOLD",
    ITALIC = "ITALIC",
    UNDERLINE = "UNDERLINE",
    SPOILER = "SPOILER",
    ANCHOR = "ANCHOR",
    MENTION = "MENTION",
    LINK = "LINK",
    COLOR = "COLOR",
    FONT_SIZE = "FONT_SIZE",
    EXTERNAL = "EXTERNAL"
}
export interface AnchorData {
    /** The target node's ID. */
    anchor?: string;
}
export interface ColorData {
    /** The text's background color as a hexadecimal value. */
    background?: string | null;
    /** The text's foreground color as a hexadecimal value. */
    foreground?: string | null;
}
export interface LinkData {
    /** Link details. */
    link?: Link;
}
export interface MentionData {
    /** The mentioned user's name. */
    name?: string;
    /** The version of the user's name that appears after the `@` character in the mention. */
    slug?: string;
    /** Mentioned user's ID. */
    id?: string | null;
}
export interface FontSizeData {
    /** The units used for the font size. */
    unit?: FontType;
    /** Font size value. */
    value?: number | null;
}
export declare enum FontType {
    PX = "PX",
    EM = "EM"
}
export interface SpoilerData {
    /** Spoiler ID. */
    id?: string | null;
}
export interface AppEmbedData extends AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
    /** The type of Wix App content being embedded. */
    type?: AppType;
    /** The ID of the embedded content. */
    itemId?: string | null;
    /** The name of the embedded content. */
    name?: string | null;
    /**
     * Deprecated: Use `image` instead.
     * @deprecated
     */
    imageSrc?: string | null;
    /** The URL for the embedded content. */
    url?: string | null;
    /** An image for the embedded content. */
    image?: V1Media;
}
/** @oneof */
export interface AppEmbedDataAppDataOneOf {
    /** Data for embedded Wix Bookings content. */
    bookingData?: BookingData;
    /** Data for embedded Wix Events content. */
    eventData?: EventData;
}
export declare enum AppType {
    PRODUCT = "PRODUCT",
    EVENT = "EVENT",
    BOOKING = "BOOKING"
}
export interface BookingData {
    /** Booking duration in minutes. */
    durations?: string | null;
}
export interface EventData {
    /** Event schedule. */
    scheduling?: string | null;
    /** Event location. */
    location?: string | null;
}
export interface VideoData {
    /** Styling for the video's container. */
    containerData?: PluginContainerData;
    /** Video details. */
    video?: V1Media;
    /** Video thumbnail details. */
    thumbnail?: V1Media;
    /** Sets whether the video's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Video title. */
    title?: string | null;
    /** Video options. */
    options?: PlaybackOptions;
}
export interface PlaybackOptions {
    /** Sets whether the media will automatically start playing. */
    autoPlay?: boolean | null;
    /** Sets whether media's will be looped. */
    playInLoop?: boolean | null;
    /** Sets whether media's controls will be shown. */
    showControls?: boolean | null;
}
export interface EmbedData {
    /** Styling for the oEmbed node's container. */
    containerData?: PluginContainerData;
    /** An [oEmbed](https://www.oembed.com) object. */
    oembed?: Oembed;
    /** Origin asset source. */
    src?: string | null;
}
export interface Oembed {
    /** The resource type. */
    type?: string | null;
    /** The width of the resource specified in the `url` property in pixels. */
    width?: number | null;
    /** The height of the resource specified in the `url` property in pixels. */
    height?: number | null;
    /** Resource title. */
    title?: string | null;
    /** The source URL for the resource. */
    url?: string | null;
    /** HTML for embedding a video player. The HTML should have no padding or margins. */
    html?: string | null;
    /** The name of the author or owner of the resource. */
    authorName?: string | null;
    /** The URL for the author or owner of the resource. */
    authorUrl?: string | null;
    /** The name of the resource provider. */
    providerName?: string | null;
    /** The URL for the resource provider. */
    providerUrl?: string | null;
    /** The URL for a thumbnail image for the resource. If this property is defined, `thumbnailWidth` and `thumbnailHeight` must also be defined. */
    thumbnailUrl?: string | null;
    /** The width of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailHeight` must also be defined. */
    thumbnailWidth?: string | null;
    /** The height of the resource's thumbnail image. If this property is defined, `thumbnailUrl` and `thumbnailWidth`must also be defined. */
    thumbnailHeight?: string | null;
    /** The URL for an embedded viedo. */
    videoUrl?: string | null;
    /** The oEmbed version number.  This value must be `1.0`. */
    version?: string | null;
}
export interface CollapsibleListData {
    /** Styling for the collapsible list's container. */
    containerData?: PluginContainerData;
    /** If `true`, only one item can be expanded at a time. Defaults to `false`. */
    expandOnlyOne?: boolean | null;
    /** Sets which items are expanded when the page loads. */
    initialExpandedItems?: InitialExpandedItems;
    /** The direction of the text in the list. Either left-to-right or right-to-left. */
    direction?: Direction;
    /** If `true`, The collapsible item will appear in search results as an FAQ. */
    isQapageData?: boolean | null;
}
export declare enum InitialExpandedItems {
    /** First item will be expended initally */
    FIRST = "FIRST",
    /** All items will expended initally */
    ALL = "ALL",
    /** All items collapsed initally */
    NONE = "NONE"
}
export declare enum Direction {
    /** Left-to-right */
    LTR = "LTR",
    /** Right-to-left */
    RTL = "RTL"
}
export interface TableData {
    /** Styling for the table's container. */
    containerData?: PluginContainerData;
    /** The table's dimensions. */
    dimensions?: Dimensions;
    /**
     * Deprecated: Use `rowHeader` and `columnHeader` instead.
     * @deprecated
     */
    header?: boolean | null;
    /** Sets whether the table's first row is a header. Defaults to `false`. */
    rowHeader?: boolean | null;
    /** Sets whether the table's first column is a header. Defaults to `false`. */
    columnHeader?: boolean | null;
}
export interface Dimensions {
    /** An array representing relative width of each column in relation to the other columns. */
    colsWidthRatio?: number[];
    /** An array representing the height of each row in pixels. */
    rowsHeight?: number[];
    /** An array representing the minimum width of each column in pixels. */
    colsMinWidth?: number[];
}
export interface TableCellData {
    /** Styling for the cell's background color and text alignment. */
    cellStyle?: CellStyle;
    /** The cell's border colors. */
    borderColors?: BorderColors;
}
export declare enum VerticalAlignment {
    /** Top alignment */
    TOP = "TOP",
    /** Middle alignment */
    MIDDLE = "MIDDLE",
    /** Bottom alignment */
    BOTTOM = "BOTTOM"
}
export interface CellStyle {
    /** Vertical alignment for the cell's text. */
    verticalAlignment?: VerticalAlignment;
    /** Cell background color as a hexadecimal value. */
    backgroundColor?: string | null;
}
export interface BorderColors {
    /** Left border color as a hexadecimal value. */
    left?: string | null;
    /** Right border color as a hexadecimal value. */
    right?: string | null;
    /** Top border color as a hexadecimal value. */
    top?: string | null;
    /** Bottom border color as a hexadecimal value. */
    bottom?: string | null;
}
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
export declare enum NullValue {
    /** Null value. */
    NULL_VALUE = "NULL_VALUE"
}
/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
export interface ListValue {
    /** Repeated field of dynamically typed values. */
    values?: any[];
}
export interface AudioData {
    /** Styling for the audio node's container. */
    containerData?: PluginContainerData;
    /** Audio file details. */
    audio?: V1Media;
    /** Sets whether the audio node's download button is disabled. Defaults to `false`. */
    disableDownload?: boolean | null;
    /** Cover image. */
    coverImage?: V1Media;
    /** Track name. */
    name?: string | null;
    /** Author name. */
    authorName?: string | null;
    /** An HTML version of the audio node. */
    html?: string | null;
}
export interface OrderedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
    /** List start number. */
    start?: number | null;
}
export interface BulletedListData {
    /** Indentation level from 0-4. */
    indentation?: number;
    /** Offset level from 0-4. */
    offset?: number | null;
}
export interface BlockquoteData {
    /** Indentation level from 1-4. */
    indentation?: number;
}
export interface CaptionData {
    textStyle?: TextStyle;
}
export interface LayoutCellData {
    /** Size of the cell in 12 columns grid. */
    colSpan?: number | null;
}
export interface Metadata {
    /** Schema version. */
    version?: number;
    /**
     * When the object was created.
     * @readonly
     * @deprecated
     */
    createdTimestamp?: Date | null;
    /**
     * When the object was most recently updated.
     * @deprecated
     */
    updatedTimestamp?: Date | null;
    /** Object ID. */
    id?: string | null;
}
export interface DocumentStyle {
    /** Styling for H1 nodes. */
    headerOne?: TextNodeStyle;
    /** Styling for H2 nodes. */
    headerTwo?: TextNodeStyle;
    /** Styling for H3 nodes. */
    headerThree?: TextNodeStyle;
    /** Styling for H4 nodes. */
    headerFour?: TextNodeStyle;
    /** Styling for H5 nodes. */
    headerFive?: TextNodeStyle;
    /** Styling for H6 nodes. */
    headerSix?: TextNodeStyle;
    /** Styling for paragraph nodes. */
    paragraph?: TextNodeStyle;
    /** Styling for block quote nodes. */
    blockquote?: TextNodeStyle;
    /** Styling for code block nodes. */
    codeBlock?: TextNodeStyle;
}
export interface TextNodeStyle {
    /** The decorations to apply to the node. */
    decorations?: Decoration[];
    /** Padding and background color for the node. */
    nodeStyle?: NodeStyle;
    /** Line height for text in the node. */
    lineHeight?: string | null;
}
export interface Media {
    /**
     * Main media (image, video, etc.) associated with this product.
     * @readonly
     */
    main?: ProductMedia;
    /**
     * All media items.
     * > **Note:** Returned only when you pass `"MEDIA_ITEMS_INFO"` to the `fields` array in Products API requests.
     */
    itemsInfo?: MediaItemsInfo;
}
export interface ProductMedia extends ProductMediaSetByOneOf, ProductMediaMediaOneOf {
    /** ID of existing media from Wix Media Manager. */
    id?: string;
    /** Media URL. */
    url?: string;
    /**
     * Product image.
     * @readonly
     */
    image?: Image;
    /**
     * Product video.
     * @readonly
     */
    video?: VideoV2;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Media display name.
     * Allows to override the default media name. Can be passed only when `setBy: url`.
     */
    displayName?: string | null;
    /**
     * Media type.
     * @readonly
     */
    mediaType?: MediaType;
    /**
     * Media thumbnail.
     * > **Note:** Returned only when you pass `"THUMBNAIL"` to the `fields` array in Products API requests.
     */
    thumbnail?: Thumbnail;
    /**
     * ID used to upload media to Wix Media Manager.
     * @readonly
     */
    uploadId?: string;
}
/** @oneof */
export interface ProductMediaSetByOneOf {
    /** ID of existing media from Wix Media Manager. */
    id?: string;
    /** Media URL. */
    url?: string;
}
/** @oneof */
export interface ProductMediaMediaOneOf {
    /**
     * Product image.
     * @readonly
     */
    image?: Image;
    /**
     * Product video.
     * @readonly
     */
    video?: VideoV2;
}
export interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
export interface VideoV2 {
    /** WixMedia ID. */
    id?: string;
    /**
     * Available resolutions for the video, starting with the optimal resolution.
     * @readonly
     */
    resolutions?: VideoResolution[];
    /**
     * Video filename.
     * @readonly
     */
    filename?: string | null;
}
export interface VideoResolution {
    /** Video URL. */
    url?: string;
    /** Video height. */
    height?: number;
    /** Video width. */
    width?: number;
    /** Video format for example, mp4, hls. */
    format?: string;
}
export declare enum MediaType {
    UNKNOWN_MEDIA_TYPE = "UNKNOWN_MEDIA_TYPE",
    /** Image media type. */
    IMAGE = "IMAGE",
    /** Video media type. */
    VIDEO = "VIDEO"
}
export interface Thumbnail {
    /** Thumbnail url. */
    url?: string;
    /** Thumbnail height. */
    height?: number;
    /** Thumbnail width. */
    width?: number;
    /** Thumbnail alt text. */
    altText?: string | null;
}
export interface MediaItemsInfo {
    /** All media items (images, videos etc) associated with this product. */
    items?: ProductMedia[];
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
export interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
export interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /** The source that added the keyword terms to the SEO settings. */
    origin?: string | null;
}
export interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
export interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /** User-selected keyword terms for a specific page. */
    keywords?: Keyword[];
}
export interface ConnectedOption extends ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
    /** ID of a customization with `customizationType: PRODUCT_OPTION`. */
    id?: string | null;
    /** Option name. */
    name?: string | null;
    /** Option render type. */
    optionRenderType?: ProductOptionRenderType;
}
/** @oneof */
export interface ConnectedOptionOptionSettingsOneOf {
    /** Choices settings. */
    choicesSettings?: ChoicesSettings;
}
export declare enum ProductOptionRenderType {
    /** Not implemented. */
    UNKNOWN_OPTION_RENDER_TYPE = "UNKNOWN_OPTION_RENDER_TYPE",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
export interface ChoicesSettings {
    /** List of available choices for the option. */
    choices?: ConnectedOptionChoice[];
}
export interface ConnectedOptionChoice extends ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** The id of the choice. */
    choiceId?: string | null;
    /**
     * Product media overrides. When not empty only these images will be shown when such choices selected by customer. Otherwise all images of product.
     * When several choices from different options selected only media filter present in `media_overrides` of ALL choices will be shown.
     * For example if Color:red has images 1,2,3 and Material:Silk has images 2,3,5 then only images 2,3 will be shown when both of them selected.
     */
    linkedMedia?: ProductMedia[];
    /** The type of this choice. */
    choiceType?: ChoiceType;
    /** Choice name. */
    name?: string | null;
    /**
     * A flag that indicates if at least one variant with this choice is in stock in the default store's location.
     * For example, a product with 'Color' and 'Size' options with variants: [Blue, Small] which is out of stock and [Red Large] which is in stock. For choice 'Blue' ths flag will be 'false' and for 'Red' the flag will be true
     * @readonly
     */
    inStock?: boolean;
    /**
     * Whether at least one variant with this choice is visible.
     *
     * Default: `false`
     * @readonly
     */
    visible?: boolean;
}
/** @oneof */
export interface ConnectedOptionChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
export declare enum ChoiceType {
    UNKNOWN_CHOICE_TYPE = "UNKNOWN_CHOICE_TYPE",
    /** Text choice. */
    CHOICE_TEXT = "CHOICE_TEXT",
    /** Single color choice. */
    ONE_COLOR = "ONE_COLOR",
    /** Multiple colors choice. */
    MULTIPLE_COLORS = "MULTIPLE_COLORS",
    /** Image choice. */
    IMAGE = "IMAGE"
}
export interface MultipleColors {
    /** List of color codes. */
    colorCodes?: string[];
}
export interface ConnectedModifier extends ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
    /** ID of a customization with `customizationType: MODIFIER`. */
    id?: string | null;
    /** Modifier title. */
    name?: string | null;
    /** Modifier render type. */
    modifierRenderType?: ModifierRenderType;
    /** Whether customer input is required for this modifier. */
    mandatory?: boolean;
}
/** @oneof */
export interface ConnectedModifierModifierSettingsOneOf {
    /** Free text modifier settings. */
    freeTextSettings?: FreeTextSettings;
    /** Choice settings. */
    choicesSettings?: ModifierChoicesSettings;
}
export declare enum ModifierRenderType {
    /** Not implemented. */
    UNKNOWN_MODIFIER_RENDER_TYPE = "UNKNOWN_MODIFIER_RENDER_TYPE",
    /** Free text. */
    FREE_TEXT = "FREE_TEXT",
    /** Text choices. */
    TEXT_CHOICES = "TEXT_CHOICES",
    /** Swatch choices. */
    SWATCH_CHOICES = "SWATCH_CHOICES"
}
export interface FreeTextSettings {
    /** Minimum number of characters. */
    minCharCount?: number;
    /** Maximum number of characters. */
    maxCharCount?: number;
    /** Default amount to be added to the product's price. */
    defaultAddedPrice?: string | null;
    /** Title of the text to be input by the customer. */
    title?: string;
}
export interface ModifierChoicesSettings {
    /** List of modifier choices. */
    choices?: ConnectedModifierChoice[];
}
export interface ConnectedModifierChoice extends ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
    /** Choice ID. */
    choiceId?: string | null;
    /** Product media. */
    linkedMedia?: ProductMedia[];
    /** Choice type. */
    choiceType?: ChoiceType;
    /**
     * Modifier key. Used for eCommerce integration.
     * @readonly
     */
    key?: string;
    /** Choice name. */
    name?: string | null;
    /** Added price. */
    addedPrice?: string | null;
}
/** @oneof */
export interface ConnectedModifierChoiceValueOneOf {
    /** Color code in HEX format, [as described by MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/hex-color). */
    colorCode?: string;
}
export interface Brand {
    /** Brand ID. */
    id?: string | null;
    /** Brand name. */
    name?: string | null;
}
export interface InfoSection {
    /** Info section ID. */
    id?: string | null;
    /**
     * Info section unique name.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     */
    uniqueName?: string | null;
    /**
     * Info section title.
     * > **Note:** Returned only when you pass `"INFO_SECTION"` to the `fields` array in Products API requests.
     * @readonly
     */
    title?: string | null;
    /**
     * Info section description using rich content.
     * > **Note:** Returned only when you pass `"INFO_SECTION_DESCRIPTION"` to the `fields` array in Products API requests.
     *
     * <widget src="https://apps.wix.com/_serverless/ricos-playground-services/goto/api-component" plugins="indent.emoji.divider.codeBlock.file.gallery.giphy.image.table.link.textHighlight.textColor" exampleid="7dc9240e-d548-417a-abcf-0291b68b4303">
     * <a href="https://dev.wix.com/docs/ricos/api-reference/ricos-document">See Ricos document reference</a>
     * </widget>
     * @readonly
     */
    description?: RichContent;
    /**
     * Info section description in HTML.
     *
     * When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"INFO_SECTION_PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
}
export interface Ribbon {
    /** Ribbon ID. */
    id?: string | null;
    /** Ribbon name. */
    name?: string | null;
}
export interface ProductCategoriesInfo {
    /**
     * A list of categories related to product.
     * @readonly
     */
    categories?: ProductCategory[];
}
export interface ProductCategory {
    /** Category ID. */
    id?: string;
    /** Index location of the product within the category, which can be utilized for sorting products in a specific category. For detailed instructions on how to set this up, refer to the [Add and arrange products in category](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/sample-use-cases-and-flows#add-and-arrange-products-in-category) sample flow. */
    index?: number | null;
}
export interface ProductCategoryIdsInfo {
    /**
     * A list of category ids related to product.
     * @readonly
     */
    categoryIds?: string[];
}
export interface PriceRange {
    /** Minimum value. */
    minValue?: FixedMonetaryAmount;
    /** Maximum value. */
    maxValue?: FixedMonetaryAmount;
}
export interface FixedMonetaryAmount {
    /** Monetary amount. For example, `"3.99"`, or `"-4.99"` for a negative amount. */
    amount?: string;
    /**
     * Formatted monetary amount. For example, `"$3.99"`.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    formattedAmount?: string | null;
}
export interface Inventory {
    /**
     * Current availability status.
     * @readonly
     */
    availabilityStatus?: InventoryAvailabilityStatus;
    /**
     * Current preorder status.
     * @readonly
     */
    preorderStatus?: PreorderStatus;
    /**
     * Preorder availability status.
     * @readonly
     */
    preorderAvailability?: ProductPreorderAvailability;
}
export declare enum InventoryAvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** All variants are in stock and available for purchase. */
    IN_STOCK = "IN_STOCK",
    /** All variants are out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Some variants are out of stock and some are in stock and available for purchase. */
    PARTIALLY_OUT_OF_STOCK = "PARTIALLY_OUT_OF_STOCK"
}
export declare enum PreorderStatus {
    UNKNOWN_PREORDER_STATUS = "UNKNOWN_PREORDER_STATUS",
    /** All variants are enabled for preorder. */
    ENABLED = "ENABLED",
    /** All variants are disabled for preorder. */
    DISABLED = "DISABLED",
    /** Some variants are disabled and some are enabled for preorder. */
    PARTIALLY_ENABLED = "PARTIALLY_ENABLED"
}
export declare enum ProductPreorderAvailability {
    UNKNOWN_PREORDER_AVAILABILITY_STATUS = "UNKNOWN_PREORDER_AVAILABILITY_STATUS",
    /** All the product variants are available for preorder. */
    ALL_VARIANTS = "ALL_VARIANTS",
    /** None of the product variants are available for preorder. */
    NO_VARIANTS = "NO_VARIANTS",
    /** Some of the product variants are available for preorder. */
    SOME_VARIANTS = "SOME_VARIANTS"
}
export declare enum ProductType {
    /** Not implemented. */
    UNKNOWN_PRODUCT_TYPE = "UNKNOWN_PRODUCT_TYPE",
    /** Physical product. */
    PHYSICAL = "PHYSICAL",
    /** Digital product. */
    DIGITAL = "DIGITAL"
}
export interface PhysicalProperties {
    /** Price per unit settings. */
    pricePerUnit?: PricePerUnitSettings;
    /** Fulfiller ID. */
    fulfillerId?: string | null;
    /**
     * Product shipping weight range - minimum and maximum weights of all the variants.
     * @readonly
     */
    shippingWeightRange?: WeightRange;
    /**
     * Product price per unit range. The minimum and maximum price per unit of all the variants.
     * @readonly
     */
    pricePerUnitRange?: PricePerUnitRange;
    /**
     * Weight measurement unit.
     * > **Note:** Returned only when you pass `"WEIGHT_MEASUREMENT_UNIT_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfo;
    /** Delivery profile ID. */
    deliveryProfileId?: string | null;
}
export interface PricePerUnitSettings {
    /**
     * Quantity.
     * For example, to define price per per 100 grams, set this field to `100`.
     */
    quantity?: number;
    /**
     * Measurement unit.
     * For example, to define price per 100 grams, set this field to "G".
     */
    measurementUnit?: MeasurementUnit;
}
export declare enum MeasurementUnit {
    UNSPECIFIED = "UNSPECIFIED",
    ML = "ML",
    CL = "CL",
    L = "L",
    CBM = "CBM",
    MG = "MG",
    G = "G",
    KG = "KG",
    MM = "MM",
    CM = "CM",
    M = "M",
    SQM = "SQM",
    OZ = "OZ",
    LB = "LB",
    FLOZ = "FLOZ",
    PT = "PT",
    QT = "QT",
    GAL = "GAL",
    IN = "IN",
    FT = "FT",
    YD = "YD",
    SQFT = "SQFT"
}
export interface WeightRange {
    /** Minimum weight across all variants associated with this product. */
    minValue?: number;
    /** Maximum weight across all variants associated with this product. */
    maxValue?: number;
}
export interface PricePerUnitRange {
    /** Minimum price per unit across all variants. */
    minValue?: PricePerUnitRangePricePerUnit;
    /** Maximum price per unit across all variants. */
    maxValue?: PricePerUnitRangePricePerUnit;
}
export interface PricePerUnitRangePricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account pricePerUnit settings of product and variants and price of variants.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit info in the format of variant specific data / product setting, for example €4.00 / 1 Kg.
     * > **Note:** This field is returned by the API only when you pass `fields: "CURRENCY"` in a request.
     * @readonly
     */
    description?: string | null;
}
export interface WeightMeasurementUnitInfo {
    /**
     * Weight measurement unit.
     * @readonly
     */
    weightMeasurementUnit?: WeightUnit;
}
export declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
export interface BreadcrumbsInfo {
    /**
     * Breadcrumbs.
     * @readonly
     */
    breadcrumbs?: BreadCrumb[];
}
export interface BreadCrumb {
    /** Category ID. */
    categoryId?: string;
    /** Category name. */
    categoryName?: string;
    /** Category slug. */
    categorySlug?: string;
}
export interface VariantsInfo {
    /** List of related variants. */
    variants?: Variant[];
}
export interface Variant extends VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /**
     * List of choices.
     * In case this list is empty, this is the default variant of an unmanaged product.
     */
    choices?: OptionChoice[];
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /**
     * Variant media.
     * @readonly
     */
    media?: ProductMedia;
    /**
     * Subscription prices calculated by applying subscription discount to the variant `price.actual_price`.
     * > **Note:** Returned only when you pass `"SUBSCRIPTION_PRICES_INFO"` to the `fields` array in Products API requests.
     * @readonly
     */
    subscriptionPricesInfo?: SubscriptionPricesInfo;
    /**
     * Variant inventory status.
     * @readonly
     */
    inventoryStatus?: InventoryStatus;
}
/** @oneof */
export interface VariantTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
export interface OptionChoice {
    /** Option and choice IDs. */
    optionChoiceIds?: OptionChoiceIds;
    /**
     * Option and choice names.
     * > **Note:** Returned only when you pass `"VARIANT_OPTION_CHOICE_NAMES"` to the `fields` array in Products API requests.
     */
    optionChoiceNames?: OptionChoiceNames;
}
export interface OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
export interface OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
export interface PriceInfo {
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
export interface RevenueDetails {
    /** Item cost. */
    cost?: FixedMonetaryAmount;
    /**
     * Profit. Calculated by reducing `cost` from `discountedPrice`.
     * @readonly
     */
    profit?: FixedMonetaryAmount;
    /**
     * Profit Margin. Calculated by dividing `profit` by `discountedPrice`.
     * The result is rounded to 4 decimal places.
     * @readonly
     */
    profitMargin?: number;
}
export interface VariantPhysicalProperties {
    /** Variant shipping weight. */
    weight?: number | null;
    /**
     * Price per unit info, in order to show price per unit on the product page.
     * For example if one sells cheese and defines 100g here then we know that buying this variant buyer receives 100g of cheese.
     * But on product page price will be displayed for units defined on product level. See `pricePerUnit.value` to understand how it's calculated.
     */
    pricePerUnit?: PricePerUnit;
}
export interface PricePerUnit {
    /**
     * Price per unit data for this variant.
     * `measurementUnit` value must correspond to the measurement unit set on the product.
     */
    settings?: PricePerUnitSettings;
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, of this variant, and discounted price of variant.
     * For example if discounted price is 2$, product's price per unit setting is 1 Kg, variant price per unit setting is 0.5 Kg then this value is 4$ (means variant weight is 0.5 Kg and it costs 2$ but we want to show price per 1 Kg so we show 4$).
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
export interface VariantDigitalProperties {
    /** Digital file which will be downloaded by customer after successful purchase. */
    digitalFile?: SecuredMedia;
}
export interface SecuredMedia {
    /** Media ID in media manager. */
    id?: string;
    /**
     * Original file name.
     * @readonly
     */
    fileName?: string;
    /**
     * Original file size.
     * @readonly
     */
    fileSize?: string | null;
    /**
     * File type.
     * @readonly
     */
    fileType?: FileType;
}
export declare enum FileType {
    /** Unspecified file type. */
    UNSPECIFIED = "UNSPECIFIED",
    /** Secure picture file. */
    SECURE_PICTURE = "SECURE_PICTURE",
    /** Secure video file. */
    SECURE_VIDEO = "SECURE_VIDEO",
    /** Secure document file. */
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    /** Secure music file. */
    SECURE_MUSIC = "SECURE_MUSIC",
    /** Secure archive file. */
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
export interface SubscriptionPricesInfo {
    /** Subscription prices. */
    subscriptionPrices?: SubscriptionPrice[];
}
export interface SubscriptionPrice {
    /**
     * Subscription ID.
     * @readonly
     */
    subscriptionId?: string;
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actual_price`
     * @readonly
     */
    price?: FixedMonetaryAmount;
    /**
     * Price per unit info.
     * @readonly
     */
    pricePerUnit?: SubscriptionPricePerUnit;
}
export interface SubscriptionPricePerUnit {
    /**
     * Calculated value of price per unit. Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    value?: string;
    /**
     * Price per unit description.
     * > **Note:** Returned only when you pass `"CURRENCY"` to the `fields` array in Products API requests.
     * @readonly
     */
    description?: string | null;
}
export interface InventoryStatus {
    /** Whether the variant is in stock. */
    inStock?: boolean;
    /** Whether preorder is enabled for this variant. */
    preorderEnabled?: boolean;
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface SubscriptionDetails {
    /** Subscriptions. */
    subscriptions?: Subscription[];
    /**
     * Whether to allow one-time purchases in addition to subscription-based purchases.
     *
     * Default: `false`
     */
    allowOneTimePurchases?: boolean | null;
}
export interface Subscription extends SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
    /** Subscription ID. */
    id?: string | null;
    /** Subscription title. */
    title?: string;
    /** Subscription description. */
    description?: string | null;
    /**
     * Whether the subscription is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Frequency of recurring payment.
     * For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     */
    frequency?: SubscriptionFrequency;
    /** Interval of recurring payment. Default: `1`. For example, if `frequency: MONTH`, `billingCycles: 3` and `interval: 2`; payment will be made every 2 months for a total of 6 months. */
    interval?: number | null;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `amount: 20`, `type: AMOUNT`.
     */
    discount?: SubscriptionDiscount;
}
/** @oneof */
export interface SubscriptionCyclesOneOf {
    /** Whether subscription is renewed automatically at the end of each period. Cannot be `false`, instead set `billingCycles`. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. */
    billingCycles?: number;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface SubscriptionDiscount extends SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
    /** Discount type. */
    type?: DiscountType;
}
/** @oneof */
export interface SubscriptionDiscountDiscountOneOf {
    /** Amount to discount from the variant discounted_price. */
    amountOff?: string;
    /** Percentage to discount from variant discounted_price. */
    percentOff?: number;
}
export declare enum DiscountType {
    UNKNOWN_DISCOUNT = "UNKNOWN_DISCOUNT",
    /** Discount by a specific amount. */
    AMOUNT = "AMOUNT",
    /** Discount by a percentage. */
    PERCENT = "PERCENT"
}
export interface VariantSummary {
    /**
     * The total number of variants for the product.
     * @readonly
     */
    variantCount?: number;
}
export interface MinVariantPriceInfo {
    /**
     * Subscription price calculated by applying subscription discount to the variant `price.actualPrice`
     * @readonly
     */
    minSubscriptionPrice?: FixedMonetaryAmount;
    /**
     * Subscription price per unit calculated value of price per unit.
     * Takes into account `pricePerUnit` settings of parent product, `pricePerUnit` settings of this variant, and the variant subscription price.
     * @readonly
     */
    minSubscriptionPricePerUnit?: string | null;
    /**
     * Variant price per unit.
     * @readonly
     */
    pricePerUnitData?: PricePerUnit;
    /**
     * Variant SKU (stock keeping unit).
     * @readonly
     */
    sku?: string | null;
    /**
     * Variant shipping weight.
     * @readonly
     */
    weight?: number | null;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @readonly
     */
    revenueDetails?: RevenueDetails;
    /** Variant price. Must be greater or equal to 0. */
    actualPrice?: FixedMonetaryAmount;
    /** The compare-at-price represents the original price of a product before any discount. It is optional and should only be set if a discount applies. When set, it must be higher than the current price to reflect accurate savings. */
    compareAtPrice?: FixedMonetaryAmount;
}
export interface UpdateDocumentsEvent extends UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
    /** application which owns documents */
    appDefId?: string | null;
    /** type of the documents */
    documentType?: string | null;
    /** language of the documents */
    language?: string | null;
    /** site documents belong to */
    msId?: string | null;
}
/** @oneof */
export interface UpdateDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: DocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update documents matching filter */
    updateByFilter?: UpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: UpdateExistingOperation;
}
export interface DocumentUpdateOperation {
    /** documents to index or update */
    documents?: IndexDocument[];
}
export interface IndexDocument {
    /** data bag with non-searchable fields (url, image) */
    payload?: DocumentPayload;
    /** what type of users should documents be visible to */
    exposure?: Enum;
    /** document with mandatory fields (id, title, description) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
    /** what member groups is the document exposed to. Used only with GROUP_PROTECTED exposure */
    permittedMemberGroups?: string[];
    /** if true SEO is disabled for this document */
    seoHidden?: boolean | null;
    /** if true the page is a lightbox popup */
    isPopup?: boolean | null;
}
export interface DocumentPayload {
    /** url of the page representing the document */
    url?: string | null;
    /** image which represents the document */
    documentImage?: DocumentImage;
}
export interface DocumentImage {
    /** the name of the image */
    name?: string;
    /** the width of the image */
    width?: number;
    /** the height of the image */
    height?: number;
}
export declare enum Enum {
    /** Default value. Means that permission not set */
    UNKNOWN = "UNKNOWN",
    /** Protected exposure. Exposed to members and owners */
    PROTECTED = "PROTECTED",
    /** Private exposure. Exposed to owners */
    PRIVATE = "PRIVATE",
    /** Public exposure. Visible to everyone */
    PUBLIC = "PUBLIC",
    /** Used for partial updates, to state that exposure is not changing */
    UNCHANGED = "UNCHANGED",
    /** Protected to members of permitted groups and owners */
    GROUP_PROTECTED = "GROUP_PROTECTED"
}
export interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
}
export interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
}
export interface UpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: IndexDocument;
}
export interface UpdateExistingOperation {
    /** documents to update */
    documents?: IndexDocument[];
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface Empty {
}
export interface SearchIndexingNotification {
    /** new state of indexing for the site specified in ms_id */
    indexState?: State;
    /** type of the document the notification is targeted for. Applies to all types if not provided */
    documentType?: string | null;
    /** languaInternalDocumentUpdateByFilterOperationge the notification is targeted for. Applies to all languages if not provided */
    language?: string | null;
    /** site for which notification is targeted */
    msId?: string | null;
}
export declare enum State {
    /** default state */
    Unknown = "Unknown",
    /** metasite does not require site search indexing */
    Off = "Off",
    /** metasite requires site search indexing */
    On = "On"
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface CreateProductRequest {
    /**
     * Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export declare enum SingleEntityOpsRequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL"
}
export interface CreateProductResponse {
    /** Created product. */
    product?: V3Product;
}
export interface VariantsNotAlignedWithProduct {
    /** Variants not aligned with product */
    variants?: VariantNotAlignedWithProduct[];
}
export interface VariantNotAlignedWithProduct {
    /** variant id */
    variantId?: string;
    /** what's wrong with this specific variant */
    errorDescription?: string;
}
export interface DuplicateMediaIdAssignedToProduct {
    /** List of media IDs passed more than once. */
    mediaIds?: string[];
}
export interface CreateProductWithInventoryRequest {
    /**
     * Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    product: ProductWithInventory;
    /**
     * Whether to return inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface ProductWithInventory extends ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Product ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     *
     * Ignored when creating a product with inventory.
     * @readonly
     */
    revision?: string | null;
    /** Product name. */
    name?: string | null;
    /**
     * Product slug.
     *
     * If not provided, the slug is autogenerated based on the product name.
     */
    slug?: string | null;
    /**
     * Product description in HTML.
     *
     * + When provided on create/update, this string must be a valid HTML. It will then be converted to rich content.
     * + `plainDescription` is ignored when value is also passed to the `description` field.
     * > **Note:** Returned only when you pass `"PLAIN_DESCRIPTION"` to the `fields` array in Products API requests.
     */
    plainDescription?: string | null;
    /**
     * Whether the product is visible to site visitors on the site.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /**
     * Whether the product is visible in POS (point of sale).
     *
     * Default: `true`
     * > **Note:** Always `false` for `productType: DIGITAL`.
     */
    visibleInPos?: boolean | null;
    /** Product media items. */
    media?: Media;
    /** Product SEO data. */
    seoData?: SeoSchema;
    /** Tax group ID. */
    taxGroupId?: string | null;
    /**
     * Product options. Allows buyer to customize product, e.g. select Color, Size and so on.
     * Always generates variants: every variant must have exactly one choice related to each option.
     * Since options and variants tightly coupled and rely on each other they usually should be provided together in all operations.
     * For existing options and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing options ids will be resolved, not existing options will be created.
     * *None*: you cannot change name of existing option via this endpoint but you can do it by calling CustomizationService
     */
    options?: ConnectedOption[];
    /**
     * Product Modifiers. Allows buyer to customize product, e.g. select Color, Size and so on similarly to `options` but with one main difference - `modifiers` never generate any variants.
     * For existing modifiers and choices provide ids only, all other data (e.g. names, title, types and so on) will be resolved for you by ids.
     * If you don't have ids it's ok to omit them but provide all other data instead. For existing modifiers ids will be resolved, not existing modifiers will be created.
     * *None*: you cannot change name of existing modifier via this endpoint by passing id and changed name, if you pass id name will be ignored. If you want to update existing modifier name do it by calling CustomizationService
     */
    modifiers?: ConnectedModifier[];
    /**
     * Product brand.
     *
     * + Pass `brand.name` to add a new brand while creating a product.
     * + Pass an existing brand's `id` to assign that brand to the product.
     */
    brand?: Brand;
    /**
     * Product info section.
     *
     * + Pass `infoSection.uniqueName`, `infoSection.title`, and `infoSection.description` to add a new info section while creating a product.
     * + Pass an existing info section's `id` or `uniqueName` to assign that info section to the product.
     */
    infoSections?: InfoSection[];
    /**
     * Product ribbon.
     *
     * + Pass `ribbon.name` to add a new ribbon while creating a product.
     * + Pass an existing ribbon's `id` or `name` to assign that ribbon to the product.
     */
    ribbon?: Ribbon;
    /** Main category ID. */
    mainCategoryId?: string | null;
    /**
     * Product type.
     *
     * When passing `productType: PHYSICAL`, you must also pass `physicalProperties`.
     */
    productType?: ProductType;
    /**
     * A unique human-friendly identifier for the product.
     * Unlike the product ID, the handle can be set by the user to ensure consistency across multiple platforms.
     * In case handle wasn't given, the handle will be automatically generated.
     */
    handle?: string | null;
    /** Product variants. */
    variantsInfo?: V3VariantsInfo;
    /** Subscription details. */
    subscriptionDetails?: SubscriptionDetails;
    /**
     * Custom extended fields for the product object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the [app dashboard](https://dev.wix.com/dc3/my-apps/) before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
export interface ProductWithInventoryTypedPropertiesOneOf {
    /**
     * Physical properties.
     *
     * Required when `productType: PHYSICAL`.
     */
    physicalProperties?: PhysicalProperties;
}
export interface V3VariantsInfo {
    /**
     * List of related variants.
     * Partial update of variants is not supported so on update you must pass all data for all of them.
     * If you want to update existing variant you must provide `id`, otherwise new variant with different id will be created which might break some integrations that rely on variant ids.
     */
    variants?: VariantWithInventory[];
}
export interface VariantWithInventory extends VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
    /** Variant ID. */
    id?: string | null;
    /**
     * Whether the variant is visible to site visitors.
     *
     * Default: `true`
     */
    visible?: boolean | null;
    /** Variant SKU (stock keeping unit). */
    sku?: string | null;
    /** Variant barcode. */
    barcode?: string | null;
    /** Variant price. */
    price?: PriceInfo;
    /**
     * Variant revenue details.
     *
     * > **Note:** Returned only when the following conditions are met:
     * > + You pass `"MERCHANT_DATA"` to the `fields` array in Products API requests.
     * > + Your app has the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    revenueDetails?: RevenueDetails;
    /** Inventory item of the variant on the default location. */
    inventoryItem?: InventoryItemComposite;
    /** List of choices. */
    choices?: OptionChoiceReferences[];
}
/** @oneof */
export interface VariantWithInventoryTypedPropertiesOneOf {
    /** Physical properties. Must be passed when `productType: PHYSICAL` */
    physicalProperties?: VariantPhysicalProperties;
    /** Digital properties. Must be passed when `productType: DIGITAL` */
    digitalProperties?: VariantDigitalProperties;
}
export interface InventoryItemComposite extends InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Inventory item revision.
     * @readonly
     */
    revision?: string | null;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
}
/** @oneof */
export interface InventoryItemCompositeTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
export interface PreorderInfo {
    /**
     * Whether preorder is enabled for the product.
     *
     * Default: `false`
     */
    enabled?: boolean | null;
    /** A message the customer will see when the item is out of stock and preorder is enabled. */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * Supported only for inventory items with `trackQuantity = true`.
     *
     * Default: `100000`
     */
    limit?: number | null;
    /**
     * Number of times the product was preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    counter?: number | null;
    /**
     * Quantity of products that can be preordered.
     *
     * Supported only for inventory items with `trackQuantity = true`.
     * @readonly
     */
    quantity?: number | null;
}
export interface OptionChoiceReferences {
    /** Option and choice IDs. */
    optionChoiceIds?: V3OptionChoiceIds;
    /** Option and choice names. */
    optionChoiceNames?: V3OptionChoiceNames;
}
export interface V3OptionChoiceIds {
    /** Option ID. */
    optionId?: string;
    /** Choice ID. */
    choiceId?: string;
}
export interface V3OptionChoiceNames {
    /** Option name. */
    optionName?: string;
    /** Choice name. */
    choiceName?: string;
    /** Render type. */
    renderType?: ProductOptionRenderType;
}
export interface CreateProductWithInventoryResponse {
    /** Created product. */
    product?: V3Product;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
export interface BulkInventoryItemResults {
    /** Inventories modified by bulk action. */
    results?: BulkInventoryItemResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
    /** Error details in case of failed action. */
    error?: ApplicationError;
}
export interface BulkInventoryItemResult {
    /** Bulk action metadata for inventory item. */
    itemMetadata?: ItemMetadata;
    /**
     * Full inventory item entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: InventoryItem;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/** Inventory Item. */
export interface InventoryItem extends InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
    /**
     * Inventory item ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the inventory item is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the inventory item.
     *
     * Ignored when creating an inventory item.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the inventory item was created.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Variant ID. */
    variantId?: string;
    /** Stores location ID. */
    locationId?: string | null;
    /** Product ID. */
    productId?: string;
    /**
     * Whether the quantity is being tracked.
     * @readonly
     */
    trackQuantity?: boolean;
    /**
     * Inventory item availability status.
     *
     * Supported values:
     * + OUT_OF_STOCK: Product is out of stock.
     * + IN_STOCK: Product is in stock. See `quantity` field for exact amount in stock.
     * + PREORDER: Product is only available for preorder. See `preorderInfo` field for more info.
     * @readonly
     */
    availabilityStatus?: AvailabilityStatus;
    /** Item preorder info. */
    preorderInfo?: PreorderInfo;
    /**
     * Product.
     * @readonly
     */
    product?: Product;
    /**
     * Custom field data for the inventory item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
/** @oneof */
export interface InventoryItemTrackingMethodOneOf {
    /**
     * Tracking method - in stock.
     *
     * When set to `true`, the item is available for sale without a quantity limit.
     */
    inStock?: boolean;
    /**
     * Tracking method - quantity left in inventory.
     *
     * Quantity can be negative when decrementing inventory for an order that has already been paid.
     */
    quantity?: number;
}
export declare enum AvailabilityStatus {
    UNKNOWN_AVAILABILITY_STATUS = "UNKNOWN_AVAILABILITY_STATUS",
    /** Product is out of stock. */
    OUT_OF_STOCK = "OUT_OF_STOCK",
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    IN_STOCK = "IN_STOCK",
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    PREORDER = "PREORDER"
}
export interface Product {
    /** Product name. */
    name?: string | null;
    /** List of category IDs that this product is included in directly. */
    directCategoryIds?: string[];
    /** Variant name. */
    variantName?: string | null;
    /** Variant SKU (stock keeping unit). */
    variantSku?: string | null;
    /** Variant visible. */
    variantVisible?: boolean | null;
}
export interface CommonBulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface UpdateProductRequest {
    /** Product to update. */
    product: V3Product;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface UpdateProductResponse {
    /** Updated product. */
    product?: V3Product;
}
export interface UnsupportedFieldMasks {
    /** Field masks provided in request but not supported */
    fieldMasks?: string[];
}
export interface UpdateProductWithInventoryRequest {
    /** Product to update. */
    product: ProductWithInventory;
    /**
     * Whether to return the full inventory entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface UpdateProductWithInventoryResponse {
    /** Updated product. */
    product?: V3Product;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
export interface BulkCreateProductsRequest {
    /** List of products to create. */
    products: V3Product[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export declare enum RequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    URL = "URL",
    CURRENCY = "CURRENCY",
    INFO_SECTION = "INFO_SECTION",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    PLAIN_DESCRIPTION = "PLAIN_DESCRIPTION",
    INFO_SECTION_PLAIN_DESCRIPTION = "INFO_SECTION_PLAIN_DESCRIPTION",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    BREADCRUMBS_INFO = "BREADCRUMBS_INFO",
    WEIGHT_MEASUREMENT_UNIT_INFO = "WEIGHT_MEASUREMENT_UNIT_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    MEDIA_ITEMS_INFO = "MEDIA_ITEMS_INFO",
    DESCRIPTION = "DESCRIPTION",
    DIRECT_CATEGORIES_INFO = "DIRECT_CATEGORIES_INFO",
    ALL_CATEGORIES_INFO = "ALL_CATEGORIES_INFO",
    INFO_SECTION_DESCRIPTION = "INFO_SECTION_DESCRIPTION",
    THUMBNAIL = "THUMBNAIL"
}
export interface BulkCreateProductsResponse {
    /** Products created by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface CatalogV3BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: WixCommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
export interface WixCommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface InvalidDigitalFileIds {
    /** ids of digital files which caused errors. */
    ids?: string[];
}
export interface BulkCreateProductsWithInventoryRequest {
    /** List of products to create with inventory. */
    products: ProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface BulkCreateProductsWithInventoryResponse {
    /** Products created by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories created by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
export interface BulkProductResults {
    /** Products modified by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface BulkUpdateProductsRequest {
    /** List of products to update. */
    products: V3MaskedProduct[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface V3MaskedProduct {
    /** Product to update. */
    product?: V3Product;
}
export interface BulkUpdateProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface BulkUpdateProductsWithInventoryRequest {
    /** List of products to update. */
    products: MaskedProductWithInventory[];
    /**
     * Whether to return the full product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface MaskedProductWithInventory {
    /** Product to update. */
    product?: ProductWithInventory;
}
export interface BulkUpdateProductsWithInventoryResponse {
    /** Products updated by bulk action. */
    productResults?: BulkProductResults;
    /** Inventories updated by bulk action. */
    inventoryResults?: BulkInventoryItemResults;
}
export interface V3BulkUpdateProductsByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Product to update. */
    product: V3Product;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface WixCommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined */
    mode?: CommonSearchDetailsMode;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
export declare enum CommonSearchDetailsMode {
    /** Any of the search terms must be present */
    OR = "OR",
    /** All search terms must be present */
    AND = "AND"
}
export interface V3BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3UpdateExtendedFieldsRequest {
    /** Product ID. */
    productId: string;
    /** App namespace. */
    namespace: string;
    /** Data to update. */
    namespaceData: Record<string, any> | null;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface V3UpdateExtendedFieldsResponse {
    /** Updated product. */
    product?: V3Product;
}
export interface V3DeleteProductRequest {
    /** Product ID. */
    productId: string;
}
export interface V3DeleteProductResponse {
}
export interface V3BulkDeleteProductsRequest {
    /** IDs of products to delete. */
    productIds: string[];
}
export interface V3BulkDeleteProductsResponse {
    /** Products deleted by bulk action. */
    results?: BulkDeleteProductsResponseBulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface BulkDeleteProductsResponseBulkProductResult {
    /** Bulk action metadata for products. */
    itemMetadata?: WixCommonItemMetadata;
}
export interface V3BulkDeleteProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface V3BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3GetProductRequest {
    /** Product ID. */
    productId: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface V3GetProductResponse {
    /** Product. */
    product?: V3Product;
}
export interface V3GetProductBySlugRequest {
    /** Product slug. */
    slug: string;
    /** Fields to include in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface V3GetProductBySlugResponse {
    /** Product. */
    product?: V3Product;
}
export interface V3SearchProductsRequest {
    /** Search options. */
    search?: CommonCursorSearch;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface CommonCursorSearch extends CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: WixCommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: WixCommonAggregation[];
    /** Free text to match in searchable fields */
    search?: WixCommonSearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
export interface CommonCursorSearchPagingMethodOneOf {
    /**
     * Cursor pointing to page of results.
     * When requesting 'cursor_paging.cursor', no `filter`, `sort` or `search` can be provided.
     */
    cursorPaging?: CommonCursorPaging;
}
export interface WixCommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: WixCommonSortOrder;
    /**
     * When `field_name` is a property of repeated field that is marked as `MATCH_ITEMS` and sort should be done by
     * a specific element from a collection, filter can/should be provided to ensure correct sort value is picked.
     *
     * If multiple filters are provided, they are combined with AND operator.
     *
     * Example:
     * Given we have document like {"id": "1", "nestedField": [{"price": 10, "region": "EU"}, {"price": 20, "region": "US"}]}
     * and `nestedField` is marked as `MATCH_ITEMS`, to ensure that sorting is done by correct region, filter should be
     * { fieldName: "nestedField.price", "select_items_by": [{"nestedField.region": "US"}] }
     */
    selectItemsBy?: Record<string, any>[] | null;
}
export declare enum WixCommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface WixCommonAggregation extends WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
export interface WixCommonAggregationKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** Nested aggregation */
    nested?: CommonAggregationNestedAggregation;
}
export interface AggregationRangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
export declare enum AggregationValueAggregationSortType {
    /** Should sort by number of matches */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically */
    VALUE = "VALUE"
}
export declare enum AggregationValueAggregationSortDirection {
    /** Should sort in descending order */
    DESC = "DESC",
    /** Should sort in ascending order */
    ASC = "ASC"
}
export declare enum AggregationValueAggregationMissingValues {
    /** Should missing values be excluded from the aggregation results */
    EXCLUDE = "EXCLUDE",
    /** Should missing values be included in the aggregation results */
    INCLUDE = "INCLUDE"
}
export interface AggregationValueAggregationIncludeMissingValuesOptions {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
export declare enum WixCommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value */
    MIN = "MIN",
    /** Maximum value */
    MAX = "MAX"
}
export interface CommonAggregationValueAggregation extends CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: AggregationValueAggregationSortType;
    /** Should sort in ascending or descending order */
    sortDirection?: AggregationValueAggregationSortDirection;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: AggregationValueAggregationMissingValues;
}
/** @oneof */
export interface CommonAggregationValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: AggregationValueAggregationIncludeMissingValuesOptions;
}
export declare enum AggregationNestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
export interface CommonAggregationRangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: AggregationRangeAggregationRangeBucket[];
}
export interface CommonAggregationScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: WixCommonScalarType;
}
export interface CommonAggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: AggregationDateHistogramAggregationInterval;
}
export declare enum AggregationDateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
export interface AggregationNestedAggregationNestedAggregationItem extends AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationNestedAggregationNestedAggregationType;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
export interface AggregationNestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: CommonAggregationValueAggregation;
    /** Range aggregation */
    range?: CommonAggregationRangeAggregation;
    /** Scalar aggregation */
    scalar?: CommonAggregationScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: CommonAggregationDateHistogramAggregation;
}
export declare enum WixCommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    RANGE = "RANGE",
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
export interface CommonAggregationNestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: AggregationNestedAggregationNestedAggregationItem[];
}
export interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface V3SearchProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: CommonAggregationData;
}
export interface CommonCursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: CommonCursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface CommonAggregationData {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationDataAggregationResults[];
}
export interface ValueResultsValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
export interface RangeResultsRangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
export interface AggregationResultsNestedAggregationResults extends AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: WixCommonAggregationType;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
export interface AggregationResultsNestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
}
export interface AggregationResultsValueResults {
    /** List of value aggregations */
    results?: ValueResultsValueAggregationResult[];
}
export interface AggregationResultsRangeResults {
    /** List of ranges returned in same order as requested */
    results?: RangeResultsRangeAggregationResult[];
}
export interface AggregationDataAggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: WixCommonScalarType;
    /** Value of the scalar aggregation */
    value?: number;
}
export interface GroupByValueResultsNestedValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: AggregationResultsNestedAggregationResults;
}
export interface NestedResultsValueResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
export interface NestedResultsRangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
export interface NestedResultsScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
export interface NestedResultsNestedResultValue extends NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
/** @oneof */
export interface NestedResultsNestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: NestedResultsValueResult;
    /** Range aggregation result */
    range?: NestedResultsRangeResult;
    /** Scalar aggregation result */
    scalar?: NestedResultsScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: NestedResultsValueResult;
}
export interface NestedResultsResults {
    /** List of nested aggregations */
    results?: Record<string, NestedResultsNestedResultValue>;
}
export interface DateHistogramResultsDateHistogramResult {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
export interface AggregationResultsGroupByValueResults {
    /** List of value aggregations */
    results?: GroupByValueResultsNestedValueAggregationResult[];
}
export interface AggregationResultsDateHistogramResults {
    /** List of date histogram aggregations */
    results?: DateHistogramResultsDateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
export interface AggregationResultsNestedResults {
    /** List of nested aggregations */
    results?: NestedResultsResults[];
}
export interface AggregationDataAggregationResults extends AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: WixCommonAggregationType;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
export interface AggregationDataAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: AggregationResultsValueResults;
    /** Range aggregation results */
    ranges?: AggregationResultsRangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationDataAggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: AggregationResultsGroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: AggregationResultsDateHistogramResults;
    /** Nested aggregation results */
    nested?: AggregationResultsNestedResults;
}
export interface V3QueryProductsRequest {
    /** Query options. */
    query?: CommonCursorQuery;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface CommonCursorQuery extends CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: WixCommonSorting[];
}
/** @oneof */
export interface CommonCursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
export interface V3QueryProductsResponse {
    /** List of products. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CommonCursorPagingMetadata;
}
export interface V3CountProductsRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /**
     * Whether to return non-visible products (`visible:false`). Your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     *
     * Default: `false`
     */
    returnNonVisibleProducts?: boolean;
}
export interface V3CountProductsResponse {
    /** Total number of products. */
    count?: number;
}
export interface BulkUpdateProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Variant to update. */
    variant: Variant;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface BulkUpdateProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3BulkAdjustProductVariantsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** Cost adjustment. */
    cost?: V3AdjustValue;
    /**
     * Rounding strategy of new calculated prices.
     *
     * + `NO_ROUNDING`: Calculated prices will be saved without rounding to keep max possible precision.
     * + `CURRENCY_PRECISION`: Calculated prices will be rounded according to the currency's precision requirements. For example. `$3.5555` will be saved as `$3.56`; `¥3.5555` will be saved as `¥4`.
     * + `NEAREST_WHOLE_NUMBER`: Calculated prices will be rounded to the nearest whole number.
     */
    rounding?: BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
    /** Actual price adjustment. */
    actualPrice?: V3AdjustValue;
    /** Compare at price adjustment. */
    compareAtPrice?: V3AdjustValue;
    /**
     * Set variant actualPrice from compareAtPrice by applying provided discount to it.
     * if compare-at-price doesn't exist, actualPrice will be set to compareAtPrice and the discount will be calculated from it.
     * For example variant compareAtPrice 100$, variant actualPrice is 95$, requested `compareAtPriceDiscount.percentage` is 10, then old actual price ignored and new actual price set to 90 (100$ - 10%).
     */
    compareAtPriceDiscount?: V3UnsignedAdjustValue;
}
export interface V3AdjustValue extends V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
export interface V3AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
export declare enum BulkAdjustProductVariantsByFilterRequestRoundingStrategy {
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
export interface V3UnsignedAdjustValue extends V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
export interface V3UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
export interface V3BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3BulkAddInfoSectionsToProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of the info sections to add. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface V3BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3BulkAddInfoSectionsToProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to add. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface V3ProductIdWithRevision {
    /** Product ID. */
    productId?: string;
    /**
     * Revision number, which increments by 1 each time the product is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the product.
     */
    revision?: string;
}
export interface V3BulkAddInfoSectionsToProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface V3BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /** Filter object. */
    filter: Record<string, any> | null;
    /** IDs of info sections to remove. */
    infoSectionIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface V3BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface V3BulkRemoveInfoSectionsFromProductsRequest {
    /** List of product IDs and revisions. */
    products: V3ProductIdWithRevision[];
    /** List of IDs of info sections to remove. */
    infoSectionIds: string[];
    /**
     * Whether to return the full updated product entities in the response.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
    /** Fields to include in the response. */
    fields?: RequestedFields[];
}
export interface V3BulkRemoveInfoSectionsFromProductsResponse {
    /** Products updated by bulk action. */
    results?: CatalogV3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: CommonBulkActionMetadata;
}
export interface BulkAddProductsToCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories to which products will be added. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface BulkAddProductsToCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface BulkRemoveProductsFromCategoriesByFilterRequest {
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** IDs of the categories from which products will be removed. */
    categoryIds: string[];
    /** Free text to match in searchable fields. */
    search?: WixCommonSearchDetails;
}
export interface BulkRemoveProductsFromCategoriesByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /** tell us why you're invalidating the cache. You don't need to add your app name */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
export interface InvalidateCacheGetByOneOf {
    /** Invalidate by msId. NOT recommended, as this will invalidate the entire site cache! */
    metaSiteId?: string;
    /** Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache! */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
export interface App {
    /** The AppDefId */
    appDefId?: string;
    /** The instance Id */
    instanceId?: string;
}
export interface Page {
    /** the msid the page is on */
    metaSiteId?: string;
    /** Invalidate by Page ID */
    pageId?: string;
}
export interface URI {
    /** the msid the URI is on */
    metaSiteId?: string;
    /** URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes */
    uriPath?: string;
}
export interface File {
    /** the msid the file is related to */
    metaSiteId?: string;
    /** Invalidate by filename (for media files such as PDFs) */
    fileName?: string;
}
export interface DoNotCallCreateProductRequest {
    /** Product to be created */
    product?: V3Product;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface DoNotCallCreateProductResponse {
    /** The created Product */
    product?: V3Product;
}
export interface GetProductRequest {
    /** Id of the Product to retrieve */
    productId?: string;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface GetProductResponse {
    /** The retrieved Product */
    product?: V3Product;
}
export interface GetProductBySlugRequest {
    /** Product slug. A permanent, friendly URL name unique per store. */
    slug?: string;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface GetProductBySlugResponse {
    /** The retrieved Product */
    product?: V3Product;
}
export interface DoNotCallUpdateProductRequest {
    /** Product to be updated, may be partial */
    product?: V3Product;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface DoNotCallUpdateProductResponse {
    /** The updated Product */
    product?: V3Product;
}
export interface VariantsRemoved {
    /** Removed variants ids. */
    variantIds?: string[];
}
export interface DeleteProductRequest {
    /** Id of the Product to delete */
    productId?: string;
}
export interface DeleteProductResponse {
}
export interface SearchProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     * This endpoint does not return variants-info, even though it is part of the entity, as including it would result in overly large response objects.
     * If you need variants-info, you can retrieve it for a specific product using the getProduct endpoint.
     */
    search?: CursorSearch;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * List of sort objects.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: Aggregation[];
    /** Free text to match in searchable fields. */
    search?: SearchDetails;
    /**
     * UTC offset or IANA time zone. Valid values are
     * ISO 8601 UTC offsets, such as +02:00 or -06:00,
     * and IANA time zone IDs, such as Europe/Rome
     *
     * Affects all filters and aggregations returned values.
     * You may override this behavior in a specific filter by providing
     * timestamps including time zone. e.g. `"2023-12-20T10:52:34.795Z"`
     */
    timeZone?: string | null;
}
/** @oneof */
export interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
export interface Aggregation extends AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: AggregationType;
    /** Field to aggregate by, use dot notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
export interface AggregationKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** Nested aggregation */
    nested?: NestedAggregation;
}
export interface RangeBucket {
    /** Inclusive lower bound of the range. Required if to is not given */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if from is not given */
    to?: number | null;
}
export declare enum SortType {
    /** Should sort by number of matches. */
    COUNT = "COUNT",
    /** Should sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
export declare enum SortDirection {
    /** Should sort by descending order. */
    DESC = "DESC",
    /** Should sort by ascending order. */
    ASC = "ASC"
}
export declare enum MissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values from the aggregation results. */
    INCLUDE = "INCLUDE"
}
export interface IncludeMissingValuesOptions {
    /** Can specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
export declare enum ScalarType {
    /** Undefined scalar type. */
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
export interface ValueAggregation extends ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
    /** Should sort by number of matches or value of the field */
    sortType?: SortType;
    /** Should sort in ascending or descending order */
    sortDirection?: SortDirection;
    /** How many aggregations would you like to return? Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Should missing values be included or excluded from the aggregation results. Default is EXCLUDE */
    missingValues?: MissingValues;
}
/** @oneof */
export interface ValueAggregationOptionsOneOf {
    /** Options for including missing values */
    includeOptions?: IncludeMissingValuesOptions;
}
export declare enum NestedAggregationType {
    /** Undefined nested aggregation type. */
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
export interface RangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket where its value falls into based on provided range bounds */
    buckets?: RangeBucket[];
}
export interface ScalarAggregation {
    /** Define the operator for the scalar aggregation */
    type?: ScalarType;
}
export interface DateHistogramAggregation {
    /** Interval for date histogram aggregation */
    interval?: Interval;
}
export declare enum Interval {
    /** Undefined interval type. */
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval. */
    YEAR = "YEAR",
    /** Monthly interval. */
    MONTH = "MONTH",
    /** Weekly interval. */
    WEEK = "WEEK",
    /** Daily interval. */
    DAY = "DAY",
    /** Hourly interval. */
    HOUR = "HOUR",
    /** Minute interval. */
    MINUTE = "MINUTE",
    /** Second interval. */
    SECOND = "SECOND"
}
export interface NestedAggregationItem extends NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below */
    type?: NestedAggregationType;
    /** Field to aggregate by, use dont notation to specify json path */
    fieldPath?: string;
}
/** @oneof */
export interface NestedAggregationItemKindOneOf {
    /** Value aggregation */
    value?: ValueAggregation;
    /** Range aggregation */
    range?: RangeAggregation;
    /** Scalar aggregation */
    scalar?: ScalarAggregation;
    /** Date histogram aggregation */
    dateHistogram?: DateHistogramAggregation;
}
export declare enum AggregationType {
    /** Undefined aggregation type. */
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation where a user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** A Multi-level aggregation where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one */
export interface NestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one */
    nestedAggregations?: NestedAggregationItem[];
}
export interface SearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: Mode;
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
    /** Flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
export declare enum Mode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface SearchProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface AggregationData {
    /** key = aggregation name (as derived from search request) */
    results?: AggregationResults[];
}
export interface ValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number;
}
export interface RangeAggregationResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number;
}
export interface NestedAggregationResults extends NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** User-defined name of aggregation, matches the one provided in request */
    name?: string;
    /** Type of aggregation that matches result */
    type?: AggregationType;
    /** Field to aggregate by, matches the one provided in request */
    fieldPath?: string;
}
/** @oneof */
export interface NestedAggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
}
export interface ValueResults {
    /** List of value aggregations */
    results?: ValueAggregationResult[];
}
export interface RangeResults {
    /** List of ranges returned in same order as requested */
    results?: RangeAggregationResult[];
}
export interface AggregationResultsScalarResult {
    /** Type of scalar aggregation */
    type?: ScalarType;
    /** Value of the scalar aggregation */
    value?: number;
}
export interface NestedValueAggregationResult {
    /** Value of the field */
    value?: string;
    /** Nested aggregations */
    nestedResults?: NestedAggregationResults;
}
export interface ValueResult {
    /** Value of the field */
    value?: string;
    /** Count of entities with this value */
    count?: number | null;
}
export interface RangeResult {
    /** Inclusive lower bound of the range */
    from?: number | null;
    /** Exclusive upper bound of the range */
    to?: number | null;
    /** Count of entities in this range */
    count?: number | null;
}
export interface ScalarResult {
    /** Value of the scalar aggregation */
    value?: number;
}
export interface NestedResultValue extends NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
/** @oneof */
export interface NestedResultValueResultOneOf {
    /** Value aggregation result */
    value?: ValueResult;
    /** Range aggregation result */
    range?: RangeResult;
    /** Scalar aggregation result */
    scalar?: ScalarResult;
    /** Date histogram aggregation result */
    dateHistogram?: ValueResult;
}
export interface Results {
    /** List of nested aggregations */
    results?: Record<string, NestedResultValue>;
}
export interface DateHistogramResult {
    /** Date in ISO 8601 format */
    value?: string;
    /** Count of documents in the bucket */
    count?: number;
}
export interface GroupByValueResults {
    /** List of value aggregations */
    results?: NestedValueAggregationResult[];
}
export interface DateHistogramResults {
    /** List of date histogram aggregations */
    results?: DateHistogramResult[];
}
/**
 * Results of `NESTED` aggregation type in a flattened form
 * aggregations in resulting array are keyed by requested aggregation `name`.
 */
export interface NestedResults {
    /** List of nested aggregations */
    results?: Results[];
}
export interface AggregationResults extends AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
    /** User-defined name of aggregation as derived from search request */
    name?: string;
    /** Type of aggregation that must match provided kind as derived from search request */
    type?: AggregationType;
    /** Field to aggregate by as derived from search request */
    fieldPath?: string;
}
/** @oneof */
export interface AggregationResultsResultOneOf {
    /** Value aggregation results */
    values?: ValueResults;
    /** Range aggregation results */
    ranges?: RangeResults;
    /** Scalar aggregation results */
    scalar?: AggregationResultsScalarResult;
    /** Group by value aggregation results */
    groupedByValue?: GroupByValueResults;
    /** Date histogram aggregation results */
    dateHistogram?: DateHistogramResults;
    /** Nested aggregation results */
    nested?: NestedResults;
}
export interface SearchRelatedProductsRequest {
    /** Search parameters. */
    searchRelated?: SearchRelated;
}
export interface SearchRelated {
    /** A list of entity IDs to search related entities for */
    relatedToIds?: string[];
    /** Search details */
    search?: SearchRelatedDetails;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: Sorting[];
    /** Number of related documents to return */
    limit?: number | null;
}
export interface SearchRelatedDetails {
    /** Search term or expression */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path */
    fields?: string[];
}
export interface SearchRelatedProductsResponse {
    /** The IDs of related Products that satisfy the request. */
    productIds?: string[];
}
export interface EventuallyConsistentQueryProductsRequest {
    /**
     * WQL expression. Please pay attention that unlike other arrays when you want to filter by `inventory`, `options` or `variants` instead of standard array operators you must use `$matchItems` (for usage see examples).
     * It means that product will be returned only if one or more items satisfy all filters specified in $matchItems.
     * For example, if you have 2 variants: one visible with price 10 and another one not visible with price 20, when inside $matchItems you specify `visible:true` and `price > 15` nothing will be returned because there are no variants which satisfy both conditions.
     * You still can use `$isEmpty` and `$exists` operators for fields listed above.
     * See examples to understand supported capabilities.
     */
    query?: CursorQuery;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
export interface EventuallyConsistentQueryProductsResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface QueryProductsRequest {
    /** WQL expression */
    query?: CursorQuery;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface QueryProductsResponse {
    /** The retrieved Products */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface DeprecatedSearchProductsWithOffsetRequest {
    /** Filter and sort with limit/offset based paging */
    search?: PlatformOffsetSearch;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface PlatformOffsetSearch extends PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
    /** A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** Aggregations | Faceted search: refers to a way to explore large amounts of data by displaying summaries about various partitions of the data and later allowing to narrow the navigation to a specific partition. */
    aggregations?: CommonAggregation[];
    /** free text to match in searchable fields */
    search?: CommonSearchDetails;
}
/** @oneof */
export interface PlatformOffsetSearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: PlatformPaging;
}
export interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
export declare enum CommonSortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CommonAggregation extends CommonAggregationKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** Nested aggregation. */
    nested?: AggregationNestedAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: CommonAggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
    /**
     * Deprecated. Use `nested` instead.
     * @deprecated Deprecated. Use `nested` instead.
     * @replacedBy kind.nested
     * @targetRemovalDate 2024-03-30
     */
    groupBy?: GroupByAggregation;
}
/** @oneof */
export interface CommonAggregationKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** Nested aggregation. */
    nested?: AggregationNestedAggregation;
}
export interface RangeAggregationRangeBucket {
    /** Inclusive lower bound of the range. Required if `to` is not provided. */
    from?: number | null;
    /** Exclusive upper bound of the range. Required if `from` is not provided. */
    to?: number | null;
}
export declare enum ValueAggregationSortType {
    /** Sort by number of matches. */
    COUNT = "COUNT",
    /** Sort by value of the field alphabetically. */
    VALUE = "VALUE"
}
export declare enum ValueAggregationSortDirection {
    /** Sort in descending order. */
    DESC = "DESC",
    /** Sort in ascending order. */
    ASC = "ASC"
}
export declare enum ValueAggregationMissingValues {
    /** Exclude missing values from the aggregation results. */
    EXCLUDE = "EXCLUDE",
    /** Include missing values in the aggregation results. */
    INCLUDE = "INCLUDE"
}
export interface ValueAggregationIncludeMissingValuesOptions {
    /** Specify custom bucket name. Defaults are [string -> "N/A"], [int -> "0"], [bool -> "false"] ... */
    addToBucket?: string;
}
export declare enum CommonScalarType {
    UNKNOWN_SCALAR_TYPE = "UNKNOWN_SCALAR_TYPE",
    /** Count of distinct values. */
    COUNT_DISTINCT = "COUNT_DISTINCT",
    /** Minimum value. */
    MIN = "MIN",
    /** Maximum value. */
    MAX = "MAX"
}
export interface AggregationValueAggregation extends AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
    /** Whether to sort by number of matches or value of the field. */
    sortType?: ValueAggregationSortType;
    /** Whether to sort in ascending or descending order. */
    sortDirection?: ValueAggregationSortDirection;
    /** How many aggregations to return. Can be between 1 and 250. 10 is the default. */
    limit?: number | null;
    /** Whether to include or exclude missing values from the aggregation results. Default: `EXCLUDE`. */
    missingValues?: ValueAggregationMissingValues;
}
/** @oneof */
export interface AggregationValueAggregationOptionsOneOf {
    /** Options for including missing values. */
    includeOptions?: ValueAggregationIncludeMissingValuesOptions;
}
export declare enum NestedAggregationNestedAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    DATE_HISTOGRAM = "DATE_HISTOGRAM"
}
export interface AggregationRangeAggregation {
    /** List of range buckets, where during aggregation each entity will be placed in the first bucket its value falls into, based on the provided range bounds. */
    buckets?: RangeAggregationRangeBucket[];
}
export interface AggregationScalarAggregation {
    /** Define the operator for the scalar aggregation. */
    type?: CommonScalarType;
}
export interface AggregationDateHistogramAggregation {
    /** Interval for date histogram aggregation. */
    interval?: DateHistogramAggregationInterval;
}
export declare enum DateHistogramAggregationInterval {
    UNKNOWN_INTERVAL = "UNKNOWN_INTERVAL",
    /** Yearly interval */
    YEAR = "YEAR",
    /** Monthly interval */
    MONTH = "MONTH",
    /** Weekly interval */
    WEEK = "WEEK",
    /** Daily interval */
    DAY = "DAY",
    /** Hourly interval */
    HOUR = "HOUR",
    /** Minute interval */
    MINUTE = "MINUTE",
    /** Second interval */
    SECOND = "SECOND"
}
export interface NestedAggregationNestedAggregationItem extends NestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Type of aggregation, client must provide matching aggregation field below. */
    type?: NestedAggregationNestedAggregationType;
    /** Field to aggregate by, use dot notation to specify json path. */
    fieldPath?: string;
}
/** @oneof */
export interface NestedAggregationNestedAggregationItemKindOneOf {
    /** Value aggregation. */
    value?: AggregationValueAggregation;
    /** Range aggregation. */
    range?: AggregationRangeAggregation;
    /** Scalar aggregation. */
    scalar?: AggregationScalarAggregation;
    /** Date histogram aggregation. */
    dateHistogram?: AggregationDateHistogramAggregation;
}
export declare enum CommonAggregationType {
    UNKNOWN_AGGREGATION_TYPE = "UNKNOWN_AGGREGATION_TYPE",
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    VALUE = "VALUE",
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    RANGE = "RANGE",
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    SCALAR = "SCALAR",
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    DATE_HISTOGRAM = "DATE_HISTOGRAM",
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    NESTED = "NESTED"
}
/** Nested aggregation expressed through a list of aggregation where each next aggregation is nested within previous one. */
export interface AggregationNestedAggregation {
    /** Flattened list of aggregations, where each next aggregation is nested within previous one. */
    nestedAggregations?: NestedAggregationNestedAggregationItem[];
}
export interface GroupByAggregation extends GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
    /** User-defined name of aggregation, should be unique, will appear in aggregation results. */
    name?: string | null;
    /** Field to aggregate by. */
    fieldPath?: string;
}
/** @oneof */
export interface GroupByAggregationKindOneOf {
    /** Value aggregation configuration. */
    value?: AggregationValueAggregation;
}
export interface CommonSearchDetails {
    /** Defines how separate search terms in `expression` are combined. */
    mode?: SearchDetailsMode;
    /** Search term or expression. */
    expression?: string | null;
    /** Fields to search in. If empty - will search in all searchable fields. Use dot notation to specify json path. */
    fields?: string[];
    /** Whether to use auto fuzzy search (allowing typos by a managed proximity algorithm). */
    fuzzy?: boolean;
}
export declare enum SearchDetailsMode {
    /** Any of the search terms must be present. */
    OR = "OR",
    /** All search terms must be present. */
    AND = "AND"
}
export interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface DeprecatedSearchProductsWithOffsetResponse {
    /** Products which satisfy the provided query. */
    products?: V3Product[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadata;
    /** Aggregation data. */
    aggregationData?: AggregationData;
}
export interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
export interface RetrieveVariantsRequest {
    /** Ids of the product and variants to retrieve */
    productVariantIds?: ProductVariantIds[];
    /**
     * Pointer to the next page in the list of results.
     * Pass the relevant cursor token from the `pagingMetadata` in the previous call's response.
     * Not relevant for the first request.
     */
    cursorPaging?: VariantsCursorPaging;
    /** Fields to include in the response. */
    fields?: VariantsOpsRequestedFields[];
}
export interface ProductVariantIds {
    /** Product id of the requested variants. */
    productId?: string;
    /** A list of variant ids. */
    variantIds?: string[];
}
export interface VariantsCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export declare enum VariantsOpsRequestedFields {
    /** Not implemented. */
    UNKNOWN_REQUESTED_FIELD = "UNKNOWN_REQUESTED_FIELD",
    CURRENCY = "CURRENCY",
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    MERCHANT_DATA = "MERCHANT_DATA",
    SUBSCRIPTION_PRICES_INFO = "SUBSCRIPTION_PRICES_INFO",
    VARIANT_OPTION_CHOICE_NAMES = "VARIANT_OPTION_CHOICE_NAMES",
    THUMBNAIL = "THUMBNAIL"
}
export interface RetrieveVariantsResponse {
    /** The retrieved Products and Variants */
    productVariants?: ProductVariants[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface ProductVariants {
    /** Product id of the requested variants. */
    productId?: string;
    /** A list of variants. */
    variants?: Variant[];
}
export interface CountProductsRequest {
    /**
     * A filter object. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language).
     * To understand supported filters and limitations see `SearchProducts` method.
     */
    filter?: Record<string, any> | null;
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
export interface CountProductsResponse {
    /** The amount of products which apply to the request */
    count?: number;
}
export interface DoNotCallBulkCreateProductsRequest {
    /** List of products to be created. */
    products?: V3Product[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. Relevant only if `return_entity` true. */
    fields?: RequestedFields[];
}
export interface DoNotCallBulkCreateProductsResponse {
    /** Products created by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface V3BulkProductResult {
    /** Bulk action metadata for product. */
    itemMetadata?: CommonItemMetadata;
    /**
     * Full product entity.
     *
     * Returned only if `returnEntity: true` is passed in the request.
     */
    item?: V3Product;
}
export interface CommonItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface DoNotCallBulkUpdateProductsRequest {
    /** List of products to be updated. */
    products?: MaskedProduct[];
    /** Whether to return the full product entity in the response. */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. Relevant only if `return_entity` true. */
    fields?: RequestedFields[];
}
export interface MaskedProduct {
    /** product to be updated, may be partial. */
    product?: V3Product;
}
export interface DoNotCallBulkUpdateProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkUpdateProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Product with new field values. */
    product?: V3Product;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
export interface BulkUpdateProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface BulkDeleteProductsRequest {
    /** IDs of products to be deleted. */
    productIds?: string[];
}
export interface BulkDeleteProductsResponse {
    /** Products deleted by bulk action. */
    results?: BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkProductResult {
    /** Information about successful action or error for failure. */
    itemMetadata?: CommonItemMetadata;
}
export interface BulkDeleteProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "actualPriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
export interface BulkDeleteProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    productId?: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace?: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData?: Record<string, any> | null;
    /** A list of requested fields to be included in the response. */
    fields?: SingleEntityOpsRequestedFields[];
}
export interface UpdateExtendedFieldsResponse {
    /** The updated Product */
    product?: V3Product;
}
export interface BulkAddInfoSectionsToProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "actualPriceRange.minValue": {"$lte": 5.99}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Info sections to be added */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
export interface BulkAddInfoSectionsToProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface FulfillerDeleted {
    id?: string;
}
export interface BulkAddInfoSectionsToProductsRequest {
    /** Products to be updated with id and revision. */
    products?: ProductIdWithRevision[];
    /**
     * Products to be updated with id and revision.
     * Info section to be added
     */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface ProductIdWithRevision {
    /** ID of product. */
    productId?: string;
    /** The revision of the Product */
    revision?: string;
}
export interface BulkAddInfoSectionsToProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkRemoveInfoSectionsFromProductsByFilterRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "name": "value1",
     * "categoryIds":{"$in":["categoryId1", "categoryId2"]}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /** Info sections to be removed */
    infoSectionIds?: string[];
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
export interface BulkRemoveInfoSectionsFromProductsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface BulkRemoveInfoSectionsFromProductsRequest {
    /** Products to be updated with id and revision. */
    products?: ProductIdWithRevision[];
    /** Info section to be removed. */
    infoSectionIds?: string[];
    /** Whether to return all updated product entities in the response. Default: false */
    returnEntity?: boolean;
    /** A list of requested fields to be included in the response. */
    fields?: RequestedFields[];
}
export interface BulkRemoveInfoSectionsFromProductsResponse {
    /** Products updated by bulk action. */
    results?: V3BulkProductResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkUpdateVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains` */
    filter?: Record<string, any> | null;
    /** Variant with new field values. */
    variant?: Variant;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
}
export interface BulkUpdateVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface BulkAdjustProductVariantsByFilterRequest {
    /** Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$contains` */
    filter?: Record<string, any> | null;
    /** The amount or percentage to change the variants cost by */
    cost?: AdjustValue;
    /** Defines rounding strategy of new calculated prices. Default: CURRENCY_PRECISION. */
    rounding?: RoundingStrategy;
    /** Free text to match in searchable fields */
    search?: SearchDetails;
    /** Actual price adjustment. */
    actualPrice?: AdjustValue;
    /** Compare at price adjustment. */
    compareAtPrice?: AdjustValue;
    /**
     * Set variant actualPrice from compareAtPrice by applying provided discount to it.
     * if compare-at-price doesn't exist, actualPrice will be set to compareAtPrice and the discount will be calculated from it.
     * For example variant compare at price 100$, variant actual price is 95$, requested `compareAtPriceDiscount.percentage` is 10, then old actual price ignored and new actual price set to 90 (100$ - 10%).
     */
    compareAtPriceDiscount?: UnsignedAdjustValue;
}
export interface AdjustValue extends AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
/** @oneof */
export interface AdjustValueAdjustValueOneOf {
    /** A decimal value to increase or reduce from the original value, can be negative. */
    amount?: string;
    /** The percentage value to increase or reduce from the current value, can be negative. */
    percentage?: number;
}
export declare enum RoundingStrategy {
    /** Undefined rounding strategy. */
    UNKNOWN_ROUNDING_STRATEGY = "UNKNOWN_ROUNDING_STRATEGY",
    /**
     * Calculated prices are saved without rounding to keep the maximum possible precision. It's a good idea to round numbers before displaying them.
     * For example, input $3.5555 -> saved value $3.5555
     */
    NO_ROUNDING = "NO_ROUNDING",
    /**
     * Calculated prices are rounded according to currency precision.
     * For example:, input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    CURRENCY_PRECISION = "CURRENCY_PRECISION",
    /**
     * Calculated prices are rounded to nearest whole number.
     * For example, input $3.5555 -> saved value $4
     */
    NEAREST_WHOLE_NUMBER = "NEAREST_WHOLE_NUMBER"
}
export interface UnsignedAdjustValue extends UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
/** @oneof */
export interface UnsignedAdjustValueAdjustValueOneOf {
    /** A decimal value to reduce from the original value. */
    amount?: string;
    /** The percentage value to reduce from the original value. */
    percentage?: number;
}
export interface BulkAdjustProductVariantsByFilterResponse {
    /**
     * Job ID.
     *
     * Pass this ID to [Get Async Job](https://dev.wix.com/docs/rest/business-management/async-job/introduction) to retrieve job details and metadata..
     */
    jobId?: string;
}
export interface BulkInventoryItemAction {
    /** Inventory items. */
    inventoryItems?: InventoryItem[];
}
interface PricePerUnitSettingsNonNullableFields {
    quantity: number;
    measurementUnit: MeasurementUnit;
}
interface WeightRangeNonNullableFields {
    minValue: number;
    maxValue: number;
}
interface PricePerUnitRangePricePerUnitNonNullableFields {
    value: string;
}
interface PricePerUnitRangeNonNullableFields {
    minValue?: PricePerUnitRangePricePerUnitNonNullableFields;
    maxValue?: PricePerUnitRangePricePerUnitNonNullableFields;
}
interface WeightMeasurementUnitInfoNonNullableFields {
    weightMeasurementUnit: WeightUnit;
}
interface PhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitSettingsNonNullableFields;
    shippingWeightRange?: WeightRangeNonNullableFields;
    pricePerUnitRange?: PricePerUnitRangeNonNullableFields;
    weightMeasurementUnitInfo?: WeightMeasurementUnitInfoNonNullableFields;
}
interface PageUrlV2NonNullableFields {
    relativePath: string;
}
interface PluginContainerDataWidthNonNullableFields {
    size: WidthType;
}
interface PluginContainerDataNonNullableFields {
    width?: PluginContainerDataWidthNonNullableFields;
    alignment: PluginContainerDataAlignment;
}
interface LinkNonNullableFields {
    url: string;
    anchor: string;
    target: Target;
}
interface ButtonDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    type: Type;
    link?: LinkNonNullableFields;
}
interface TextStyleNonNullableFields {
    textAlignment: TextAlignment;
}
interface CodeBlockDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface DividerDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    lineStyle: LineStyle;
    width: Width;
    alignment: Alignment;
}
interface PDFSettingsNonNullableFields {
    viewMode: ViewMode;
}
interface FileDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    pdfSettings?: PDFSettingsNonNullableFields;
}
interface ItemImageNonNullableFields {
    link?: LinkNonNullableFields;
}
interface ItemNonNullableFields {
    image?: ItemImageNonNullableFields;
}
interface LayoutNonNullableFields {
    type: LayoutType;
    orientation: Orientation;
}
interface ItemStyleNonNullableFields {
    crop: Crop;
}
interface ThumbnailsNonNullableFields {
    placement: ThumbnailsAlignment;
}
interface GalleryOptionsNonNullableFields {
    layout?: LayoutNonNullableFields;
    item?: ItemStyleNonNullableFields;
    thumbnails?: ThumbnailsNonNullableFields;
}
interface GalleryDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    items: ItemNonNullableFields[];
    options?: GalleryOptionsNonNullableFields;
}
interface GIFDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    height: number;
    width: number;
    gifType: GIFType;
}
interface HeadingDataNonNullableFields {
    level: number;
    textStyle?: TextStyleNonNullableFields;
}
interface HTMLDataNonNullableFields {
    url: string;
    html: string;
    containerData?: PluginContainerDataNonNullableFields;
    source: Source;
}
interface ImageDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface LinkPreviewDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    link?: LinkNonNullableFields;
}
interface MapSettingsNonNullableFields {
    mapType: MapType;
}
interface MapDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    mapSettings?: MapSettingsNonNullableFields;
}
interface ParagraphDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface PermissionsNonNullableFields {
    view: ViewRole;
    vote: VoteRole;
}
interface PollSettingsNonNullableFields {
    permissions?: PermissionsNonNullableFields;
}
interface PollNonNullableFields {
    settings?: PollSettingsNonNullableFields;
}
interface PollLayoutNonNullableFields {
    type: PollLayoutType;
    direction: PollLayoutDirection;
}
interface PollDataLayoutNonNullableFields {
    poll?: PollLayoutNonNullableFields;
}
interface BackgroundNonNullableFields {
    type: BackgroundType;
}
interface PollDesignNonNullableFields {
    background?: BackgroundNonNullableFields;
}
interface DesignNonNullableFields {
    poll?: PollDesignNonNullableFields;
}
interface PollDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    poll?: PollNonNullableFields;
    layout?: PollDataLayoutNonNullableFields;
    design?: DesignNonNullableFields;
}
interface AnchorDataNonNullableFields {
    anchor: string;
}
interface LinkDataNonNullableFields {
    link?: LinkNonNullableFields;
}
interface MentionDataNonNullableFields {
    name: string;
    slug: string;
}
interface FontSizeDataNonNullableFields {
    unit: FontType;
}
interface DecorationNonNullableFields {
    anchorData?: AnchorDataNonNullableFields;
    linkData?: LinkDataNonNullableFields;
    mentionData?: MentionDataNonNullableFields;
    fontSizeData?: FontSizeDataNonNullableFields;
    type: DecorationType;
}
interface TextDataNonNullableFields {
    text: string;
    decorations: DecorationNonNullableFields[];
}
interface AppEmbedDataNonNullableFields {
    type: AppType;
}
interface VideoDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface EmbedDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface CollapsibleListDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    initialExpandedItems: InitialExpandedItems;
    direction: Direction;
}
interface DimensionsNonNullableFields {
    colsWidthRatio: number[];
    rowsHeight: number[];
    colsMinWidth: number[];
}
interface TableDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
    dimensions?: DimensionsNonNullableFields;
}
interface CellStyleNonNullableFields {
    verticalAlignment: VerticalAlignment;
}
interface TableCellDataNonNullableFields {
    cellStyle?: CellStyleNonNullableFields;
}
interface AudioDataNonNullableFields {
    containerData?: PluginContainerDataNonNullableFields;
}
interface OrderedListDataNonNullableFields {
    indentation: number;
}
interface BulletedListDataNonNullableFields {
    indentation: number;
}
interface BlockquoteDataNonNullableFields {
    indentation: number;
}
interface CaptionDataNonNullableFields {
    textStyle?: TextStyleNonNullableFields;
}
interface NodeNonNullableFields {
    buttonData?: ButtonDataNonNullableFields;
    codeBlockData?: CodeBlockDataNonNullableFields;
    dividerData?: DividerDataNonNullableFields;
    fileData?: FileDataNonNullableFields;
    galleryData?: GalleryDataNonNullableFields;
    gifData?: GIFDataNonNullableFields;
    headingData?: HeadingDataNonNullableFields;
    htmlData?: HTMLDataNonNullableFields;
    imageData?: ImageDataNonNullableFields;
    linkPreviewData?: LinkPreviewDataNonNullableFields;
    mapData?: MapDataNonNullableFields;
    paragraphData?: ParagraphDataNonNullableFields;
    pollData?: PollDataNonNullableFields;
    textData?: TextDataNonNullableFields;
    appEmbedData?: AppEmbedDataNonNullableFields;
    videoData?: VideoDataNonNullableFields;
    embedData?: EmbedDataNonNullableFields;
    collapsibleListData?: CollapsibleListDataNonNullableFields;
    tableData?: TableDataNonNullableFields;
    tableCellData?: TableCellDataNonNullableFields;
    audioData?: AudioDataNonNullableFields;
    orderedListData?: OrderedListDataNonNullableFields;
    bulletedListData?: BulletedListDataNonNullableFields;
    blockquoteData?: BlockquoteDataNonNullableFields;
    captionData?: CaptionDataNonNullableFields;
    type: NodeType;
    id: string;
    nodes: NodeNonNullableFields[];
}
interface MetadataNonNullableFields {
    version: number;
}
interface TextNodeStyleNonNullableFields {
    decorations: DecorationNonNullableFields[];
}
interface DocumentStyleNonNullableFields {
    headerOne?: TextNodeStyleNonNullableFields;
    headerTwo?: TextNodeStyleNonNullableFields;
    headerThree?: TextNodeStyleNonNullableFields;
    headerFour?: TextNodeStyleNonNullableFields;
    headerFive?: TextNodeStyleNonNullableFields;
    headerSix?: TextNodeStyleNonNullableFields;
    paragraph?: TextNodeStyleNonNullableFields;
    blockquote?: TextNodeStyleNonNullableFields;
    codeBlock?: TextNodeStyleNonNullableFields;
}
interface RichContentNonNullableFields {
    nodes: NodeNonNullableFields[];
    metadata?: MetadataNonNullableFields;
    documentStyle?: DocumentStyleNonNullableFields;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
}
interface VideoResolutionNonNullableFields {
    url: string;
    height: number;
    width: number;
    poster?: ImageNonNullableFields;
    format: string;
}
interface VideoV2NonNullableFields {
    id: string;
    url: string;
    resolutions: VideoResolutionNonNullableFields[];
    posters: ImageNonNullableFields[];
}
interface ThumbnailNonNullableFields {
    url: string;
    height: number;
    width: number;
}
interface ProductMediaNonNullableFields {
    id: string;
    url: string;
    image?: ImageNonNullableFields;
    video?: VideoV2NonNullableFields;
    mediaType: MediaType;
    thumbnail?: ThumbnailNonNullableFields;
    uploadId: string;
}
interface MediaItemsInfoNonNullableFields {
    items: ProductMediaNonNullableFields[];
}
interface MediaNonNullableFields {
    main?: ProductMediaNonNullableFields;
    itemsInfo?: MediaItemsInfoNonNullableFields;
}
interface TagNonNullableFields {
    type: string;
    children: string;
    custom: boolean;
    disabled: boolean;
}
interface KeywordNonNullableFields {
    term: string;
    isMain: boolean;
}
interface SettingsNonNullableFields {
    preventAutoRedirect: boolean;
    keywords: KeywordNonNullableFields[];
}
interface SeoSchemaNonNullableFields {
    tags: TagNonNullableFields[];
    settings?: SettingsNonNullableFields;
}
interface MultipleColorsNonNullableFields {
    colorCodes: string[];
}
interface ConnectedOptionChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image?: ImageNonNullableFields;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
    inStock: boolean;
    visible: boolean;
}
interface ChoicesSettingsNonNullableFields {
    choices: ConnectedOptionChoiceNonNullableFields[];
}
interface ConnectedOptionNonNullableFields {
    choicesSettings?: ChoicesSettingsNonNullableFields;
    optionRenderType: ProductOptionRenderType;
    key: string;
}
interface FreeTextSettingsNonNullableFields {
    minCharCount: number;
    maxCharCount: number;
    title: string;
    key: string;
}
interface ConnectedModifierChoiceNonNullableFields {
    colorCode: string;
    colorCodes?: MultipleColorsNonNullableFields;
    image?: ImageNonNullableFields;
    linkedMedia: ProductMediaNonNullableFields[];
    choiceType: ChoiceType;
    key: string;
}
interface ModifierChoicesSettingsNonNullableFields {
    choices: ConnectedModifierChoiceNonNullableFields[];
}
interface ConnectedModifierNonNullableFields {
    freeTextSettings?: FreeTextSettingsNonNullableFields;
    choicesSettings?: ModifierChoicesSettingsNonNullableFields;
    modifierRenderType: ModifierRenderType;
    mandatory: boolean;
    key: string;
}
interface InfoSectionNonNullableFields {
    description?: RichContentNonNullableFields;
}
interface ProductCategoryNonNullableFields {
    id: string;
}
interface ProductCategoriesInfoNonNullableFields {
    categories: ProductCategoryNonNullableFields[];
}
interface ProductCategoryIdsInfoNonNullableFields {
    categoryIds: string[];
}
interface FixedMonetaryAmountNonNullableFields {
    amount: string;
}
interface PriceRangeNonNullableFields {
    minValue?: FixedMonetaryAmountNonNullableFields;
    maxValue?: FixedMonetaryAmountNonNullableFields;
}
interface InventoryNonNullableFields {
    availabilityStatus: InventoryAvailabilityStatus;
    preorderStatus: PreorderStatus;
    preorderAvailability: ProductPreorderAvailability;
}
interface BreadCrumbNonNullableFields {
    categoryId: string;
    categoryName: string;
    categorySlug: string;
}
interface BreadcrumbsInfoNonNullableFields {
    breadcrumbs: BreadCrumbNonNullableFields[];
}
interface PricePerUnitNonNullableFields {
    settings?: PricePerUnitSettingsNonNullableFields;
    value: string;
}
interface VariantPhysicalPropertiesNonNullableFields {
    pricePerUnit?: PricePerUnitNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    id: string;
    fileName: string;
    fileType: FileType;
}
interface VariantDigitalPropertiesNonNullableFields {
    digitalFile?: SecuredMediaNonNullableFields;
}
interface OptionChoiceIdsNonNullableFields {
    optionId: string;
    choiceId: string;
}
interface OptionChoiceNamesNonNullableFields {
    optionName: string;
    choiceName: string;
    renderType: ProductOptionRenderType;
}
interface OptionChoiceNonNullableFields {
    optionChoiceIds?: OptionChoiceIdsNonNullableFields;
    optionChoiceNames?: OptionChoiceNamesNonNullableFields;
}
interface PriceInfoNonNullableFields {
    actualPrice?: FixedMonetaryAmountNonNullableFields;
    compareAtPrice?: FixedMonetaryAmountNonNullableFields;
}
interface RevenueDetailsNonNullableFields {
    cost?: FixedMonetaryAmountNonNullableFields;
    profit?: FixedMonetaryAmountNonNullableFields;
    profitMargin: number;
}
interface SubscriptionPricePerUnitNonNullableFields {
    value: string;
}
interface SubscriptionPriceNonNullableFields {
    subscriptionId: string;
    price?: FixedMonetaryAmountNonNullableFields;
    pricePerUnit?: SubscriptionPricePerUnitNonNullableFields;
}
interface SubscriptionPricesInfoNonNullableFields {
    subscriptionPrices: SubscriptionPriceNonNullableFields[];
}
interface InventoryStatusNonNullableFields {
    inStock: boolean;
    preorderEnabled: boolean;
}
interface VariantNonNullableFields {
    physicalProperties?: VariantPhysicalPropertiesNonNullableFields;
    digitalProperties?: VariantDigitalPropertiesNonNullableFields;
    choices: OptionChoiceNonNullableFields[];
    price?: PriceInfoNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
    media?: ProductMediaNonNullableFields;
    subscriptionPricesInfo?: SubscriptionPricesInfoNonNullableFields;
    inventoryStatus?: InventoryStatusNonNullableFields;
}
interface VariantsInfoNonNullableFields {
    variants: VariantNonNullableFields[];
}
interface SubscriptionDiscountNonNullableFields {
    amountOff: string;
    percentOff: number;
    type: DiscountType;
}
interface SubscriptionNonNullableFields {
    autoRenewal: boolean;
    billingCycles: number;
    title: string;
    frequency: SubscriptionFrequency;
    discount?: SubscriptionDiscountNonNullableFields;
}
interface SubscriptionDetailsNonNullableFields {
    subscriptions: SubscriptionNonNullableFields[];
}
interface VariantSummaryNonNullableFields {
    variantCount: number;
}
interface MinVariantPriceInfoNonNullableFields {
    minSubscriptionPrice?: FixedMonetaryAmountNonNullableFields;
    pricePerUnitData?: PricePerUnitNonNullableFields;
    revenueDetails?: RevenueDetailsNonNullableFields;
    actualPrice?: FixedMonetaryAmountNonNullableFields;
    compareAtPrice?: FixedMonetaryAmountNonNullableFields;
}
interface V3ProductNonNullableFields {
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    numericId: string;
    url?: PageUrlV2NonNullableFields;
    description?: RichContentNonNullableFields;
    media?: MediaNonNullableFields;
    seoData?: SeoSchemaNonNullableFields;
    options: ConnectedOptionNonNullableFields[];
    modifiers: ConnectedModifierNonNullableFields[];
    infoSections: InfoSectionNonNullableFields[];
    directCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    allCategoriesInfo?: ProductCategoriesInfoNonNullableFields;
    directCategoryIdsInfo?: ProductCategoryIdsInfoNonNullableFields;
    costRange?: PriceRangeNonNullableFields;
    inventory?: InventoryNonNullableFields;
    productType: ProductType;
    breadcrumbsInfo?: BreadcrumbsInfoNonNullableFields;
    actualPriceRange?: PriceRangeNonNullableFields;
    compareAtPriceRange?: PriceRangeNonNullableFields;
    variantsInfo?: VariantsInfoNonNullableFields;
    subscriptionDetails?: SubscriptionDetailsNonNullableFields;
    flattenOptions: string[];
    flattenModifiers: string[];
    variantSummary?: VariantSummaryNonNullableFields;
    minVariantPriceInfo?: MinVariantPriceInfoNonNullableFields;
}
export interface CreateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface ProductNonNullableFields {
    directCategoryIds: string[];
}
interface InventoryItemNonNullableFields {
    inStock: boolean;
    quantity: number;
    variantId: string;
    productId: string;
    trackQuantity: boolean;
    availabilityStatus: AvailabilityStatus;
    product?: ProductNonNullableFields;
}
interface BulkInventoryItemResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: InventoryItemNonNullableFields;
}
interface CommonBulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
interface BulkInventoryItemResultsNonNullableFields {
    results: BulkInventoryItemResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
    error?: ApplicationErrorNonNullableFields;
}
export interface CreateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
export interface UpdateProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
export interface UpdateProductWithInventoryResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
interface WixCommonItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface CatalogV3BulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
    item?: V3ProductNonNullableFields;
}
export interface BulkCreateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
interface BulkProductResultsNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
export interface BulkCreateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
export interface BulkUpdateProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
export interface BulkUpdateProductsWithInventoryResponseNonNullableFields {
    productResults?: BulkProductResultsNonNullableFields;
    inventoryResults?: BulkInventoryItemResultsNonNullableFields;
}
export interface V3BulkUpdateProductsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3UpdateExtendedFieldsResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface BulkDeleteProductsResponseBulkProductResultNonNullableFields {
    itemMetadata?: WixCommonItemMetadataNonNullableFields;
}
export interface V3BulkDeleteProductsResponseNonNullableFields {
    results: BulkDeleteProductsResponseBulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
export interface V3BulkDeleteProductsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3GetProductResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
export interface V3GetProductBySlugResponseNonNullableFields {
    product?: V3ProductNonNullableFields;
}
interface ValueResultsValueAggregationResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsValueResultsNonNullableFields {
    results: ValueResultsValueAggregationResultNonNullableFields[];
}
interface RangeResultsRangeAggregationResultNonNullableFields {
    count: number;
}
interface AggregationResultsRangeResultsNonNullableFields {
    results: RangeResultsRangeAggregationResultNonNullableFields[];
}
interface AggregationDataAggregationResultsScalarResultNonNullableFields {
    type: WixCommonScalarType;
    value: number;
}
interface AggregationResultsNestedAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface GroupByValueResultsNestedValueAggregationResultNonNullableFields {
    value: string;
    nestedResults?: AggregationResultsNestedAggregationResultsNonNullableFields;
}
interface AggregationResultsGroupByValueResultsNonNullableFields {
    results: GroupByValueResultsNestedValueAggregationResultNonNullableFields[];
}
interface DateHistogramResultsDateHistogramResultNonNullableFields {
    value: string;
    count: number;
}
interface AggregationResultsDateHistogramResultsNonNullableFields {
    results: DateHistogramResultsDateHistogramResultNonNullableFields[];
}
interface AggregationDataAggregationResultsNonNullableFields {
    values?: AggregationResultsValueResultsNonNullableFields;
    ranges?: AggregationResultsRangeResultsNonNullableFields;
    scalar?: AggregationDataAggregationResultsScalarResultNonNullableFields;
    groupedByValue?: AggregationResultsGroupByValueResultsNonNullableFields;
    dateHistogram?: AggregationResultsDateHistogramResultsNonNullableFields;
    name: string;
    type: WixCommonAggregationType;
    fieldPath: string;
}
interface CommonAggregationDataNonNullableFields {
    results: AggregationDataAggregationResultsNonNullableFields[];
}
export interface V3SearchProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
    aggregationData?: CommonAggregationDataNonNullableFields;
}
export interface V3QueryProductsResponseNonNullableFields {
    products: V3ProductNonNullableFields[];
}
export interface V3CountProductsResponseNonNullableFields {
    count: number;
}
export interface BulkUpdateProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3BulkAdjustProductVariantsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3BulkAddInfoSectionsToProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
export interface V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields {
    jobId: string;
}
export interface V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields {
    results: CatalogV3BulkProductResultNonNullableFields[];
    bulkActionMetadata?: CommonBulkActionMetadataNonNullableFields;
}
export interface BulkAddProductsToCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}
export interface BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields {
    jobId: string;
}
export {};
