import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates a new product.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 */
export declare function createProduct(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a new product, and can create the product's inventory in the variants' default locations.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 */
export declare function createProductWithInventory(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a product.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + If `variantsInfo.variants` are passed, they will replace all existing variants.
 * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 */
export declare function updateProduct(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a new product, and can update the product's inventory.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + Passing `variantsInfo.variants` will replace all existing variants.
 * > + To update existing `variantsInfo.variants`, pass `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 */
export declare function updateProductWithInventory(payload: object): RequestOptionsFactory<any>;
/**
 * Creates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 */
export declare function bulkCreateProducts(payload: object): RequestOptionsFactory<any>;
/**
 * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 */
export declare function bulkCreateProductsWithInventory(payload: object): RequestOptionsFactory<any>;
/**
 * Updates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 */
export declare function bulkUpdateProducts(payload: object): RequestOptionsFactory<any>;
/**
 * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 */
export declare function bulkUpdateProductsWithInventory(payload: object): RequestOptionsFactory<any>;
/**
 * Updates multiple products, given the provided filter.
 *
 * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
 *
 * > **Note:**
 * > The following fields cannot be updated with this endpoint:
 * > + `slug`
 * > + `options`
 * > + `modifiers`
 * > + `variantsInfo`
 * >
 * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
 */
export declare function bulkUpdateProductsByFilter(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a product's extended fields.
 *
 * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must first be configured in the app dashboard.
 */
export declare function updateExtendedFields(payload: object): RequestOptionsFactory<any>;
/** Deletes a product and all its variants. */
export declare function deleteProduct(payload: object): RequestOptionsFactory<any>;
/** Deletes multiple products. */
export declare function bulkDeleteProducts(payload: object): RequestOptionsFactory<any>;
/** Delete multiple products, given the provided filter. */
export declare function bulkDeleteProductsByFilter(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a product.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 */
export declare function getProduct(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a product by slug.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 */
export declare function getProductBySlug(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 *
 * > **Notes:**
 * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
 * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 */
export declare function searchProducts(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 *
 * > **Notes:**
 * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
 * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 */
export declare function queryProducts(payload: object): RequestOptionsFactory<any>;
/** Counts the number of products that match the provided filtering. */
export declare function countProducts(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a variant of multiple products, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be updated:
 * + `visible`
 * + `price`
 * + `revenueDetails.cost`
 * + `physicalOptions`
 */
export declare function bulkUpdateProductVariantsByFilter(payload: object): RequestOptionsFactory<any>;
/**
 * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be increased/decreased by amount or percentage:
 * + `compareAtPrice`
 * + `actualPrice`
 * + `cost`
 * + `compareAtPriceDiscount`
 */
export declare function bulkAdjustProductVariantsByFilter(payload: object): RequestOptionsFactory<any>;
/** Adds info sections to multiple products, given the provided filter and search expression. */
export declare function bulkAddInfoSectionsToProductsByFilter(payload: object): RequestOptionsFactory<any>;
/** Adds info sections to multiple products. */
export declare function bulkAddInfoSectionsToProducts(payload: object): RequestOptionsFactory<any>;
/** Removes info sections from multiple products, given the provided filter and search expression. */
export declare function bulkRemoveInfoSectionsFromProductsByFilter(payload: object): RequestOptionsFactory<any>;
/** Removes info sections from multiple products. */
export declare function bulkRemoveInfoSectionsFromProducts(payload: object): RequestOptionsFactory<any>;
/**
 * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 */
export declare function bulkAddProductsToCategoriesByFilter(payload: object): RequestOptionsFactory<any>;
/**
 * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 */
export declare function bulkRemoveProductsFromCategoriesByFilter(payload: object): RequestOptionsFactory<any>;
