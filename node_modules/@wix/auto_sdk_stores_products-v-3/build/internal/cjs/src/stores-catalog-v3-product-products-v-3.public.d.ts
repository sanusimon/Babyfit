import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { BulkAddInfoSectionsToProductsByFilterOptions, BulkAddInfoSectionsToProductsOptions, BulkAddProductsToCategoriesByFilterOptions, BulkAddProductsToCategoriesByFilterResponse, BulkAddProductsToCategoriesByFilterResponseNonNullableFields, BulkAdjustProductVariantsByFilterOptions, BulkCreateProductsOptions, BulkCreateProductsResponse, BulkCreateProductsResponseNonNullableFields, BulkCreateProductsWithInventoryOptions, BulkCreateProductsWithInventoryResponse, BulkCreateProductsWithInventoryResponseNonNullableFields, BulkDeleteProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsOptions, BulkRemoveProductsFromCategoriesByFilterOptions, BulkRemoveProductsFromCategoriesByFilterResponse, BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields, BulkUpdateProductVariantsByFilterOptions, BulkUpdateProductVariantsByFilterResponse, BulkUpdateProductVariantsByFilterResponseNonNullableFields, BulkUpdateProductsByFilterOptions, BulkUpdateProductsOptions, BulkUpdateProductsResponse, BulkUpdateProductsResponseNonNullableFields, BulkUpdateProductsWithInventoryOptions, BulkUpdateProductsWithInventoryResponse, BulkUpdateProductsWithInventoryResponseNonNullableFields, CountProductsOptions, CreateProductOptions, CreateProductWithInventoryOptions, CreateProductWithInventoryResponse, CreateProductWithInventoryResponseNonNullableFields, GetProductBySlugOptions, GetProductOptions, MaskedProductWithInventory, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductUpdatedEnvelope, ProductWithInventory, ProductsQueryBuilder, QueryProductsOptions, SearchProductsOptions, UpdateExtendedFieldsOptions, UpdateProduct, UpdateProductOptions, UpdateProductWithInventoryOptions, UpdateProductWithInventoryProduct, UpdateProductWithInventoryResponse, UpdateProductWithInventoryResponseNonNullableFields, V3BulkAddInfoSectionsToProductsByFilterResponse, V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields, V3BulkAddInfoSectionsToProductsResponse, V3BulkAddInfoSectionsToProductsResponseNonNullableFields, V3BulkAdjustProductVariantsByFilterResponse, V3BulkAdjustProductVariantsByFilterResponseNonNullableFields, V3BulkDeleteProductsByFilterResponse, V3BulkDeleteProductsByFilterResponseNonNullableFields, V3BulkDeleteProductsResponse, V3BulkDeleteProductsResponseNonNullableFields, V3BulkRemoveInfoSectionsFromProductsByFilterResponse, V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields, V3BulkRemoveInfoSectionsFromProductsResponse, V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields, V3BulkUpdateProductsByFilterResponse, V3BulkUpdateProductsByFilterResponseNonNullableFields, V3CountProductsResponse, V3CountProductsResponseNonNullableFields, V3GetProductBySlugResponse, V3GetProductBySlugResponseNonNullableFields, V3MaskedProduct, V3Product, V3ProductIdWithRevision, V3ProductNonNullableFields, V3SearchProductsResponse, V3SearchProductsResponseNonNullableFields, V3UpdateExtendedFieldsResponse, V3UpdateExtendedFieldsResponseNonNullableFields } from './stores-catalog-v3-product-products-v-3.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createProduct(httpClient: HttpClient): CreateProductSignature;
interface CreateProductSignature {
    /**
     * Creates a new product.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create.
     *
     * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     * @returns Created product.
     */
    (product: V3Product, options?: CreateProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
export declare function createProductWithInventory(httpClient: HttpClient): CreateProductWithInventorySignature;
interface CreateProductWithInventorySignature {
    /**
     * Creates a new product, and can create the product's inventory in the variants' default locations.
     *
     * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
     * @param - Product to create with inventory.
     *
     * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
     * If `options` is empty one default variant must be provided with empty `choices` list.
     */
    (product: ProductWithInventory, options?: CreateProductWithInventoryOptions | undefined): Promise<CreateProductWithInventoryResponse & CreateProductWithInventoryResponseNonNullableFields>;
}
export declare function updateProduct(httpClient: HttpClient): UpdateProductSignature;
interface UpdateProductSignature {
    /**
     * Updates a product.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + If `variantsInfo.variants` are passed, they will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     * @returns Updated product.
     */
    (_id: string | null, product: UpdateProduct, options?: UpdateProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
export declare function updateProductWithInventory(httpClient: HttpClient): UpdateProductWithInventorySignature;
interface UpdateProductWithInventorySignature {
    /**
     * Updates a new product, and can update the product's inventory.
     *
     * Each time the product is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the product.
     * This ensures you're working with the latest product and prevents unintended overwrites.
     *
     * >**Notes:**
     * > + Passing `variantsInfo.variants` will replace all existing variants.
     * > + To update existing `variantsInfo.variants`, pass `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
     * @param - Product ID.
     */
    (_id: string | null, product: UpdateProductWithInventoryProduct, options?: UpdateProductWithInventoryOptions | undefined): Promise<UpdateProductWithInventoryResponse & UpdateProductWithInventoryResponseNonNullableFields>;
}
export declare function bulkCreateProducts(httpClient: HttpClient): BulkCreateProductsSignature;
interface BulkCreateProductsSignature {
    /**
     * Creates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create.
     */
    (products: V3Product[], options?: BulkCreateProductsOptions | undefined): Promise<BulkCreateProductsResponse & BulkCreateProductsResponseNonNullableFields>;
}
export declare function bulkCreateProductsWithInventory(httpClient: HttpClient): BulkCreateProductsWithInventorySignature;
interface BulkCreateProductsWithInventorySignature {
    /**
     * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of creatable entities in a single request.
     * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to create with inventory.
     */
    (products: ProductWithInventory[], options?: BulkCreateProductsWithInventoryOptions | undefined): Promise<BulkCreateProductsWithInventoryResponse & BulkCreateProductsWithInventoryResponseNonNullableFields>;
}
export declare function bulkUpdateProducts(httpClient: HttpClient): BulkUpdateProductsSignature;
interface BulkUpdateProductsSignature {
    /**
     * Updates up to 100 products.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: V3MaskedProduct[], options?: BulkUpdateProductsOptions | undefined): Promise<BulkUpdateProductsResponse & BulkUpdateProductsResponseNonNullableFields>;
}
export declare function bulkUpdateProductsWithInventory(httpClient: HttpClient): BulkUpdateProductsWithInventorySignature;
interface BulkUpdateProductsWithInventorySignature {
    /**
     * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
     *
     * >**Note:**
     * > The following limits apply to the total number of updatable entities in a single request.
     * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
     * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
     * > + `options`: 100
     * > + `modifiers`: 100
     * > + `infoSections`: 100
     * > + `variantsInfo.variants`: 1000
     * @param - List of products to update.
     */
    (products: MaskedProductWithInventory[], options?: BulkUpdateProductsWithInventoryOptions | undefined): Promise<BulkUpdateProductsWithInventoryResponse & BulkUpdateProductsWithInventoryResponseNonNullableFields>;
}
export declare function bulkUpdateProductsByFilter(httpClient: HttpClient): BulkUpdateProductsByFilterSignature;
interface BulkUpdateProductsByFilterSignature {
    /**
     * Updates multiple products, given the provided filter.
     *
     * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
     *
     * > **Note:**
     * > The following fields cannot be updated with this endpoint:
     * > + `slug`
     * > + `options`
     * > + `modifiers`
     * > + `variantsInfo`
     * >
     * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
     */
    (options?: BulkUpdateProductsByFilterOptions | undefined): Promise<V3BulkUpdateProductsByFilterResponse & V3BulkUpdateProductsByFilterResponseNonNullableFields>;
}
export declare function updateExtendedFields(httpClient: HttpClient): UpdateExtendedFieldsSignature;
interface UpdateExtendedFieldsSignature {
    /**
     * Updates a product's extended fields.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must first be configured in the app dashboard.
     * @param - Product ID.
     * @param - App namespace.
     */
    (productId: string, namespace: string, options?: UpdateExtendedFieldsOptions | undefined): Promise<V3UpdateExtendedFieldsResponse & V3UpdateExtendedFieldsResponseNonNullableFields>;
}
export declare function deleteProduct(httpClient: HttpClient): DeleteProductSignature;
interface DeleteProductSignature {
    /**
     * Deletes a product and all its variants.
     * @param - Product ID.
     */
    (productId: string): Promise<void>;
}
export declare function bulkDeleteProducts(httpClient: HttpClient): BulkDeleteProductsSignature;
interface BulkDeleteProductsSignature {
    /**
     * Deletes multiple products.
     * @param - IDs of products to delete.
     */
    (productIds: string[]): Promise<V3BulkDeleteProductsResponse & V3BulkDeleteProductsResponseNonNullableFields>;
}
export declare function bulkDeleteProductsByFilter(httpClient: HttpClient): BulkDeleteProductsByFilterSignature;
interface BulkDeleteProductsByFilterSignature {
    /**
     * Delete multiple products, given the provided filter.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkDeleteProductsByFilterOptions | undefined): Promise<V3BulkDeleteProductsByFilterResponse & V3BulkDeleteProductsByFilterResponseNonNullableFields>;
}
export declare function getProduct(httpClient: HttpClient): GetProductSignature;
interface GetProductSignature {
    /**
     * Retrieves a product.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product ID.
     * @returns Product.
     */
    (productId: string, options?: GetProductOptions | undefined): Promise<V3Product & V3ProductNonNullableFields>;
}
export declare function getProductBySlug(httpClient: HttpClient): GetProductBySlugSignature;
interface GetProductBySlugSignature {
    /**
     * Retrieves a product by slug.
     *
     * > **Note:**
     * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     * @param - Product slug.
     */
    (slug: string, options?: GetProductBySlugOptions | undefined): Promise<V3GetProductBySlugResponse & V3GetProductBySlugResponseNonNullableFields>;
}
export declare function searchProducts(httpClient: HttpClient): SearchProductsSignature;
interface SearchProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Search_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: SearchProductsOptions | undefined): Promise<V3SearchProductsResponse & V3SearchProductsResponseNonNullableFields>;
}
export declare function queryProducts(httpClient: HttpClient): QueryProductsSignature;
interface QueryProductsSignature {
    /**
     * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
     * Pass supported values to the `fields` array in the request to include those fields in the response.
     *
     * To learn about working with _Query_ endpoints, see
     * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
     * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     *
     * > **Notes:**
     * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
     * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
     */
    (options?: QueryProductsOptions | undefined): ProductsQueryBuilder;
}
export declare function countProducts(httpClient: HttpClient): CountProductsSignature;
interface CountProductsSignature {
    /**
     * Counts the number of products that match the provided filtering.
     */
    (options?: CountProductsOptions | undefined): Promise<V3CountProductsResponse & V3CountProductsResponseNonNullableFields>;
}
export declare function bulkUpdateProductVariantsByFilter(httpClient: HttpClient): BulkUpdateProductVariantsByFilterSignature;
interface BulkUpdateProductVariantsByFilterSignature {
    /**
     * Updates a variant of multiple products, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be updated:
     * + `visible`
     * + `price`
     * + `revenueDetails.cost`
     * + `physicalOptions`
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkUpdateProductVariantsByFilterOptions | undefined): Promise<BulkUpdateProductVariantsByFilterResponse & BulkUpdateProductVariantsByFilterResponseNonNullableFields>;
}
export declare function bulkAdjustProductVariantsByFilter(httpClient: HttpClient): BulkAdjustProductVariantsByFilterSignature;
interface BulkAdjustProductVariantsByFilterSignature {
    /**
     * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
     *
     *
     * Only the following variant fields can be increased/decreased by amount or percentage:
     * + `compareAtPrice`
     * + `actualPrice`
     * + `cost`
     * + `compareAtPriceDiscount`
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkAdjustProductVariantsByFilterOptions | undefined): Promise<V3BulkAdjustProductVariantsByFilterResponse & V3BulkAdjustProductVariantsByFilterResponseNonNullableFields>;
}
export declare function bulkAddInfoSectionsToProductsByFilter(httpClient: HttpClient): BulkAddInfoSectionsToProductsByFilterSignature;
interface BulkAddInfoSectionsToProductsByFilterSignature {
    /**
     * Adds info sections to multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkAddInfoSectionsToProductsByFilterOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsByFilterResponse & V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields>;
}
export declare function bulkAddInfoSectionsToProducts(httpClient: HttpClient): BulkAddInfoSectionsToProductsSignature;
interface BulkAddInfoSectionsToProductsSignature {
    /**
     * Adds info sections to multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkAddInfoSectionsToProductsOptions | undefined): Promise<V3BulkAddInfoSectionsToProductsResponse & V3BulkAddInfoSectionsToProductsResponseNonNullableFields>;
}
export declare function bulkRemoveInfoSectionsFromProductsByFilter(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsByFilterSignature;
interface BulkRemoveInfoSectionsFromProductsByFilterSignature {
    /**
     * Removes info sections from multiple products, given the provided filter and search expression.
     * @param - Filter object.
     */
    (filter: Record<string, any> | null, options?: BulkRemoveInfoSectionsFromProductsByFilterOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsByFilterResponse & V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields>;
}
export declare function bulkRemoveInfoSectionsFromProducts(httpClient: HttpClient): BulkRemoveInfoSectionsFromProductsSignature;
interface BulkRemoveInfoSectionsFromProductsSignature {
    /**
     * Removes info sections from multiple products.
     * @param - List of product IDs and revisions.
     */
    (products: V3ProductIdWithRevision[], options?: BulkRemoveInfoSectionsFromProductsOptions | undefined): Promise<V3BulkRemoveInfoSectionsFromProductsResponse & V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields>;
}
export declare function bulkAddProductsToCategoriesByFilter(httpClient: HttpClient): BulkAddProductsToCategoriesByFilterSignature;
interface BulkAddProductsToCategoriesByFilterSignature {
    /**
     * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkAddProductsToCategoriesByFilterOptions | undefined): Promise<BulkAddProductsToCategoriesByFilterResponse & BulkAddProductsToCategoriesByFilterResponseNonNullableFields>;
}
export declare function bulkRemoveProductsFromCategoriesByFilter(httpClient: HttpClient): BulkRemoveProductsFromCategoriesByFilterSignature;
interface BulkRemoveProductsFromCategoriesByFilterSignature {
    /**
     * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
     *
     * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
     */
    (options?: BulkRemoveProductsFromCategoriesByFilterOptions | undefined): Promise<BulkRemoveProductsFromCategoriesByFilterResponse & BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields>;
}
export declare const onProductCreated: EventDefinition<ProductCreatedEnvelope, "wix.stores.catalog.v3.product_created">;
export declare const onProductDeleted: EventDefinition<ProductDeletedEnvelope, "wix.stores.catalog.v3.product_deleted">;
export declare const onProductUpdated: EventDefinition<ProductUpdatedEnvelope, "wix.stores.catalog.v3.product_updated">;
export { ActionEvent, AdjustValue, AdjustValueAdjustValueOneOf, Aggregation, AggregationData, AggregationDataAggregationResults, AggregationDataAggregationResultsResultOneOf, AggregationDataAggregationResultsScalarResult, AggregationDateHistogramAggregation, AggregationDateHistogramAggregationInterval, AggregationKindOneOf, AggregationNestedAggregation, AggregationNestedAggregationNestedAggregationItem, AggregationNestedAggregationNestedAggregationItemKindOneOf, AggregationNestedAggregationNestedAggregationType, AggregationRangeAggregation, AggregationRangeAggregationRangeBucket, AggregationResults, AggregationResultsDateHistogramResults, AggregationResultsGroupByValueResults, AggregationResultsNestedAggregationResults, AggregationResultsNestedAggregationResultsResultOneOf, AggregationResultsNestedResults, AggregationResultsRangeResults, AggregationResultsResultOneOf, AggregationResultsScalarResult, AggregationResultsValueResults, AggregationScalarAggregation, AggregationType, AggregationValueAggregation, AggregationValueAggregationIncludeMissingValuesOptions, AggregationValueAggregationMissingValues, AggregationValueAggregationOptionsOneOf, AggregationValueAggregationSortDirection, AggregationValueAggregationSortType, Alignment, AnchorData, App, AppEmbedData, AppEmbedDataAppDataOneOf, AppType, ApplicationError, AudioData, AvailabilityStatus, Background, BackgroundBackgroundOneOf, BackgroundType, BaseEventMetadata, BlockquoteData, BookingData, Border, BorderColors, Brand, BreadCrumb, BreadcrumbsInfo, BulkActionMetadata, BulkAddInfoSectionsToProductsByFilterOptions, BulkAddInfoSectionsToProductsByFilterRequest, BulkAddInfoSectionsToProductsByFilterResponse, BulkAddInfoSectionsToProductsOptions, BulkAddInfoSectionsToProductsRequest, BulkAddInfoSectionsToProductsResponse, BulkAddProductsToCategoriesByFilterOptions, BulkAddProductsToCategoriesByFilterRequest, BulkAddProductsToCategoriesByFilterResponse, BulkAddProductsToCategoriesByFilterResponseNonNullableFields, BulkAdjustProductVariantsByFilterOptions, BulkAdjustProductVariantsByFilterRequest, BulkAdjustProductVariantsByFilterRequestRoundingStrategy, BulkAdjustProductVariantsByFilterResponse, BulkCreateProductsOptions, BulkCreateProductsRequest, BulkCreateProductsResponse, BulkCreateProductsResponseNonNullableFields, BulkCreateProductsWithInventoryOptions, BulkCreateProductsWithInventoryRequest, BulkCreateProductsWithInventoryResponse, BulkCreateProductsWithInventoryResponseNonNullableFields, BulkDeleteProductsByFilterOptions, BulkDeleteProductsByFilterRequest, BulkDeleteProductsByFilterResponse, BulkDeleteProductsRequest, BulkDeleteProductsResponse, BulkDeleteProductsResponseBulkProductResult, BulkInventoryItemAction, BulkInventoryItemResult, BulkInventoryItemResults, BulkProductResult, BulkProductResults, BulkRemoveInfoSectionsFromProductsByFilterOptions, BulkRemoveInfoSectionsFromProductsByFilterRequest, BulkRemoveInfoSectionsFromProductsByFilterResponse, BulkRemoveInfoSectionsFromProductsOptions, BulkRemoveInfoSectionsFromProductsRequest, BulkRemoveInfoSectionsFromProductsResponse, BulkRemoveProductsFromCategoriesByFilterOptions, BulkRemoveProductsFromCategoriesByFilterRequest, BulkRemoveProductsFromCategoriesByFilterResponse, BulkRemoveProductsFromCategoriesByFilterResponseNonNullableFields, BulkUpdateProductVariantsByFilterOptions, BulkUpdateProductVariantsByFilterRequest, BulkUpdateProductVariantsByFilterResponse, BulkUpdateProductVariantsByFilterResponseNonNullableFields, BulkUpdateProductsByFilterOptions, BulkUpdateProductsByFilterRequest, BulkUpdateProductsByFilterResponse, BulkUpdateProductsOptions, BulkUpdateProductsRequest, BulkUpdateProductsResponse, BulkUpdateProductsResponseNonNullableFields, BulkUpdateProductsWithInventoryOptions, BulkUpdateProductsWithInventoryRequest, BulkUpdateProductsWithInventoryResponse, BulkUpdateProductsWithInventoryResponseNonNullableFields, BulkUpdateVariantsByFilterRequest, BulkUpdateVariantsByFilterResponse, BulletedListData, ButtonData, CaptionData, CatalogV3BulkProductResult, CellStyle, ChoiceType, ChoicesSettings, CodeBlockData, CollapsibleListData, ColorData, Colors, CommonAggregation, CommonAggregationData, CommonAggregationDateHistogramAggregation, CommonAggregationKindOneOf, CommonAggregationNestedAggregation, CommonAggregationRangeAggregation, CommonAggregationScalarAggregation, CommonAggregationType, CommonAggregationValueAggregation, CommonAggregationValueAggregationOptionsOneOf, CommonBulkActionMetadata, CommonCursorPaging, CommonCursorPagingMetadata, CommonCursorQuery, CommonCursorQueryPagingMethodOneOf, CommonCursorSearch, CommonCursorSearchPagingMethodOneOf, CommonCursors, CommonItemMetadata, CommonScalarType, CommonSearchDetails, CommonSearchDetailsMode, CommonSortOrder, CommonSorting, ConnectedModifier, ConnectedModifierChoice, ConnectedModifierChoiceValueOneOf, ConnectedModifierModifierSettingsOneOf, ConnectedOption, ConnectedOptionChoice, ConnectedOptionChoiceValueOneOf, ConnectedOptionOptionSettingsOneOf, CountProductsOptions, CountProductsRequest, CountProductsResponse, CreateProductOptions, CreateProductRequest, CreateProductResponse, CreateProductResponseNonNullableFields, CreateProductWithInventoryOptions, CreateProductWithInventoryRequest, CreateProductWithInventoryResponse, CreateProductWithInventoryResponseNonNullableFields, Crop, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, CursorSearch, CursorSearchPagingMethodOneOf, Cursors, DateHistogramAggregation, DateHistogramAggregationInterval, DateHistogramResult, DateHistogramResults, DateHistogramResultsDateHistogramResult, Decoration, DecorationDataOneOf, DecorationType, DeleteByFilterOperation, DeleteByIdsOperation, DeleteProductRequest, DeleteProductResponse, DeprecatedSearchProductsWithOffsetRequest, DeprecatedSearchProductsWithOffsetResponse, Design, Dimensions, Direction, DiscountType, DividerData, DoNotCallBulkCreateProductsRequest, DoNotCallBulkCreateProductsResponse, DoNotCallBulkUpdateProductsRequest, DoNotCallBulkUpdateProductsResponse, DoNotCallCreateProductRequest, DoNotCallCreateProductResponse, DoNotCallUpdateProductRequest, DoNotCallUpdateProductResponse, DocumentImage, DocumentPayload, DocumentStyle, DocumentUpdateOperation, DomainEvent, DomainEventBodyOneOf, DuplicateMediaIdAssignedToProduct, EmbedData, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, Enum, EventData, EventMetadata, EventuallyConsistentQueryProductsRequest, EventuallyConsistentQueryProductsResponse, ExtendedFields, File, FileData, FileSource, FileSourceDataOneOf, FileType, FixedMonetaryAmount, FontSizeData, FontType, FreeTextSettings, FulfillerDeleted, GIF, GIFData, GIFType, GalleryData, GalleryOptions, GetProductBySlugOptions, GetProductBySlugRequest, GetProductBySlugResponse, GetProductOptions, GetProductRequest, GetProductResponse, Gradient, GroupByAggregation, GroupByAggregationKindOneOf, GroupByValueResults, GroupByValueResultsNestedValueAggregationResult, HTMLData, HTMLDataDataOneOf, HeadingData, Height, IdentificationData, IdentificationDataIdOneOf, Image, ImageData, IncludeMissingValuesOptions, IndexDocument, InfoSection, InitialExpandedItems, Interval, InvalidDigitalFileIds, InvalidateCache, InvalidateCacheGetByOneOf, Inventory, InventoryAvailabilityStatus, InventoryItem, InventoryItemComposite, InventoryItemCompositeTrackingMethodOneOf, InventoryItemTrackingMethodOneOf, InventoryStatus, Item, ItemDataOneOf, ItemMetadata, ItemStyle, Keyword, Layout, LayoutCellData, LayoutType, LineStyle, Link, LinkData, LinkDataOneOf, LinkPreviewData, ListValue, MapData, MapSettings, MapType, MaskedProduct, MaskedProductWithInventory, MeasurementUnit, Media, MediaItemsInfo, MediaType, MentionData, MessageEnvelope, Metadata, MinVariantPriceInfo, MissingValues, Mode, ModifierChoicesSettings, ModifierRenderType, MultipleColors, NestedAggregation, NestedAggregationItem, NestedAggregationItemKindOneOf, NestedAggregationNestedAggregationItem, NestedAggregationNestedAggregationItemKindOneOf, NestedAggregationNestedAggregationType, NestedAggregationResults, NestedAggregationResultsResultOneOf, NestedAggregationType, NestedResultValue, NestedResultValueResultOneOf, NestedResults, NestedResultsNestedResultValue, NestedResultsNestedResultValueResultOneOf, NestedResultsRangeResult, NestedResultsResults, NestedResultsScalarResult, NestedResultsValueResult, NestedValueAggregationResult, Node, NodeDataOneOf, NodeStyle, NodeType, NullValue, Oembed, Option, OptionChoice, OptionChoiceIds, OptionChoiceNames, OptionChoiceReferences, OptionDesign, OptionLayout, OrderedListData, Orientation, PDFSettings, Page, PagingMetadata, ParagraphData, Permissions, PhysicalProperties, PlatformOffsetSearch, PlatformOffsetSearchPagingMethodOneOf, PlatformPaging, PlaybackOptions, PluginContainerData, PluginContainerDataAlignment, PluginContainerDataWidth, PluginContainerDataWidthDataOneOf, Poll, PollData, PollDataLayout, PollDesign, PollLayout, PollLayoutDirection, PollLayoutType, PollSettings, PreorderInfo, PreorderStatus, PriceInfo, PricePerUnit, PricePerUnitRange, PricePerUnitRangePricePerUnit, PricePerUnitSettings, PriceRange, Product, ProductCategoriesInfo, ProductCategory, ProductCategoryIdsInfo, ProductCreatedEnvelope, ProductDeletedEnvelope, ProductIdWithRevision, ProductMedia, ProductMediaMediaOneOf, ProductMediaSetByOneOf, ProductOptionRenderType, ProductPreorderAvailability, ProductType, ProductUpdatedEnvelope, ProductVariantIds, ProductVariants, ProductWithInventory, ProductWithInventoryTypedPropertiesOneOf, ProductsQueryBuilder, ProductsQueryResult, QueryProductsOptions, QueryProductsRequest, QueryProductsResponse, RangeAggregation, RangeAggregationRangeBucket, RangeAggregationResult, RangeBucket, RangeResult, RangeResults, RangeResultsRangeAggregationResult, Rel, RequestedFields, RestoreInfo, Results, RetrieveVariantsRequest, RetrieveVariantsResponse, RevenueDetails, Ribbon, RichContent, RoundingStrategy, ScalarAggregation, ScalarResult, ScalarType, SearchDetails, SearchDetailsMode, SearchIndexingNotification, SearchProductsOptions, SearchProductsRequest, SearchProductsResponse, SearchRelated, SearchRelatedDetails, SearchRelatedProductsRequest, SearchRelatedProductsResponse, SecuredMedia, SeoSchema, Settings, SingleEntityOpsRequestedFields, SortDirection, SortOrder, SortType, Sorting, Source, Spoiler, SpoilerData, State, Styles, Subscription, SubscriptionCyclesOneOf, SubscriptionDetails, SubscriptionDiscount, SubscriptionDiscountDiscountOneOf, SubscriptionFrequency, SubscriptionPrice, SubscriptionPricePerUnit, SubscriptionPricesInfo, TableCellData, TableData, Tag, Target, TextAlignment, TextData, TextNodeStyle, TextStyle, Thumbnail, Thumbnails, ThumbnailsAlignment, Type, URI, UnsignedAdjustValue, UnsignedAdjustValueAdjustValueOneOf, UnsupportedFieldMasks, UpdateByFilterOperation, UpdateDocumentsEvent, UpdateDocumentsEventOperationOneOf, UpdateExistingOperation, UpdateExtendedFieldsOptions, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse, UpdateProduct, UpdateProductOptions, UpdateProductRequest, UpdateProductResponse, UpdateProductResponseNonNullableFields, UpdateProductWithInventoryOptions, UpdateProductWithInventoryProduct, UpdateProductWithInventoryRequest, UpdateProductWithInventoryResponse, UpdateProductWithInventoryResponseNonNullableFields, V1Media, V3AdjustValue, V3AdjustValueAdjustValueOneOf, V3BulkAddInfoSectionsToProductsByFilterRequest, V3BulkAddInfoSectionsToProductsByFilterResponse, V3BulkAddInfoSectionsToProductsByFilterResponseNonNullableFields, V3BulkAddInfoSectionsToProductsRequest, V3BulkAddInfoSectionsToProductsResponse, V3BulkAddInfoSectionsToProductsResponseNonNullableFields, V3BulkAdjustProductVariantsByFilterRequest, V3BulkAdjustProductVariantsByFilterResponse, V3BulkAdjustProductVariantsByFilterResponseNonNullableFields, V3BulkDeleteProductsByFilterRequest, V3BulkDeleteProductsByFilterResponse, V3BulkDeleteProductsByFilterResponseNonNullableFields, V3BulkDeleteProductsRequest, V3BulkDeleteProductsResponse, V3BulkDeleteProductsResponseNonNullableFields, V3BulkProductResult, V3BulkRemoveInfoSectionsFromProductsByFilterRequest, V3BulkRemoveInfoSectionsFromProductsByFilterResponse, V3BulkRemoveInfoSectionsFromProductsByFilterResponseNonNullableFields, V3BulkRemoveInfoSectionsFromProductsRequest, V3BulkRemoveInfoSectionsFromProductsResponse, V3BulkRemoveInfoSectionsFromProductsResponseNonNullableFields, V3BulkUpdateProductsByFilterRequest, V3BulkUpdateProductsByFilterResponse, V3BulkUpdateProductsByFilterResponseNonNullableFields, V3CountProductsRequest, V3CountProductsResponse, V3CountProductsResponseNonNullableFields, V3DeleteProductRequest, V3DeleteProductResponse, V3GetProductBySlugRequest, V3GetProductBySlugResponse, V3GetProductBySlugResponseNonNullableFields, V3GetProductRequest, V3GetProductResponse, V3GetProductResponseNonNullableFields, V3MaskedProduct, V3OptionChoiceIds, V3OptionChoiceNames, V3Product, V3ProductIdWithRevision, V3ProductNonNullableFields, V3ProductTypedPropertiesOneOf, V3QueryProductsRequest, V3QueryProductsResponse, V3QueryProductsResponseNonNullableFields, V3SearchProductsRequest, V3SearchProductsResponse, V3SearchProductsResponseNonNullableFields, V3UnsignedAdjustValue, V3UnsignedAdjustValueAdjustValueOneOf, V3UpdateExtendedFieldsRequest, V3UpdateExtendedFieldsResponse, V3UpdateExtendedFieldsResponseNonNullableFields, V3VariantsInfo, ValueAggregation, ValueAggregationIncludeMissingValuesOptions, ValueAggregationMissingValues, ValueAggregationOptionsOneOf, ValueAggregationResult, ValueAggregationSortDirection, ValueAggregationSortType, ValueResult, ValueResults, ValueResultsValueAggregationResult, Variant, VariantDigitalProperties, VariantNotAlignedWithProduct, VariantPhysicalProperties, VariantSummary, VariantTypedPropertiesOneOf, VariantWithInventory, VariantWithInventoryTypedPropertiesOneOf, VariantsCursorPaging, VariantsInfo, VariantsNotAlignedWithProduct, VariantsOpsRequestedFields, VariantsRemoved, VerticalAlignment, Video, VideoData, VideoResolution, ViewMode, ViewRole, VoteRole, WebhookIdentityType, WeightMeasurementUnitInfo, WeightRange, WeightUnit, Width, WidthType, WixCommonAggregation, WixCommonAggregationKindOneOf, WixCommonAggregationType, WixCommonItemMetadata, WixCommonScalarType, WixCommonSearchDetails, WixCommonSortOrder, WixCommonSorting, } from './stores-catalog-v3-product-products-v-3.universal.js';
