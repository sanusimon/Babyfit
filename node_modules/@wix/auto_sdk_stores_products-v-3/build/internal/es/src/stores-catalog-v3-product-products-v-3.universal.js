import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixStoresCatalogV3Product from './stores-catalog-v3-product-products-v-3.http.js';
// @ts-ignore
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformSDKVideoV2ToRESTVideoV2 } from '@wix/sdk-runtime/transformations/video-v2';
import { transformRESTVideoV2ToSDKVideoV2 } from '@wix/sdk-runtime/transformations/video-v2';
import { transformSDKPageURLV2ToRESTPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var NodeType;
(function (NodeType) {
    NodeType["PARAGRAPH"] = "PARAGRAPH";
    NodeType["TEXT"] = "TEXT";
    NodeType["HEADING"] = "HEADING";
    NodeType["BULLETED_LIST"] = "BULLETED_LIST";
    NodeType["ORDERED_LIST"] = "ORDERED_LIST";
    NodeType["LIST_ITEM"] = "LIST_ITEM";
    NodeType["BLOCKQUOTE"] = "BLOCKQUOTE";
    NodeType["CODE_BLOCK"] = "CODE_BLOCK";
    NodeType["VIDEO"] = "VIDEO";
    NodeType["DIVIDER"] = "DIVIDER";
    NodeType["FILE"] = "FILE";
    NodeType["GALLERY"] = "GALLERY";
    NodeType["GIF"] = "GIF";
    NodeType["HTML"] = "HTML";
    NodeType["IMAGE"] = "IMAGE";
    NodeType["LINK_PREVIEW"] = "LINK_PREVIEW";
    /** @deprecated */
    NodeType["MAP"] = "MAP";
    NodeType["POLL"] = "POLL";
    NodeType["APP_EMBED"] = "APP_EMBED";
    NodeType["BUTTON"] = "BUTTON";
    NodeType["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
    NodeType["TABLE"] = "TABLE";
    NodeType["EMBED"] = "EMBED";
    NodeType["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
    NodeType["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
    NodeType["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
    NodeType["TABLE_CELL"] = "TABLE_CELL";
    NodeType["TABLE_ROW"] = "TABLE_ROW";
    NodeType["EXTERNAL"] = "EXTERNAL";
    NodeType["AUDIO"] = "AUDIO";
    NodeType["CAPTION"] = "CAPTION";
    NodeType["LAYOUT"] = "LAYOUT";
    NodeType["LAYOUT_CELL"] = "LAYOUT_CELL";
})(NodeType || (NodeType = {}));
export var WidthType;
(function (WidthType) {
    /** Width matches the content width */
    WidthType["CONTENT"] = "CONTENT";
    /** Small Width */
    WidthType["SMALL"] = "SMALL";
    /** Width will match the original asset width */
    WidthType["ORIGINAL"] = "ORIGINAL";
    /** coast-to-coast display */
    WidthType["FULL_WIDTH"] = "FULL_WIDTH";
})(WidthType || (WidthType = {}));
export var PluginContainerDataAlignment;
(function (PluginContainerDataAlignment) {
    /** Center Alignment */
    PluginContainerDataAlignment["CENTER"] = "CENTER";
    /** Left Alignment */
    PluginContainerDataAlignment["LEFT"] = "LEFT";
    /** Right Alignment */
    PluginContainerDataAlignment["RIGHT"] = "RIGHT";
})(PluginContainerDataAlignment || (PluginContainerDataAlignment = {}));
export var Type;
(function (Type) {
    /** Regular link button */
    Type["LINK"] = "LINK";
    /** Triggers custom action that is defined in plugin configuration by the consumer */
    Type["ACTION"] = "ACTION";
})(Type || (Type = {}));
export var Target;
(function (Target) {
    /** Opens the linked document in the same frame as it was clicked (this is default) */
    Target["SELF"] = "SELF";
    /** Opens the linked document in a new window or tab */
    Target["BLANK"] = "BLANK";
    /** Opens the linked document in the parent frame */
    Target["PARENT"] = "PARENT";
    /** Opens the linked document in the full body of the window */
    Target["TOP"] = "TOP";
})(Target || (Target = {}));
export var TextAlignment;
(function (TextAlignment) {
    /** browser default, eqivalent to `initial` */
    TextAlignment["AUTO"] = "AUTO";
    /** Left align */
    TextAlignment["LEFT"] = "LEFT";
    /** Right align */
    TextAlignment["RIGHT"] = "RIGHT";
    /** Center align */
    TextAlignment["CENTER"] = "CENTER";
    /** Text is spaced to line up its left and right edges to the left and right edges of the line box, except for the last line */
    TextAlignment["JUSTIFY"] = "JUSTIFY";
})(TextAlignment || (TextAlignment = {}));
export var LineStyle;
(function (LineStyle) {
    /** Single Line */
    LineStyle["SINGLE"] = "SINGLE";
    /** Double Line */
    LineStyle["DOUBLE"] = "DOUBLE";
    /** Dashed Line */
    LineStyle["DASHED"] = "DASHED";
    /** Dotted Line */
    LineStyle["DOTTED"] = "DOTTED";
})(LineStyle || (LineStyle = {}));
export var Width;
(function (Width) {
    /** Large line */
    Width["LARGE"] = "LARGE";
    /** Medium line */
    Width["MEDIUM"] = "MEDIUM";
    /** Small line */
    Width["SMALL"] = "SMALL";
})(Width || (Width = {}));
export var Alignment;
(function (Alignment) {
    /** Center alignment */
    Alignment["CENTER"] = "CENTER";
    /** Left alignment */
    Alignment["LEFT"] = "LEFT";
    /** Right alignment */
    Alignment["RIGHT"] = "RIGHT";
})(Alignment || (Alignment = {}));
export var ViewMode;
(function (ViewMode) {
    /** No PDF view */
    ViewMode["NONE"] = "NONE";
    /** Full PDF view */
    ViewMode["FULL"] = "FULL";
    /** Mini PDF view */
    ViewMode["MINI"] = "MINI";
})(ViewMode || (ViewMode = {}));
export var LayoutType;
(function (LayoutType) {
    /** Collage type */
    LayoutType["COLLAGE"] = "COLLAGE";
    /** Masonry type */
    LayoutType["MASONRY"] = "MASONRY";
    /** Grid type */
    LayoutType["GRID"] = "GRID";
    /** Thumbnail type */
    LayoutType["THUMBNAIL"] = "THUMBNAIL";
    /** Slider type */
    LayoutType["SLIDER"] = "SLIDER";
    /** Slideshow type */
    LayoutType["SLIDESHOW"] = "SLIDESHOW";
    /** Panorama type */
    LayoutType["PANORAMA"] = "PANORAMA";
    /** Column type */
    LayoutType["COLUMN"] = "COLUMN";
    /** Magic type */
    LayoutType["MAGIC"] = "MAGIC";
    /** Fullsize images type */
    LayoutType["FULLSIZE"] = "FULLSIZE";
})(LayoutType || (LayoutType = {}));
export var Orientation;
(function (Orientation) {
    /** Rows Orientation */
    Orientation["ROWS"] = "ROWS";
    /** Columns Orientation */
    Orientation["COLUMNS"] = "COLUMNS";
})(Orientation || (Orientation = {}));
export var Crop;
(function (Crop) {
    /** Crop to fill */
    Crop["FILL"] = "FILL";
    /** Crop to fit */
    Crop["FIT"] = "FIT";
})(Crop || (Crop = {}));
export var ThumbnailsAlignment;
(function (ThumbnailsAlignment) {
    /** Top alignment */
    ThumbnailsAlignment["TOP"] = "TOP";
    /** Right alignment */
    ThumbnailsAlignment["RIGHT"] = "RIGHT";
    /** Bottom alignment */
    ThumbnailsAlignment["BOTTOM"] = "BOTTOM";
    /** Left alignment */
    ThumbnailsAlignment["LEFT"] = "LEFT";
    /** No thumbnail */
    ThumbnailsAlignment["NONE"] = "NONE";
})(ThumbnailsAlignment || (ThumbnailsAlignment = {}));
export var GIFType;
(function (GIFType) {
    GIFType["NORMAL"] = "NORMAL";
    GIFType["STICKER"] = "STICKER";
})(GIFType || (GIFType = {}));
export var Source;
(function (Source) {
    Source["HTML"] = "HTML";
    Source["ADSENSE"] = "ADSENSE";
})(Source || (Source = {}));
export var MapType;
(function (MapType) {
    /** Roadmap map type */
    MapType["ROADMAP"] = "ROADMAP";
    /** Satellite map type */
    MapType["SATELITE"] = "SATELITE";
    /** Hybrid map type */
    MapType["HYBRID"] = "HYBRID";
    /** Terrain map type */
    MapType["TERRAIN"] = "TERRAIN";
})(MapType || (MapType = {}));
export var ViewRole;
(function (ViewRole) {
    /** Only Poll creator can view the results */
    ViewRole["CREATOR"] = "CREATOR";
    /** Anyone who voted can see the results */
    ViewRole["VOTERS"] = "VOTERS";
    /** Anyone can see the results, even if one didn't vote */
    ViewRole["EVERYONE"] = "EVERYONE";
})(ViewRole || (ViewRole = {}));
export var VoteRole;
(function (VoteRole) {
    /** Logged in member */
    VoteRole["SITE_MEMBERS"] = "SITE_MEMBERS";
    /** Anyone */
    VoteRole["ALL"] = "ALL";
})(VoteRole || (VoteRole = {}));
export var PollLayoutType;
(function (PollLayoutType) {
    /** List */
    PollLayoutType["LIST"] = "LIST";
    /** Grid */
    PollLayoutType["GRID"] = "GRID";
})(PollLayoutType || (PollLayoutType = {}));
export var PollLayoutDirection;
(function (PollLayoutDirection) {
    /** Left-to-right */
    PollLayoutDirection["LTR"] = "LTR";
    /** Right-to-left */
    PollLayoutDirection["RTL"] = "RTL";
})(PollLayoutDirection || (PollLayoutDirection = {}));
export var BackgroundType;
(function (BackgroundType) {
    /** Color background type */
    BackgroundType["COLOR"] = "COLOR";
    /** Image background type */
    BackgroundType["IMAGE"] = "IMAGE";
    /** Gradiant background type */
    BackgroundType["GRADIENT"] = "GRADIENT";
})(BackgroundType || (BackgroundType = {}));
export var DecorationType;
(function (DecorationType) {
    DecorationType["BOLD"] = "BOLD";
    DecorationType["ITALIC"] = "ITALIC";
    DecorationType["UNDERLINE"] = "UNDERLINE";
    DecorationType["SPOILER"] = "SPOILER";
    DecorationType["ANCHOR"] = "ANCHOR";
    DecorationType["MENTION"] = "MENTION";
    DecorationType["LINK"] = "LINK";
    DecorationType["COLOR"] = "COLOR";
    DecorationType["FONT_SIZE"] = "FONT_SIZE";
    DecorationType["EXTERNAL"] = "EXTERNAL";
})(DecorationType || (DecorationType = {}));
export var FontType;
(function (FontType) {
    FontType["PX"] = "PX";
    FontType["EM"] = "EM";
})(FontType || (FontType = {}));
export var AppType;
(function (AppType) {
    AppType["PRODUCT"] = "PRODUCT";
    AppType["EVENT"] = "EVENT";
    AppType["BOOKING"] = "BOOKING";
})(AppType || (AppType = {}));
export var InitialExpandedItems;
(function (InitialExpandedItems) {
    /** First item will be expended initally */
    InitialExpandedItems["FIRST"] = "FIRST";
    /** All items will expended initally */
    InitialExpandedItems["ALL"] = "ALL";
    /** All items collapsed initally */
    InitialExpandedItems["NONE"] = "NONE";
})(InitialExpandedItems || (InitialExpandedItems = {}));
export var Direction;
(function (Direction) {
    /** Left-to-right */
    Direction["LTR"] = "LTR";
    /** Right-to-left */
    Direction["RTL"] = "RTL";
})(Direction || (Direction = {}));
export var VerticalAlignment;
(function (VerticalAlignment) {
    /** Top alignment */
    VerticalAlignment["TOP"] = "TOP";
    /** Middle alignment */
    VerticalAlignment["MIDDLE"] = "MIDDLE";
    /** Bottom alignment */
    VerticalAlignment["BOTTOM"] = "BOTTOM";
})(VerticalAlignment || (VerticalAlignment = {}));
/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 * The JSON representation for `NullValue` is JSON `null`.
 */
export var NullValue;
(function (NullValue) {
    /** Null value. */
    NullValue["NULL_VALUE"] = "NULL_VALUE";
})(NullValue || (NullValue = {}));
export var MediaType;
(function (MediaType) {
    MediaType["UNKNOWN_MEDIA_TYPE"] = "UNKNOWN_MEDIA_TYPE";
    /** Image media type. */
    MediaType["IMAGE"] = "IMAGE";
    /** Video media type. */
    MediaType["VIDEO"] = "VIDEO";
})(MediaType || (MediaType = {}));
export var ProductOptionRenderType;
(function (ProductOptionRenderType) {
    /** Not implemented. */
    ProductOptionRenderType["UNKNOWN_OPTION_RENDER_TYPE"] = "UNKNOWN_OPTION_RENDER_TYPE";
    /** Text choices. */
    ProductOptionRenderType["TEXT_CHOICES"] = "TEXT_CHOICES";
    /** Swatch choices. */
    ProductOptionRenderType["SWATCH_CHOICES"] = "SWATCH_CHOICES";
})(ProductOptionRenderType || (ProductOptionRenderType = {}));
export var ChoiceType;
(function (ChoiceType) {
    ChoiceType["UNKNOWN_CHOICE_TYPE"] = "UNKNOWN_CHOICE_TYPE";
    /** Text choice. */
    ChoiceType["CHOICE_TEXT"] = "CHOICE_TEXT";
    /** Single color choice. */
    ChoiceType["ONE_COLOR"] = "ONE_COLOR";
    /** Multiple colors choice. */
    ChoiceType["MULTIPLE_COLORS"] = "MULTIPLE_COLORS";
    /** Image choice. */
    ChoiceType["IMAGE"] = "IMAGE";
})(ChoiceType || (ChoiceType = {}));
export var ModifierRenderType;
(function (ModifierRenderType) {
    /** Not implemented. */
    ModifierRenderType["UNKNOWN_MODIFIER_RENDER_TYPE"] = "UNKNOWN_MODIFIER_RENDER_TYPE";
    /** Free text. */
    ModifierRenderType["FREE_TEXT"] = "FREE_TEXT";
    /** Text choices. */
    ModifierRenderType["TEXT_CHOICES"] = "TEXT_CHOICES";
    /** Swatch choices. */
    ModifierRenderType["SWATCH_CHOICES"] = "SWATCH_CHOICES";
})(ModifierRenderType || (ModifierRenderType = {}));
export var InventoryAvailabilityStatus;
(function (InventoryAvailabilityStatus) {
    InventoryAvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** All variants are in stock and available for purchase. */
    InventoryAvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** All variants are out of stock. */
    InventoryAvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Some variants are out of stock and some are in stock and available for purchase. */
    InventoryAvailabilityStatus["PARTIALLY_OUT_OF_STOCK"] = "PARTIALLY_OUT_OF_STOCK";
})(InventoryAvailabilityStatus || (InventoryAvailabilityStatus = {}));
export var PreorderStatus;
(function (PreorderStatus) {
    PreorderStatus["UNKNOWN_PREORDER_STATUS"] = "UNKNOWN_PREORDER_STATUS";
    /** All variants are enabled for preorder. */
    PreorderStatus["ENABLED"] = "ENABLED";
    /** All variants are disabled for preorder. */
    PreorderStatus["DISABLED"] = "DISABLED";
    /** Some variants are disabled and some are enabled for preorder. */
    PreorderStatus["PARTIALLY_ENABLED"] = "PARTIALLY_ENABLED";
})(PreorderStatus || (PreorderStatus = {}));
export var ProductPreorderAvailability;
(function (ProductPreorderAvailability) {
    ProductPreorderAvailability["UNKNOWN_PREORDER_AVAILABILITY_STATUS"] = "UNKNOWN_PREORDER_AVAILABILITY_STATUS";
    /** All the product variants are available for preorder. */
    ProductPreorderAvailability["ALL_VARIANTS"] = "ALL_VARIANTS";
    /** None of the product variants are available for preorder. */
    ProductPreorderAvailability["NO_VARIANTS"] = "NO_VARIANTS";
    /** Some of the product variants are available for preorder. */
    ProductPreorderAvailability["SOME_VARIANTS"] = "SOME_VARIANTS";
})(ProductPreorderAvailability || (ProductPreorderAvailability = {}));
export var ProductType;
(function (ProductType) {
    /** Not implemented. */
    ProductType["UNKNOWN_PRODUCT_TYPE"] = "UNKNOWN_PRODUCT_TYPE";
    /** Physical product. */
    ProductType["PHYSICAL"] = "PHYSICAL";
    /** Digital product. */
    ProductType["DIGITAL"] = "DIGITAL";
})(ProductType || (ProductType = {}));
export var MeasurementUnit;
(function (MeasurementUnit) {
    MeasurementUnit["UNSPECIFIED"] = "UNSPECIFIED";
    MeasurementUnit["ML"] = "ML";
    MeasurementUnit["CL"] = "CL";
    MeasurementUnit["L"] = "L";
    MeasurementUnit["CBM"] = "CBM";
    MeasurementUnit["MG"] = "MG";
    MeasurementUnit["G"] = "G";
    MeasurementUnit["KG"] = "KG";
    MeasurementUnit["MM"] = "MM";
    MeasurementUnit["CM"] = "CM";
    MeasurementUnit["M"] = "M";
    MeasurementUnit["SQM"] = "SQM";
    MeasurementUnit["OZ"] = "OZ";
    MeasurementUnit["LB"] = "LB";
    MeasurementUnit["FLOZ"] = "FLOZ";
    MeasurementUnit["PT"] = "PT";
    MeasurementUnit["QT"] = "QT";
    MeasurementUnit["GAL"] = "GAL";
    MeasurementUnit["IN"] = "IN";
    MeasurementUnit["FT"] = "FT";
    MeasurementUnit["YD"] = "YD";
    MeasurementUnit["SQFT"] = "SQFT";
})(MeasurementUnit || (MeasurementUnit = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
export var FileType;
(function (FileType) {
    /** Unspecified file type. */
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    /** Secure picture file. */
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    /** Secure video file. */
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    /** Secure document file. */
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    /** Secure music file. */
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    /** Secure archive file. */
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (FileType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["UNKNOWN_DISCOUNT"] = "UNKNOWN_DISCOUNT";
    /** Discount by a specific amount. */
    DiscountType["AMOUNT"] = "AMOUNT";
    /** Discount by a percentage. */
    DiscountType["PERCENT"] = "PERCENT";
})(DiscountType || (DiscountType = {}));
export var Enum;
(function (Enum) {
    /** Default value. Means that permission not set */
    Enum["UNKNOWN"] = "UNKNOWN";
    /** Protected exposure. Exposed to members and owners */
    Enum["PROTECTED"] = "PROTECTED";
    /** Private exposure. Exposed to owners */
    Enum["PRIVATE"] = "PRIVATE";
    /** Public exposure. Visible to everyone */
    Enum["PUBLIC"] = "PUBLIC";
    /** Used for partial updates, to state that exposure is not changing */
    Enum["UNCHANGED"] = "UNCHANGED";
    /** Protected to members of permitted groups and owners */
    Enum["GROUP_PROTECTED"] = "GROUP_PROTECTED";
})(Enum || (Enum = {}));
export var State;
(function (State) {
    /** default state */
    State["Unknown"] = "Unknown";
    /** metasite does not require site search indexing */
    State["Off"] = "Off";
    /** metasite requires site search indexing */
    State["On"] = "On";
})(State || (State = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
export var SingleEntityOpsRequestedFields;
(function (SingleEntityOpsRequestedFields) {
    /** Not implemented. */
    SingleEntityOpsRequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    SingleEntityOpsRequestedFields["URL"] = "URL";
    SingleEntityOpsRequestedFields["CURRENCY"] = "CURRENCY";
    SingleEntityOpsRequestedFields["INFO_SECTION"] = "INFO_SECTION";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    SingleEntityOpsRequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    SingleEntityOpsRequestedFields["PLAIN_DESCRIPTION"] = "PLAIN_DESCRIPTION";
    SingleEntityOpsRequestedFields["INFO_SECTION_PLAIN_DESCRIPTION"] = "INFO_SECTION_PLAIN_DESCRIPTION";
    SingleEntityOpsRequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    SingleEntityOpsRequestedFields["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
    SingleEntityOpsRequestedFields["WEIGHT_MEASUREMENT_UNIT_INFO"] = "WEIGHT_MEASUREMENT_UNIT_INFO";
    SingleEntityOpsRequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    SingleEntityOpsRequestedFields["MEDIA_ITEMS_INFO"] = "MEDIA_ITEMS_INFO";
    SingleEntityOpsRequestedFields["DESCRIPTION"] = "DESCRIPTION";
    SingleEntityOpsRequestedFields["DIRECT_CATEGORIES_INFO"] = "DIRECT_CATEGORIES_INFO";
    SingleEntityOpsRequestedFields["ALL_CATEGORIES_INFO"] = "ALL_CATEGORIES_INFO";
    SingleEntityOpsRequestedFields["INFO_SECTION_DESCRIPTION"] = "INFO_SECTION_DESCRIPTION";
    SingleEntityOpsRequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(SingleEntityOpsRequestedFields || (SingleEntityOpsRequestedFields = {}));
export var AvailabilityStatus;
(function (AvailabilityStatus) {
    AvailabilityStatus["UNKNOWN_AVAILABILITY_STATUS"] = "UNKNOWN_AVAILABILITY_STATUS";
    /** Product is out of stock. */
    AvailabilityStatus["OUT_OF_STOCK"] = "OUT_OF_STOCK";
    /** Product is in stock. See `quantity` field for exact amount in stock. */
    AvailabilityStatus["IN_STOCK"] = "IN_STOCK";
    /** Product is only available for preorder. See `preorderInfo` field for more info. */
    AvailabilityStatus["PREORDER"] = "PREORDER";
})(AvailabilityStatus || (AvailabilityStatus = {}));
export var RequestedFields;
(function (RequestedFields) {
    /** Not implemented. */
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    RequestedFields["URL"] = "URL";
    RequestedFields["CURRENCY"] = "CURRENCY";
    RequestedFields["INFO_SECTION"] = "INFO_SECTION";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    RequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    RequestedFields["PLAIN_DESCRIPTION"] = "PLAIN_DESCRIPTION";
    RequestedFields["INFO_SECTION_PLAIN_DESCRIPTION"] = "INFO_SECTION_PLAIN_DESCRIPTION";
    RequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    RequestedFields["BREADCRUMBS_INFO"] = "BREADCRUMBS_INFO";
    RequestedFields["WEIGHT_MEASUREMENT_UNIT_INFO"] = "WEIGHT_MEASUREMENT_UNIT_INFO";
    RequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    RequestedFields["MEDIA_ITEMS_INFO"] = "MEDIA_ITEMS_INFO";
    RequestedFields["DESCRIPTION"] = "DESCRIPTION";
    RequestedFields["DIRECT_CATEGORIES_INFO"] = "DIRECT_CATEGORIES_INFO";
    RequestedFields["ALL_CATEGORIES_INFO"] = "ALL_CATEGORIES_INFO";
    RequestedFields["INFO_SECTION_DESCRIPTION"] = "INFO_SECTION_DESCRIPTION";
    RequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(RequestedFields || (RequestedFields = {}));
export var CommonSearchDetailsMode;
(function (CommonSearchDetailsMode) {
    /** Any of the search terms must be present */
    CommonSearchDetailsMode["OR"] = "OR";
    /** All search terms must be present */
    CommonSearchDetailsMode["AND"] = "AND";
})(CommonSearchDetailsMode || (CommonSearchDetailsMode = {}));
export var WixCommonSortOrder;
(function (WixCommonSortOrder) {
    WixCommonSortOrder["ASC"] = "ASC";
    WixCommonSortOrder["DESC"] = "DESC";
})(WixCommonSortOrder || (WixCommonSortOrder = {}));
export var AggregationValueAggregationSortType;
(function (AggregationValueAggregationSortType) {
    /** Should sort by number of matches */
    AggregationValueAggregationSortType["COUNT"] = "COUNT";
    /** Should sort by value of the field alphabetically */
    AggregationValueAggregationSortType["VALUE"] = "VALUE";
})(AggregationValueAggregationSortType || (AggregationValueAggregationSortType = {}));
export var AggregationValueAggregationSortDirection;
(function (AggregationValueAggregationSortDirection) {
    /** Should sort in descending order */
    AggregationValueAggregationSortDirection["DESC"] = "DESC";
    /** Should sort in ascending order */
    AggregationValueAggregationSortDirection["ASC"] = "ASC";
})(AggregationValueAggregationSortDirection || (AggregationValueAggregationSortDirection = {}));
export var AggregationValueAggregationMissingValues;
(function (AggregationValueAggregationMissingValues) {
    /** Should missing values be excluded from the aggregation results */
    AggregationValueAggregationMissingValues["EXCLUDE"] = "EXCLUDE";
    /** Should missing values be included in the aggregation results */
    AggregationValueAggregationMissingValues["INCLUDE"] = "INCLUDE";
})(AggregationValueAggregationMissingValues || (AggregationValueAggregationMissingValues = {}));
export var WixCommonScalarType;
(function (WixCommonScalarType) {
    WixCommonScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values */
    WixCommonScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value */
    WixCommonScalarType["MIN"] = "MIN";
    /** Maximum value */
    WixCommonScalarType["MAX"] = "MAX";
})(WixCommonScalarType || (WixCommonScalarType = {}));
export var AggregationNestedAggregationNestedAggregationType;
(function (AggregationNestedAggregationNestedAggregationType) {
    AggregationNestedAggregationNestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    AggregationNestedAggregationNestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    AggregationNestedAggregationNestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    AggregationNestedAggregationNestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationNestedAggregationNestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(AggregationNestedAggregationNestedAggregationType || (AggregationNestedAggregationNestedAggregationType = {}));
export var AggregationDateHistogramAggregationInterval;
(function (AggregationDateHistogramAggregationInterval) {
    AggregationDateHistogramAggregationInterval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    AggregationDateHistogramAggregationInterval["YEAR"] = "YEAR";
    /** Monthly interval */
    AggregationDateHistogramAggregationInterval["MONTH"] = "MONTH";
    /** Weekly interval */
    AggregationDateHistogramAggregationInterval["WEEK"] = "WEEK";
    /** Daily interval */
    AggregationDateHistogramAggregationInterval["DAY"] = "DAY";
    /** Hourly interval */
    AggregationDateHistogramAggregationInterval["HOUR"] = "HOUR";
    /** Minute interval */
    AggregationDateHistogramAggregationInterval["MINUTE"] = "MINUTE";
    /** Second interval */
    AggregationDateHistogramAggregationInterval["SECOND"] = "SECOND";
})(AggregationDateHistogramAggregationInterval || (AggregationDateHistogramAggregationInterval = {}));
export var WixCommonAggregationType;
(function (WixCommonAggregationType) {
    WixCommonAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    WixCommonAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    WixCommonAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    WixCommonAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    WixCommonAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    WixCommonAggregationType["NESTED"] = "NESTED";
})(WixCommonAggregationType || (WixCommonAggregationType = {}));
export var BulkAdjustProductVariantsByFilterRequestRoundingStrategy;
(function (BulkAdjustProductVariantsByFilterRequestRoundingStrategy) {
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["UNKNOWN_ROUNDING_STRATEGY"] = "UNKNOWN_ROUNDING_STRATEGY";
    /**
     * Calculated prices will be saved without rounding to keep max possible precision. It's still good idea to round numbers before displaying them.
     * Example: input $3.5555 -> saved value $3.5555
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["NO_ROUNDING"] = "NO_ROUNDING";
    /**
     * Calculated prices will be rounded according to currency precision.
     * Example: input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["CURRENCY_PRECISION"] = "CURRENCY_PRECISION";
    /**
     * Calculated prices will be rounded to nearest whole number.
     * Example: input $3.5555 -> saved value $4
     */
    BulkAdjustProductVariantsByFilterRequestRoundingStrategy["NEAREST_WHOLE_NUMBER"] = "NEAREST_WHOLE_NUMBER";
})(BulkAdjustProductVariantsByFilterRequestRoundingStrategy || (BulkAdjustProductVariantsByFilterRequestRoundingStrategy = {}));
export var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var SortType;
(function (SortType) {
    /** Should sort by number of matches. */
    SortType["COUNT"] = "COUNT";
    /** Should sort by value of the field alphabetically. */
    SortType["VALUE"] = "VALUE";
})(SortType || (SortType = {}));
export var SortDirection;
(function (SortDirection) {
    /** Should sort by descending order. */
    SortDirection["DESC"] = "DESC";
    /** Should sort by ascending order. */
    SortDirection["ASC"] = "ASC";
})(SortDirection || (SortDirection = {}));
export var MissingValues;
(function (MissingValues) {
    /** Exclude missing values from the aggregation results. */
    MissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values from the aggregation results. */
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (MissingValues = {}));
export var ScalarType;
(function (ScalarType) {
    /** Undefined scalar type. */
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    ScalarType["MIN"] = "MIN";
    /** Maximum value. */
    ScalarType["MAX"] = "MAX";
})(ScalarType || (ScalarType = {}));
export var NestedAggregationType;
(function (NestedAggregationType) {
    /** Undefined nested aggregation type. */
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation where user can define set of ranges - each representing a bucket. */
    NestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    NestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (NestedAggregationType = {}));
export var Interval;
(function (Interval) {
    /** Undefined interval type. */
    Interval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval. */
    Interval["YEAR"] = "YEAR";
    /** Monthly interval. */
    Interval["MONTH"] = "MONTH";
    /** Weekly interval. */
    Interval["WEEK"] = "WEEK";
    /** Daily interval. */
    Interval["DAY"] = "DAY";
    /** Hourly interval. */
    Interval["HOUR"] = "HOUR";
    /** Minute interval. */
    Interval["MINUTE"] = "MINUTE";
    /** Second interval. */
    Interval["SECOND"] = "SECOND";
})(Interval || (Interval = {}));
export var AggregationType;
(function (AggregationType) {
    /** Undefined aggregation type. */
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    AggregationType["VALUE"] = "VALUE";
    /** An aggregation where a user can define set of ranges - each representing a bucket. */
    AggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example: min, max, sum, avg. */
    AggregationType["SCALAR"] = "SCALAR";
    /** An aggregation where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** A Multi-level aggregation where each next aggregation is nested within previous one. */
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (AggregationType = {}));
export var Mode;
(function (Mode) {
    /** Any of the search terms must be present. */
    Mode["OR"] = "OR";
    /** All search terms must be present. */
    Mode["AND"] = "AND";
})(Mode || (Mode = {}));
export var CommonSortOrder;
(function (CommonSortOrder) {
    CommonSortOrder["ASC"] = "ASC";
    CommonSortOrder["DESC"] = "DESC";
})(CommonSortOrder || (CommonSortOrder = {}));
export var ValueAggregationSortType;
(function (ValueAggregationSortType) {
    /** Sort by number of matches. */
    ValueAggregationSortType["COUNT"] = "COUNT";
    /** Sort by value of the field alphabetically. */
    ValueAggregationSortType["VALUE"] = "VALUE";
})(ValueAggregationSortType || (ValueAggregationSortType = {}));
export var ValueAggregationSortDirection;
(function (ValueAggregationSortDirection) {
    /** Sort in descending order. */
    ValueAggregationSortDirection["DESC"] = "DESC";
    /** Sort in ascending order. */
    ValueAggregationSortDirection["ASC"] = "ASC";
})(ValueAggregationSortDirection || (ValueAggregationSortDirection = {}));
export var ValueAggregationMissingValues;
(function (ValueAggregationMissingValues) {
    /** Exclude missing values from the aggregation results. */
    ValueAggregationMissingValues["EXCLUDE"] = "EXCLUDE";
    /** Include missing values in the aggregation results. */
    ValueAggregationMissingValues["INCLUDE"] = "INCLUDE";
})(ValueAggregationMissingValues || (ValueAggregationMissingValues = {}));
export var CommonScalarType;
(function (CommonScalarType) {
    CommonScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values. */
    CommonScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value. */
    CommonScalarType["MIN"] = "MIN";
    /** Maximum value. */
    CommonScalarType["MAX"] = "MAX";
})(CommonScalarType || (CommonScalarType = {}));
export var NestedAggregationNestedAggregationType;
(function (NestedAggregationNestedAggregationType) {
    NestedAggregationNestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    NestedAggregationNestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    NestedAggregationNestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    NestedAggregationNestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.). */
    NestedAggregationNestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationNestedAggregationType || (NestedAggregationNestedAggregationType = {}));
export var DateHistogramAggregationInterval;
(function (DateHistogramAggregationInterval) {
    DateHistogramAggregationInterval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    DateHistogramAggregationInterval["YEAR"] = "YEAR";
    /** Monthly interval */
    DateHistogramAggregationInterval["MONTH"] = "MONTH";
    /** Weekly interval */
    DateHistogramAggregationInterval["WEEK"] = "WEEK";
    /** Daily interval */
    DateHistogramAggregationInterval["DAY"] = "DAY";
    /** Hourly interval */
    DateHistogramAggregationInterval["HOUR"] = "HOUR";
    /** Minute interval */
    DateHistogramAggregationInterval["MINUTE"] = "MINUTE";
    /** Second interval */
    DateHistogramAggregationInterval["SECOND"] = "SECOND";
})(DateHistogramAggregationInterval || (DateHistogramAggregationInterval = {}));
export var CommonAggregationType;
(function (CommonAggregationType) {
    CommonAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value. */
    CommonAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket. */
    CommonAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation. For example, min, max, sum, avg. */
    CommonAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    CommonAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one. */
    CommonAggregationType["NESTED"] = "NESTED";
})(CommonAggregationType || (CommonAggregationType = {}));
export var SearchDetailsMode;
(function (SearchDetailsMode) {
    /** Any of the search terms must be present. */
    SearchDetailsMode["OR"] = "OR";
    /** All search terms must be present. */
    SearchDetailsMode["AND"] = "AND";
})(SearchDetailsMode || (SearchDetailsMode = {}));
export var VariantsOpsRequestedFields;
(function (VariantsOpsRequestedFields) {
    /** Not implemented. */
    VariantsOpsRequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    VariantsOpsRequestedFields["CURRENCY"] = "CURRENCY";
    /** You can request merchant data only if you have the `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope. */
    VariantsOpsRequestedFields["MERCHANT_DATA"] = "MERCHANT_DATA";
    VariantsOpsRequestedFields["SUBSCRIPTION_PRICES_INFO"] = "SUBSCRIPTION_PRICES_INFO";
    VariantsOpsRequestedFields["VARIANT_OPTION_CHOICE_NAMES"] = "VARIANT_OPTION_CHOICE_NAMES";
    VariantsOpsRequestedFields["THUMBNAIL"] = "THUMBNAIL";
})(VariantsOpsRequestedFields || (VariantsOpsRequestedFields = {}));
export var RoundingStrategy;
(function (RoundingStrategy) {
    /** Undefined rounding strategy. */
    RoundingStrategy["UNKNOWN_ROUNDING_STRATEGY"] = "UNKNOWN_ROUNDING_STRATEGY";
    /**
     * Calculated prices are saved without rounding to keep the maximum possible precision. It's a good idea to round numbers before displaying them.
     * For example, input $3.5555 -> saved value $3.5555
     */
    RoundingStrategy["NO_ROUNDING"] = "NO_ROUNDING";
    /**
     * Calculated prices are rounded according to currency precision.
     * For example:, input $3.5555 -> saved value $3.56, input ¥3.5555 -> saved value ¥4
     */
    RoundingStrategy["CURRENCY_PRECISION"] = "CURRENCY_PRECISION";
    /**
     * Calculated prices are rounded to nearest whole number.
     * For example, input $3.5555 -> saved value $4
     */
    RoundingStrategy["NEAREST_WHOLE_NUMBER"] = "NEAREST_WHOLE_NUMBER";
})(RoundingStrategy || (RoundingStrategy = {}));
/**
 * Creates a new product.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 * @param product - Product to create.
 *
 * At least 1 variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
 * If `options` is empty one default variant must be provided with empty `choices` list.
 * @public
 * @documentationMaturity preview
 * @requiredField product
 * @requiredField product.media.itemsInfo.items
 * @requiredField product.modifiers
 * @requiredField product.modifiers.choicesSettings.choices
 * @requiredField product.name
 * @requiredField product.options
 * @requiredField product.options.choicesSettings.choices
 * @requiredField product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField product.productType
 * @requiredField product.subscriptionDetails.subscriptions
 * @requiredField product.subscriptionDetails.subscriptions.discount
 * @requiredField product.subscriptionDetails.subscriptions.discount.type
 * @requiredField product.subscriptionDetails.subscriptions.frequency
 * @requiredField product.subscriptionDetails.subscriptions.title
 * @requiredField product.variantsInfo
 * @requiredField product.variantsInfo.variants
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Created product.
 * @fqn wix.stores.catalog.v3.CatalogApi.CreateProduct
 */
export async function createProduct(product, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        product: product,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'product.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'product.media.main.image' },
                { path: 'product.media.itemsInfo.items.image' },
                { path: 'product.options.choicesSettings.choices.image' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.image' },
                { path: 'product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'product.variantsInfo.variants.media.image' },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'product.media.main.video' },
                { path: 'product.media.itemsInfo.items.video' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.video' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
                { path: 'product.variantsInfo.variants.media.video' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.createProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]))?.product;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { product: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['product', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a new product, and can create the product's inventory in the variants' default locations.
 *
 * This endpoint also allows to add a ribbon, brand, info sections, options, and modifiers.
 * @param product - Product to create with inventory.
 *
 * At least one variant must be provided and each variant must have relevant item in `choices` field for every item in `options`.
 * If `options` is empty one default variant must be provided with empty `choices` list.
 * @public
 * @documentationMaturity preview
 * @requiredField product
 * @requiredField product.media.itemsInfo.items
 * @requiredField product.modifiers
 * @requiredField product.modifiers.choicesSettings.choices
 * @requiredField product.name
 * @requiredField product.options
 * @requiredField product.options.choicesSettings.choices
 * @requiredField product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField product.productType
 * @requiredField product.subscriptionDetails.subscriptions
 * @requiredField product.subscriptionDetails.subscriptions.discount
 * @requiredField product.subscriptionDetails.subscriptions.discount.type
 * @requiredField product.subscriptionDetails.subscriptions.frequency
 * @requiredField product.subscriptionDetails.subscriptions.title
 * @requiredField product.variantsInfo
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.CreateProductWithInventory
 */
export async function createProductWithInventory(product, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        product: product,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'product.media.main.image' },
                { path: 'product.media.itemsInfo.items.image' },
                { path: 'product.options.choicesSettings.choices.image' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.image' },
                { path: 'product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'product.media.main.video' },
                { path: 'product.media.itemsInfo.items.video' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.video' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.createProductWithInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                product: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['product', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a product.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + If `variantsInfo.variants` are passed, they will replace all existing variants.
 * > + To update existing `variantsInfo.variants`, make sure to provide `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 * @param _id - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField product
 * @requiredField product.media.itemsInfo.items
 * @requiredField product.modifiers
 * @requiredField product.modifiers.choicesSettings.choices
 * @requiredField product.options
 * @requiredField product.options.choicesSettings.choices
 * @requiredField product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField product.revision
 * @requiredField product.subscriptionDetails.subscriptions
 * @requiredField product.subscriptionDetails.subscriptions.discount
 * @requiredField product.subscriptionDetails.subscriptions.discount.type
 * @requiredField product.subscriptionDetails.subscriptions.frequency
 * @requiredField product.subscriptionDetails.subscriptions.title
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @returns Updated product.
 * @fqn wix.stores.catalog.v3.CatalogApi.UpdateProduct
 */
export async function updateProduct(_id, product, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        product: { ...product, id: _id },
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'product.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'product.media.main.image' },
                { path: 'product.media.itemsInfo.items.image' },
                { path: 'product.options.choicesSettings.choices.image' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.image' },
                { path: 'product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'product.variantsInfo.variants.media.image' },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'product.media.main.video' },
                { path: 'product.media.itemsInfo.items.video' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.video' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
                { path: 'product.variantsInfo.variants.media.video' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.updateProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]))?.product;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { product: '$[1]' },
            explicitPathsToArguments: {
                'product.id': '$[0]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'product', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a new product, and can update the product's inventory.
 *
 * Each time the product is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the product.
 * This ensures you're working with the latest product and prevents unintended overwrites.
 *
 * >**Notes:**
 * > + Passing `variantsInfo.variants` will replace all existing variants.
 * > + To update existing `variantsInfo.variants`, pass `variantsInfo.variants.id`. If no ID is passed, the variant will be created with a new ID.
 * @param _id - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField product
 * @requiredField product.media.itemsInfo.items
 * @requiredField product.modifiers
 * @requiredField product.modifiers.choicesSettings.choices
 * @requiredField product.options
 * @requiredField product.options.choicesSettings.choices
 * @requiredField product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField product.revision
 * @requiredField product.subscriptionDetails.subscriptions
 * @requiredField product.subscriptionDetails.subscriptions.discount
 * @requiredField product.subscriptionDetails.subscriptions.discount.type
 * @requiredField product.subscriptionDetails.subscriptions.frequency
 * @requiredField product.subscriptionDetails.subscriptions.title
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField product.variantsInfo.variants.price
 * @requiredField product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.UpdateProductWithInventory
 */
export async function updateProductWithInventory(_id, product, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        product: { ...product, id: _id },
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'product.media.main.image' },
                { path: 'product.media.itemsInfo.items.image' },
                { path: 'product.options.choicesSettings.choices.image' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.image' },
                { path: 'product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'product.media.main.video' },
                { path: 'product.media.itemsInfo.items.video' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.video' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.updateProductWithInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { product: '$[1]' },
            explicitPathsToArguments: {
                'product.id': '$[0]',
                returnEntity: '$[2].returnEntity',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'product', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to create.
 * @public
 * @documentationMaturity preview
 * @requiredField products
 * @requiredField products.media.itemsInfo.items
 * @requiredField products.modifiers
 * @requiredField products.modifiers.choicesSettings.choices
 * @requiredField products.name
 * @requiredField products.options
 * @requiredField products.options.choicesSettings.choices
 * @requiredField products.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField products.productType
 * @requiredField products.subscriptionDetails.subscriptions
 * @requiredField products.subscriptionDetails.subscriptions.discount
 * @requiredField products.subscriptionDetails.subscriptions.discount.type
 * @requiredField products.subscriptionDetails.subscriptions.frequency
 * @requiredField products.subscriptionDetails.subscriptions.title
 * @requiredField products.variantsInfo
 * @requiredField products.variantsInfo.variants
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.variantsInfo.variants.price
 * @requiredField products.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkCreateProducts
 */
export async function bulkCreateProducts(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        products: products,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'products.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'products.media.main.image' },
                { path: 'products.media.itemsInfo.items.image' },
                { path: 'products.options.choicesSettings.choices.image' },
                {
                    path: 'products.options.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.modifiers.choicesSettings.choices.image' },
                {
                    path: 'products.modifiers.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.variantsInfo.variants.media.image' },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'products.media.main.video' },
                { path: 'products.media.itemsInfo.items.video' },
                {
                    path: 'products.options.choicesSettings.choices.linkedMedia.video',
                },
                {
                    path: 'products.modifiers.choicesSettings.choices.linkedMedia.video',
                },
                { path: 'products.variantsInfo.variants.media.video' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkCreateProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.main.image' },
                    { path: 'results.item.media.itemsInfo.items.image' },
                    { path: 'results.item.options.choicesSettings.choices.image' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'results.item.media.main.video' },
                    { path: 'results.item.media.itemsInfo.items.video' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'results.item.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates up to 100 products, and can create the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of creatable entities in a single request.
 * > For example, you can create 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can create 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to create with inventory.
 * @public
 * @documentationMaturity preview
 * @requiredField products
 * @requiredField products.media.itemsInfo.items
 * @requiredField products.modifiers
 * @requiredField products.modifiers.choicesSettings.choices
 * @requiredField products.name
 * @requiredField products.options
 * @requiredField products.options.choicesSettings.choices
 * @requiredField products.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField products.productType
 * @requiredField products.subscriptionDetails.subscriptions
 * @requiredField products.subscriptionDetails.subscriptions.discount
 * @requiredField products.subscriptionDetails.subscriptions.discount.type
 * @requiredField products.subscriptionDetails.subscriptions.frequency
 * @requiredField products.subscriptionDetails.subscriptions.title
 * @requiredField products.variantsInfo
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.variantsInfo.variants.price
 * @requiredField products.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_CREATE
 * @permissionId WIX_STORES.INVENTORY_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkCreateProductsWithInventory
 */
export async function bulkCreateProductsWithInventory(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        products: products,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'products.media.main.image' },
                { path: 'products.media.itemsInfo.items.image' },
                { path: 'products.options.choicesSettings.choices.image' },
                {
                    path: 'products.options.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.modifiers.choicesSettings.choices.image' },
                {
                    path: 'products.modifiers.choicesSettings.choices.linkedMedia.image',
                },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'products.media.main.video' },
                { path: 'products.media.itemsInfo.items.video' },
                {
                    path: 'products.options.choicesSettings.choices.linkedMedia.video',
                },
                {
                    path: 'products.modifiers.choicesSettings.choices.linkedMedia.video',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkCreateProductsWithInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'productResults.results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'productResults.results.item.media.main.image' },
                    { path: 'productResults.results.item.media.itemsInfo.items.image' },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.image',
                    },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.image',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    {
                        path: 'productResults.results.item.variantsInfo.variants.media.image',
                    },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'productResults.results.item.media.main.video' },
                    { path: 'productResults.results.item.media.itemsInfo.items.video' },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'productResults.results.item.variantsInfo.variants.media.video',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates up to 100 products.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to update.
 * @public
 * @documentationMaturity preview
 * @requiredField products
 * @requiredField products.product
 * @requiredField products.product._id
 * @requiredField products.product.media.itemsInfo.items
 * @requiredField products.product.modifiers
 * @requiredField products.product.modifiers.choicesSettings.choices
 * @requiredField products.product.options
 * @requiredField products.product.options.choicesSettings.choices
 * @requiredField products.product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField products.product.revision
 * @requiredField products.product.subscriptionDetails.subscriptions
 * @requiredField products.product.subscriptionDetails.subscriptions.discount
 * @requiredField products.product.subscriptionDetails.subscriptions.discount.type
 * @requiredField products.product.subscriptionDetails.subscriptions.frequency
 * @requiredField products.product.subscriptionDetails.subscriptions.title
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.product.variantsInfo.variants.price
 * @requiredField products.product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProducts
 */
export async function bulkUpdateProducts(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        products: products,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'products.product.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'products.product.media.main.image' },
                { path: 'products.product.media.itemsInfo.items.image' },
                { path: 'products.product.options.choicesSettings.choices.image' },
                {
                    path: 'products.product.options.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'products.product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.product.variantsInfo.variants.media.image' },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'products.product.media.main.video' },
                { path: 'products.product.media.itemsInfo.items.video' },
                {
                    path: 'products.product.options.choicesSettings.choices.linkedMedia.video',
                },
                {
                    path: 'products.product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
                { path: 'products.product.variantsInfo.variants.media.video' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkUpdateProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.main.image' },
                    { path: 'results.item.media.itemsInfo.items.image' },
                    { path: 'results.item.options.choicesSettings.choices.image' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'results.item.media.main.video' },
                    { path: 'results.item.media.itemsInfo.items.video' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'results.item.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates up to 100 products, and can update the products' inventories in the variants' default locations.
 *
 * >**Note:**
 * > The following limits apply to the total number of updatable entities in a single request.
 * > For example, you can update 10 products with up to 10 options for each product (10 x 10 = 100), or one product with 100 options.
 * > Alternatively, you can update 100 products with up to 10 variants in each (100 x 10 = 1000), or one product with 1000 variants.
 * > + `options`: 100
 * > + `modifiers`: 100
 * > + `infoSections`: 100
 * > + `variantsInfo.variants`: 1000
 * @param products - List of products to update.
 * @public
 * @documentationMaturity preview
 * @requiredField products
 * @requiredField products.product
 * @requiredField products.product._id
 * @requiredField products.product.media.itemsInfo.items
 * @requiredField products.product.modifiers
 * @requiredField products.product.modifiers.choicesSettings.choices
 * @requiredField products.product.options
 * @requiredField products.product.options.choicesSettings.choices
 * @requiredField products.product.physicalProperties.pricePerUnit.measurementUnit
 * @requiredField products.product.revision
 * @requiredField products.product.subscriptionDetails.subscriptions
 * @requiredField products.product.subscriptionDetails.subscriptions.discount
 * @requiredField products.product.subscriptionDetails.subscriptions.discount.type
 * @requiredField products.product.subscriptionDetails.subscriptions.frequency
 * @requiredField products.product.subscriptionDetails.subscriptions.title
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile
 * @requiredField products.product.variantsInfo.variants.digitalProperties.digitalFile._id
 * @requiredField products.product.variantsInfo.variants.physicalProperties.pricePerUnit.settings.measurementUnit
 * @requiredField products.product.variantsInfo.variants.price
 * @requiredField products.product.variantsInfo.variants.price.actualPrice
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionId WIX_STORES.INVENTORY_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Inventory write in v3 catalog
 * @permissionScopeId SCOPE.STORES.INVENTORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductsWithInventory
 */
export async function bulkUpdateProductsWithInventory(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        products: products,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'products.product.media.main.image' },
                { path: 'products.product.media.itemsInfo.items.image' },
                { path: 'products.product.options.choicesSettings.choices.image' },
                {
                    path: 'products.product.options.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'products.product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'products.product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'products.product.media.main.video' },
                { path: 'products.product.media.itemsInfo.items.video' },
                {
                    path: 'products.product.options.choicesSettings.choices.linkedMedia.video',
                },
                {
                    path: 'products.product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkUpdateProductsWithInventory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'productResults.results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'productResults.results.item.media.main.image' },
                    { path: 'productResults.results.item.media.itemsInfo.items.image' },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.image',
                    },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.image',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    {
                        path: 'productResults.results.item.variantsInfo.variants.media.image',
                    },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'productResults.results.item.media.main.video' },
                    { path: 'productResults.results.item.media.itemsInfo.items.video' },
                    {
                        path: 'productResults.results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'productResults.results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'productResults.results.item.variantsInfo.variants.media.video',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple products, given the provided filter.
 *
 * To update `infoSections`, `brand` or `ribbon` fields, you must also pass their existing `id`.
 *
 * > **Note:**
 * > The following fields cannot be updated with this endpoint:
 * > + `slug`
 * > + `options`
 * > + `modifiers`
 * > + `variantsInfo`
 * >
 * > To update these fields, use [Bulk Update Products](https://dev.wix.com/docs/rest/business-solutions/stores/catalog-v3/products-v3/bulk-update-products).
 * @public
 * @documentationMaturity preview
 * @requiredField options.product
 * @requiredField options.product.media.itemsInfo.items
 * @requiredField options.product.subscriptionDetails.subscriptions
 * @requiredField options.product.subscriptionDetails.subscriptions.discount
 * @requiredField options.product.subscriptionDetails.subscriptions.discount.type
 * @requiredField options.product.subscriptionDetails.subscriptions.frequency
 * @requiredField options.product.subscriptionDetails.subscriptions.title
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductsByFilter
 */
export async function bulkUpdateProductsByFilter(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
        product: options?.product,
        search: options?.search,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'product.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'product.media.main.image' },
                { path: 'product.media.itemsInfo.items.image' },
                { path: 'product.options.choicesSettings.choices.image' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.image' },
                { path: 'product.modifiers.choicesSettings.choices.image' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                },
                { path: 'product.variantsInfo.variants.media.image' },
            ],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [
                { path: 'product.media.main.video' },
                { path: 'product.media.itemsInfo.items.video' },
                { path: 'product.options.choicesSettings.choices.linkedMedia.video' },
                {
                    path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                },
                { path: 'product.variantsInfo.variants.media.video' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkUpdateProductsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0].filter',
                product: '$[0].product',
                search: '$[0].search',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a product's extended fields.
 *
 * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must first be configured in the app dashboard.
 * @param productId - Product ID.
 * @param namespace - App namespace.
 * @public
 * @documentationMaturity preview
 * @requiredField namespace
 * @requiredField options.namespaceData
 * @requiredField productId
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.UpdateExtendedFields
 */
export async function updateExtendedFields(productId, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
        namespace: namespace,
        namespaceData: options?.namespaceData,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                productId: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['productId', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a product and all its variants.
 * @param productId - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField productId
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.DeleteProduct
 */
export async function deleteProduct(productId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.deleteProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { productId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['productId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes multiple products.
 * @param productIds - IDs of products to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField productIds
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkDeleteProducts
 */
export async function bulkDeleteProducts(productIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productIds: productIds,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkDeleteProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { productIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['productIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Delete multiple products, given the provided filter.
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_STORES.PRODUCT_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkDeleteProductsByFilter
 */
export async function bulkDeleteProductsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkDeleteProductsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0]', search: '$[1].search' },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a product.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @param productId - Product ID.
 * @public
 * @documentationMaturity preview
 * @requiredField productId
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Product.
 * @fqn wix.stores.catalog.v3.CatalogApi.GetProduct
 */
export async function getProduct(productId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        productId: productId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.getProduct(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]))?.product;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { productId: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['productId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a product by slug.
 *
 * > **Note:**
 * > To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @param slug - Product slug.
 * @public
 * @documentationMaturity preview
 * @requiredField slug
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.stores.catalog.v3.CatalogApi.GetProductBySlug
 */
export async function getProductBySlug(slug, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        slug: slug,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.getProductBySlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'product.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'product.media.main.image' },
                    { path: 'product.media.itemsInfo.items.image' },
                    { path: 'product.options.choicesSettings.choices.image' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'product.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'product.media.main.video' },
                    { path: 'product.media.itemsInfo.items.video' },
                    {
                        path: 'product.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'product.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'product.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { slug: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['slug', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 products, given the provided filtering, search expression, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 *
 * > **Notes:**
 * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
 * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.stores.catalog.v3.CatalogApi.SearchProducts
 */
export async function searchProducts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        search: options?.search,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.searchProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'products.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'products.media.main.image' },
                    { path: 'products.media.itemsInfo.items.image' },
                    { path: 'products.options.choicesSettings.choices.image' },
                    {
                        path: 'products.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'products.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'products.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'products.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'products.media.main.video' },
                    { path: 'products.media.itemsInfo.items.video' },
                    {
                        path: 'products.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'products.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'products.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                search: '$[0].search',
                fields: '$[0].fields',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 products, given the provided filtering, sorting, and cursor paging.
 * Pass supported values to the `fields` array in the request to include those fields in the response.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language),
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 *
 * > **Notes:**
 * > + This method does not return `variantsInfo`. To retrieve product variants, use the Get Product method.
 * > + To retrieve a non-visible product (`visible: false`), your app must have the required `SCOPE.STORES.PRODUCT_READ_ADMIN` permission scope.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.stores.catalog.v3.CatalogApi.QueryProducts
 */
export function queryProducts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixStoresCatalogV3Product.queryProducts({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                    paths: [{ path: 'products.url' }],
                },
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [
                        { path: 'products.media.main.image' },
                        { path: 'products.media.itemsInfo.items.image' },
                        { path: 'products.options.choicesSettings.choices.image' },
                        {
                            path: 'products.options.choicesSettings.choices.linkedMedia.image',
                        },
                        { path: 'products.modifiers.choicesSettings.choices.image' },
                        {
                            path: 'products.modifiers.choicesSettings.choices.linkedMedia.image',
                        },
                        { path: 'products.variantsInfo.variants.media.image' },
                    ],
                },
                {
                    transformFn: transformRESTVideoV2ToSDKVideoV2,
                    paths: [
                        { path: 'products.media.main.video' },
                        { path: 'products.media.itemsInfo.items.video' },
                        {
                            path: 'products.options.choicesSettings.choices.linkedMedia.video',
                        },
                        {
                            path: 'products.modifiers.choicesSettings.choices.linkedMedia.video',
                        },
                        { path: 'products.variantsInfo.variants.media.video' },
                    ],
                },
            ]));
            return {
                items: transformedData?.products,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Counts the number of products that match the provided filtering.
 * @public
 * @documentationMaturity preview
 * @permissionId WIX_STORES.PRODUCT_READ
 * @permissionId WIX_STORES.PRODUCT_READ_NON_VISIBLE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read products in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ
 * @permissionScope Read v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_READ
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Read Products
 * @permissionScopeId SCOPE.DC-STORES.READ-PRODUCTS
 * @permissionScope Product v3 read admin
 * @permissionScopeId SCOPE.STORES.PRODUCT_READ_ADMIN
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.stores.catalog.v3.CatalogApi.CountProducts
 */
export async function countProducts(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
        search: options?.search,
        returnNonVisibleProducts: options?.returnNonVisibleProducts,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.countProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0].filter',
                search: '$[0].search',
                returnNonVisibleProducts: '$[0].returnNonVisibleProducts',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a variant of multiple products, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be updated:
 * + `visible`
 * + `price`
 * + `revenueDetails.cost`
 * + `physicalOptions`
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @requiredField options.variant
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkUpdateProductVariantsByFilter
 */
export async function bulkUpdateProductVariantsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        variant: options?.variant,
        search: options?.search,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'variant.media.image' }],
        },
        {
            transformFn: transformSDKVideoV2ToRESTVideoV2,
            paths: [{ path: 'variant.media.video' }],
        },
    ]);
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkUpdateProductVariantsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                variant: '$[1].variant',
                search: '$[1].search',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adjusts the price and cost of multiple variants, given the provided filter and search expression.
 *
 *
 * Only the following variant fields can be increased/decreased by amount or percentage:
 * + `compareAtPrice`
 * + `actualPrice`
 * + `cost`
 * + `compareAtPriceDiscount`
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAdjustProductVariantsByFilter
 */
export async function bulkAdjustProductVariantsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        cost: options?.cost,
        rounding: options?.rounding,
        search: options?.search,
        actualPrice: options?.actualPrice,
        compareAtPrice: options?.compareAtPrice,
        compareAtPriceDiscount: options?.compareAtPriceDiscount,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkAdjustProductVariantsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                cost: '$[1].cost',
                rounding: '$[1].rounding',
                search: '$[1].search',
                actualPrice: '$[1].actualPrice',
                compareAtPrice: '$[1].compareAtPrice',
                compareAtPriceDiscount: '$[1].compareAtPriceDiscount',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds info sections to multiple products, given the provided filter and search expression.
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @requiredField options.infoSectionIds
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddInfoSectionsToProductsByFilter
 */
export async function bulkAddInfoSectionsToProductsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        infoSectionIds: options?.infoSectionIds,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkAddInfoSectionsToProductsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                infoSectionIds: '$[1].infoSectionIds',
                search: '$[1].search',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds info sections to multiple products.
 * @param products - List of product IDs and revisions.
 * @public
 * @documentationMaturity preview
 * @requiredField options.infoSectionIds
 * @requiredField products
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddInfoSectionsToProducts
 */
export async function bulkAddInfoSectionsToProducts(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        products: products,
        infoSectionIds: options?.infoSectionIds,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkAddInfoSectionsToProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.main.image' },
                    { path: 'results.item.media.itemsInfo.items.image' },
                    { path: 'results.item.options.choicesSettings.choices.image' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'results.item.media.main.video' },
                    { path: 'results.item.media.itemsInfo.items.video' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'results.item.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                infoSectionIds: '$[1].infoSectionIds',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes info sections from multiple products, given the provided filter and search expression.
 * @param filter - Filter object.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @requiredField options.infoSectionIds
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveInfoSectionsFromProductsByFilter
 */
export async function bulkRemoveInfoSectionsFromProductsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        infoSectionIds: options?.infoSectionIds,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkRemoveInfoSectionsFromProductsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                infoSectionIds: '$[1].infoSectionIds',
                search: '$[1].search',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes info sections from multiple products.
 * @param products - List of product IDs and revisions.
 * @public
 * @documentationMaturity preview
 * @requiredField options.infoSectionIds
 * @requiredField products
 * @permissionId WIX_STORES.PRODUCT_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Product write in v3 catalog
 * @permissionScopeId SCOPE.STORES.PRODUCT_WRITE
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveInfoSectionsFromProducts
 */
export async function bulkRemoveInfoSectionsFromProducts(products, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        products: products,
        infoSectionIds: options?.infoSectionIds,
        returnEntity: options?.returnEntity,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkRemoveInfoSectionsFromProducts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'results.item.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.main.image' },
                    { path: 'results.item.media.itemsInfo.items.image' },
                    { path: 'results.item.options.choicesSettings.choices.image' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.modifiers.choicesSettings.choices.image' },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.image',
                    },
                    { path: 'results.item.variantsInfo.variants.media.image' },
                ],
            },
            {
                transformFn: transformRESTVideoV2ToSDKVideoV2,
                paths: [
                    { path: 'results.item.media.main.video' },
                    { path: 'results.item.media.itemsInfo.items.video' },
                    {
                        path: 'results.item.options.choicesSettings.choices.linkedMedia.video',
                    },
                    {
                        path: 'results.item.modifiers.choicesSettings.choices.linkedMedia.video',
                    },
                    { path: 'results.item.variantsInfo.variants.media.video' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                products: '$[0]',
                infoSectionIds: '$[1].infoSectionIds',
                returnEntity: '$[1].returnEntity',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['products', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds multiple products, given the provided filter and search expression, to up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 * @public
 * @documentationMaturity preview
 * @requiredField options.categoryIds
 * @permissionId CATEGORIES.CATEGORY_ADD_ITEM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Category item write
 * @permissionScopeId SCOPE.CATEGORIES.CATEGORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Category write
 * @permissionScopeId SCOPE.CATEGORIES.CATEGORY_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkAddProductsToCategoriesByFilter
 */
export async function bulkAddProductsToCategoriesByFilter(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
        categoryIds: options?.categoryIds,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkAddProductsToCategoriesByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0].filter',
                categoryIds: '$[0].categoryIds',
                search: '$[0].search',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes multiple products, given the provided filter and search expression, from up to 5 categories.
 *
 * Learn more about the [Categories API](https://dev.wix.com/docs/rest/business-management/categories/introduction).
 * @public
 * @documentationMaturity preview
 * @requiredField options.categoryIds
 * @permissionId CATEGORIES.CATEGORY_REMOVE_ITEM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Category item write
 * @permissionScopeId SCOPE.CATEGORIES.CATEGORY_ITEM_WRITE
 * @permissionScope Manage Products
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-PRODUCTS
 * @permissionScope Manage v3 catalog
 * @permissionScopeId SCOPE.STORES.CATALOG_WRITE
 * @permissionScope Category write
 * @permissionScopeId SCOPE.CATEGORIES.CATEGORY_WRITE
 * @applicableIdentity APP
 * @fqn wix.stores.catalog.v3.CatalogApi.BulkRemoveProductsFromCategoriesByFilter
 */
export async function bulkRemoveProductsFromCategoriesByFilter(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
        categoryIds: options?.categoryIds,
        search: options?.search,
    });
    const reqOpts = ambassadorWixStoresCatalogV3Product.bulkRemoveProductsFromCategoriesByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0].filter',
                categoryIds: '$[0].categoryIds',
                search: '$[0].search',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=stores-catalog-v3-product-products-v-3.universal.js.map