{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My%20files/Babyfit/babyfit-next/latest/shoping/src/Components/productList/ProductList.jsx"],"sourcesContent":["\"use client\"\nimport { useSearchParams } from \"next/navigation\"; // To get the search parameters (URL query)\nimport { useEffect, useState } from 'react'; // To manage client-side state\nimport Link from 'next/link';\n\nconst Breadcrumbs = ({ product }) => {\n  const searchParams = useSearchParams(); // Access search params from URL\n  const [isClient, setIsClient] = useState(false); // Track if we're on the client side\n\n  useEffect(() => {\n    // Set to true when the component is mounted on the client\n    setIsClient(true);\n  }, []);\n\n  // Early return if not client-side yet to prevent hydration issues\n  if (!isClient) return null;\n\n  const catSlug = searchParams.get(\"cat\"); // Extract 'cat' from query string (category)\n\n  // Convert catSlug to a human-readable name, or fallback to null if undefined\n  const categoryName = catSlug ? catSlug.replace(\"-\", \" \") : null;\n\n  // Initialize breadcrumb items with \"Home\"\n  const breadcrumbItems = [\n    { name: \"Home\", path: \"/\" },\n  ];\n\n  // Add category breadcrumb only if catSlug exists and it's a valid category\n  if (categoryName && product) {\n    breadcrumbItems.push({\n      name: categoryName, // Display the category name\n      path: `/list?cat=${catSlug}`, // Category page URL\n    });\n  }\n\n  // Always add product breadcrumb if a product is available\n  if (product) {\n    breadcrumbItems.push({\n      name: product.name, // Display the product name\n      path: `/product/${product.slug}${catSlug ? `?cat=${catSlug}` : ''}`, // URL to product detail page, including category if available\n    });\n  } else if (!catSlug) {\n    // If no category and no product, show the default product list link\n    breadcrumbItems.push({\n      name: \"All Products\",\n      path: \"/list\",\n    });\n  }\n\n  // If no product is found, treat it as a category page\n  if (!product && catSlug && !breadcrumbItems.some(item => item.name === categoryName)) {\n    breadcrumbItems.push({\n      name: categoryName,\n      path: `/list?cat=${catSlug}`,\n    });\n  }\n\n  return (\n    <nav className=\"breadcrumbs\">\n      <ul>\n        {breadcrumbItems.map((item, index) => (\n          <li key={index}>\n            <Link href={item.path}>\n              {item.name}\n            </Link>\n            {index < breadcrumbItems.length - 1 && \" / \"} {/* Add separator except after the last item */}\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Breadcrumbs;\n"],"names":[],"mappings":";;;;AACA,mOAAmD,2CAA2C;AAC9F,iVAA6C,8BAA8B;AAC3E;AAHA;;;;;AAKA,MAAM,cAAc,CAAC,EAAE,OAAO,EAAE;IAC9B,MAAM,eAAe,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD,KAAK,gCAAgC;IACxE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ,oCAAoC;IAErF,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,0DAA0D;QAC1D,YAAY;IACd,GAAG,EAAE;IAEL,kEAAkE;IAClE,IAAI,CAAC,UAAU,OAAO;IAEtB,MAAM,UAAU,aAAa,GAAG,CAAC,QAAQ,6CAA6C;IAEtF,6EAA6E;IAC7E,MAAM,eAAe,UAAU,QAAQ,OAAO,CAAC,KAAK,OAAO;IAE3D,0CAA0C;IAC1C,MAAM,kBAAkB;QACtB;YAAE,MAAM;YAAQ,MAAM;QAAI;KAC3B;IAED,2EAA2E;IAC3E,IAAI,gBAAgB,SAAS;QAC3B,gBAAgB,IAAI,CAAC;YACnB,MAAM;YACN,MAAM,CAAC,UAAU,EAAE,SAAS;QAC9B;IACF;IAEA,0DAA0D;IAC1D,IAAI,SAAS;QACX,gBAAgB,IAAI,CAAC;YACnB,MAAM,QAAQ,IAAI;YAClB,MAAM,CAAC,SAAS,EAAE,QAAQ,IAAI,GAAG,UAAU,CAAC,KAAK,EAAE,SAAS,GAAG,IAAI;QACrE;IACF,OAAO,IAAI,CAAC,SAAS;QACnB,oEAAoE;QACpE,gBAAgB,IAAI,CAAC;YACnB,MAAM;YACN,MAAM;QACR;IACF;IAEA,sDAAsD;IACtD,IAAI,CAAC,WAAW,WAAW,CAAC,gBAAgB,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK,eAAe;QACpF,gBAAgB,IAAI,CAAC;YACnB,MAAM;YACN,MAAM,CAAC,UAAU,EAAE,SAAS;QAC9B;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;sBACE,gBAAgB,GAAG,CAAC,CAAC,MAAM,sBAC1B,8OAAC;;sCACC,8OAAC,4JAAA,CAAA,UAAI;4BAAC,MAAM,KAAK,IAAI;sCAClB,KAAK,IAAI;;;;;;wBAEX,QAAQ,gBAAgB,MAAM,GAAG,KAAK;wBAAM;;mBAJtC;;;;;;;;;;;;;;;AAUnB;uCAEe"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}